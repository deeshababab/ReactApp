{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _style = require(\"../../style\");\n\nvar _assets = _interopRequireDefault(require(\"../../assets\"));\n\nvar _commons = require(\"../../commons\");\n\nvar _touchableOpacity = _interopRequireDefault(require(\"../touchableOpacity\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\checkbox\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar DEFAULT_SIZE = 24;\nvar DEFAULT_COLOR = _style.Colors.blue30;\nvar DEFAULT_ICON_COLOR = _style.Colors.white;\nvar DEFAULT_DISABLED_COLOR = _style.Colors.dark70;\n\nvar Checkbox = function (_BaseComponent) {\n  (0, _inherits2.default)(Checkbox, _BaseComponent);\n\n  var _super = _createSuper(Checkbox);\n\n  function Checkbox(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Checkbox);\n    _this = _super.call(this, props);\n\n    _this.onPress = function () {\n      var _this$getThemeProps = _this.getThemeProps(),\n          disabled = _this$getThemeProps.disabled;\n\n      if (!disabled) {\n        _lodash.default.invoke(_this.props, 'onValueChange', !_this.props.value);\n      }\n    };\n\n    _this.state = {\n      isChecked: new _reactNative.Animated.Value(_this.props.value ? 1 : 0)\n    };\n    _this.animationStyle = {\n      opacity: _this.state.isChecked,\n      transform: [{\n        scaleX: _this.state.isChecked\n      }, {\n        scaleY: _this.state.isChecked\n      }]\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(Checkbox, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$getThemeProps2 = this.getThemeProps(),\n          value = _this$getThemeProps2.value;\n\n      if (prevProps.value !== value) {\n        this.animateCheckbox(value);\n      }\n    }\n  }, {\n    key: \"getAccessibilityProps\",\n    value: function getAccessibilityProps() {\n      var _this$getThemeProps3 = this.getThemeProps(),\n          accessibilityLabel = _this$getThemeProps3.accessibilityLabel,\n          disabled = _this$getThemeProps3.disabled,\n          value = _this$getThemeProps3.value;\n\n      var checkedState = value ? 'checked' : 'unchecked';\n      return {\n        accessible: true,\n        accessibilityLabel: accessibilityLabel ? accessibilityLabel + \" \" + checkedState : \"checkbox \" + checkedState,\n        accessibilityRole: 'button',\n        accessibilityStates: disabled ? ['disabled'] : undefined\n      };\n    }\n  }, {\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.getThemeProps());\n    }\n  }, {\n    key: \"animateCheckbox\",\n    value: function animateCheckbox(value) {\n      var isChecked = this.state.isChecked;\n\n      _reactNative.Animated.timing(isChecked, {\n        duration: 170,\n        easing: _reactNative.Easing.bezier(0.77, 0.0, 0.175, 1.0),\n        toValue: Number(value),\n        useNativeDriver: true\n      }).start();\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      var _this$getThemeProps4 = this.getThemeProps(),\n          color = _this$getThemeProps4.color,\n          disabled = _this$getThemeProps4.disabled;\n\n      return disabled ? DEFAULT_DISABLED_COLOR : color || DEFAULT_COLOR;\n    }\n  }, {\n    key: \"getBorderStyle\",\n    value: function getBorderStyle() {\n      var _this$getThemeProps5 = this.getThemeProps(),\n          propsStyle = _this$getThemeProps5.style;\n\n      var borderColor = {\n        borderColor: this.getColor()\n      };\n      var style = [this.styles.container, {\n        borderWidth: 2\n      }, borderColor, propsStyle];\n      return style;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$getThemeProps6 = this.getThemeProps(),\n          selectedIcon = _this$getThemeProps6.selectedIcon,\n          color = _this$getThemeProps6.color,\n          iconColor = _this$getThemeProps6.iconColor,\n          disabled = _this$getThemeProps6.disabled,\n          testID = _this$getThemeProps6.testID,\n          others = (0, _objectWithoutProperties2.default)(_this$getThemeProps6, [\"selectedIcon\", \"color\", \"iconColor\", \"disabled\", \"testID\"]);\n\n      return _react.default.createElement(_touchableOpacity.default, (0, _extends2.default)({}, this.getAccessibilityProps(), {\n        activeOpacity: 1,\n        testID: testID\n      }, others, {\n        style: this.getBorderStyle(),\n        onPress: this.onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_reactNative.Animated.View, {\n        style: [this.styles.container, {\n          backgroundColor: this.getColor()\n        }, {\n          opacity: this.animationStyle.opacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Animated.Image, {\n        style: [this.styles.selectedIcon, color && {\n          tintColor: iconColor\n        }, {\n          transform: this.animationStyle.transform\n        }, disabled && {\n          tintColor: DEFAULT_ICON_COLOR\n        }],\n        source: selectedIcon || _assets.default.icons.checkSmall,\n        testID: testID + \".selected\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n  return Checkbox;\n}(_commons.BaseComponent);\n\nCheckbox.displayName = 'Checkbox';\nCheckbox.propTypes = {\n  value: _propTypes.default.bool,\n  onValueChange: _propTypes.default.func,\n  disabled: _propTypes.default.bool,\n  color: _propTypes.default.string,\n  size: _propTypes.default.number,\n  borderRadius: _propTypes.default.number,\n  selectedIcon: _propTypes.default.number,\n  iconColor: _propTypes.default.string\n};\n\nfunction createStyles(_ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? DEFAULT_COLOR : _ref$color,\n      _ref$iconColor = _ref.iconColor,\n      iconColor = _ref$iconColor === void 0 ? DEFAULT_ICON_COLOR : _ref$iconColor,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? DEFAULT_SIZE : _ref$size,\n      borderRadius = _ref.borderRadius;\n  return _reactNative.StyleSheet.create({\n    container: {\n      width: size,\n      height: size,\n      borderRadius: borderRadius || 8,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderColor: color\n    },\n    selectedIcon: {\n      tintColor: iconColor,\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  });\n}\n\nvar _default = Checkbox;\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/checkbox/index.js"],"names":["DEFAULT_SIZE","DEFAULT_COLOR","Colors","blue30","DEFAULT_ICON_COLOR","white","DEFAULT_DISABLED_COLOR","dark70","Checkbox","props","onPress","getThemeProps","disabled","_","invoke","value","state","isChecked","Animated","Value","animationStyle","opacity","transform","scaleX","scaleY","prevProps","animateCheckbox","accessibilityLabel","checkedState","accessible","accessibilityRole","accessibilityStates","undefined","styles","createStyles","timing","duration","easing","Easing","bezier","toValue","Number","useNativeDriver","start","color","propsStyle","style","borderColor","getColor","container","borderWidth","selectedIcon","iconColor","testID","others","getAccessibilityProps","getBorderStyle","backgroundColor","tintColor","Assets","icons","checkSmall","BaseComponent","displayName","propTypes","PropTypes","bool","onValueChange","func","string","size","number","borderRadius","StyleSheet","create","width","height","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,YAAY,GAAG,EAArB;AACA,IAAMC,aAAa,GAAGC,cAAOC,MAA7B;AACA,IAAMC,kBAAkB,GAAGF,cAAOG,KAAlC;AACA,IAAMC,sBAAsB,GAAGJ,cAAOK,MAAtC;;IAKMC,Q;;;;;AAqCJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;;AADiB,UAsDnBC,OAtDmB,GAsDT,YAAM;AAAA,gCACK,MAAKC,aAAL,EADL;AAAA,UACPC,QADO,uBACPA,QADO;;AAGd,UAAI,CAACA,QAAL,EAAe;AACbC,wBAAEC,MAAF,CAAS,MAAKL,KAAd,EAAqB,eAArB,EAAsC,CAAC,MAAKA,KAAL,CAAWM,KAAlD;AACD;AACF,KA5DkB;;AAGjB,UAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IAAIC,sBAASC,KAAb,CAAmB,MAAKV,KAAL,CAAWM,KAAX,GAAmB,CAAnB,GAAuB,CAA1C;AADA,KAAb;AAIA,UAAKK,cAAL,GAAsB;AACpBC,MAAAA,OAAO,EAAE,MAAKL,KAAL,CAAWC,SADA;AAEpBK,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,MAAM,EAAE,MAAKP,KAAL,CAAWC;AADrB,OADS,EAIT;AACEO,QAAAA,MAAM,EAAE,MAAKR,KAAL,CAAWC;AADrB,OAJS;AAFS,KAAtB;AAPiB;AAkBlB;;;;uCAEkBQ,S,EAAW;AAAA,iCACZ,KAAKd,aAAL,EADY;AAAA,UACrBI,KADqB,wBACrBA,KADqB;;AAE5B,UAAIU,SAAS,CAACV,KAAV,KAAoBA,KAAxB,EAA+B;AAC7B,aAAKW,eAAL,CAAqBX,KAArB;AACD;AACF;;;4CAEuB;AAAA,iCACwB,KAAKJ,aAAL,EADxB;AAAA,UACfgB,kBADe,wBACfA,kBADe;AAAA,UACKf,QADL,wBACKA,QADL;AAAA,UACeG,KADf,wBACeA,KADf;;AAEtB,UAAMa,YAAY,GAAGb,KAAK,GAAG,SAAH,GAAe,WAAzC;AAEA,aAAO;AACLc,QAAAA,UAAU,EAAE,IADP;AAELF,QAAAA,kBAAkB,EAAEA,kBAAkB,GAAMA,kBAAN,SAA4BC,YAA5B,iBAAyDA,YAF1F;AAGLE,QAAAA,iBAAiB,EAAE,QAHd;AAILC,QAAAA,mBAAmB,EAAEnB,QAAQ,GAAG,CAAC,UAAD,CAAH,GAAkBoB;AAJ1C,OAAP;AAMD;;;qCAEgB;AACf,WAAKC,MAAL,GAAcC,YAAY,CAAC,KAAKvB,aAAL,EAAD,CAA1B;AACD;;;oCAEeI,K,EAAO;AAAA,UACdE,SADc,GACD,KAAKD,KADJ,CACdC,SADc;;AAGrBC,4BAASiB,MAAT,CAAgBlB,SAAhB,EAA2B;AACzBmB,QAAAA,QAAQ,EAAE,GADe;AAEzBC,QAAAA,MAAM,EAAEC,oBAAOC,MAAP,CAAc,IAAd,EAAoB,GAApB,EAAyB,KAAzB,EAAgC,GAAhC,CAFiB;AAGzBC,QAAAA,OAAO,EAAEC,MAAM,CAAC1B,KAAD,CAHU;AAIzB2B,QAAAA,eAAe,EAAE;AAJQ,OAA3B,EAKGC,KALH;AAMD;;;+BAUU;AAAA,iCACiB,KAAKhC,aAAL,EADjB;AAAA,UACFiC,KADE,wBACFA,KADE;AAAA,UACKhC,QADL,wBACKA,QADL;;AAET,aAAOA,QAAQ,GAAGN,sBAAH,GAA4BsC,KAAK,IAAI3C,aAApD;AACD;;;qCAEgB;AAAA,iCACa,KAAKU,aAAL,EADb;AAAA,UACDkC,UADC,wBACRC,KADQ;;AAEf,UAAMC,WAAW,GAAG;AAACA,QAAAA,WAAW,EAAE,KAAKC,QAAL;AAAd,OAApB;AACA,UAAMF,KAAK,GAAG,CAAC,KAAKb,MAAL,CAAYgB,SAAb,EAAwB;AAACC,QAAAA,WAAW,EAAE;AAAd,OAAxB,EAA0CH,WAA1C,EAAuDF,UAAvD,CAAd;AAEA,aAAOC,KAAP;AACD;;;6BAEQ;AAAA,iCAC+D,KAAKnC,aAAL,EAD/D;AAAA,UACAwC,YADA,wBACAA,YADA;AAAA,UACcP,KADd,wBACcA,KADd;AAAA,UACqBQ,SADrB,wBACqBA,SADrB;AAAA,UACgCxC,QADhC,wBACgCA,QADhC;AAAA,UAC0CyC,MAD1C,wBAC0CA,MAD1C;AAAA,UACqDC,MADrD;;AAEP,aACE,6BAAC,yBAAD,6BACM,KAAKC,qBAAL,EADN;AAEE,QAAA,aAAa,EAAE,CAFjB;AAGE,QAAA,MAAM,EAAEF;AAHV,SAIMC,MAJN;AAKE,QAAA,KAAK,EAAE,KAAKE,cAAL,EALT;AAME,QAAA,OAAO,EAAE,KAAK9C,OANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASI,6BAAC,qBAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CAAC,KAAKuB,MAAL,CAAYgB,SAAb,EAAwB;AAACQ,UAAAA,eAAe,EAAE,KAAKT,QAAL;AAAlB,SAAxB,EAA4D;AAAC3B,UAAAA,OAAO,EAAE,KAAKD,cAAL,CAAoBC;AAA9B,SAA5D,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE,6BAAC,qBAAD,CAAU,KAAV;AACE,QAAA,KAAK,EAAE,CACL,KAAKY,MAAL,CAAYkB,YADP,EAELP,KAAK,IAAI;AAACc,UAAAA,SAAS,EAAEN;AAAZ,SAFJ,EAGL;AAAC9B,UAAAA,SAAS,EAAE,KAAKF,cAAL,CAAoBE;AAAhC,SAHK,EAILV,QAAQ,IAAI;AAAC8C,UAAAA,SAAS,EAAEtD;AAAZ,SAJP,CADT;AAOE,QAAA,MAAM,EAAE+C,YAAY,IAAIQ,gBAAOC,KAAP,CAAaC,UAPvC;AAQE,QAAA,MAAM,EAAKR,MAAL,cARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CATJ,CADF;AA2BD;;;EA7IoBS,sB;;AAAjBtD,Q,CACGuD,W,GAAc,U;AADjBvD,Q,CAEGwD,S,GAAY;AAIjBjD,EAAAA,KAAK,EAAEkD,mBAAUC,IAJA;AAQjBC,EAAAA,aAAa,EAAEF,mBAAUG,IARR;AAYjBxD,EAAAA,QAAQ,EAAEqD,mBAAUC,IAZH;AAgBjBtB,EAAAA,KAAK,EAAEqB,mBAAUI,MAhBA;AAoBjBC,EAAAA,IAAI,EAAEL,mBAAUM,MApBC;AAwBjBC,EAAAA,YAAY,EAAEP,mBAAUM,MAxBP;AA4BjBpB,EAAAA,YAAY,EAAEc,mBAAUM,MA5BP;AAgCjBnB,EAAAA,SAAS,EAAEa,mBAAUI;AAhCJ,C;;AA8IrB,SAASnC,YAAT,OAAkH;AAAA,wBAA3FU,KAA2F;AAAA,MAA3FA,KAA2F,2BAAnF3C,aAAmF;AAAA,4BAApEmD,SAAoE;AAAA,MAApEA,SAAoE,+BAAxDhD,kBAAwD;AAAA,uBAApCkE,IAAoC;AAAA,MAApCA,IAAoC,0BAA7BtE,YAA6B;AAAA,MAAfwE,YAAe,QAAfA,YAAe;AAChH,SAAOC,wBAAWC,MAAX,CAAkB;AACvBzB,IAAAA,SAAS,EAAE;AACT0B,MAAAA,KAAK,EAAEL,IADE;AAETM,MAAAA,MAAM,EAAEN,IAFC;AAGTE,MAAAA,YAAY,EAAEA,YAAY,IAAI,CAHrB;AAITK,MAAAA,UAAU,EAAE,QAJH;AAKTC,MAAAA,cAAc,EAAE,QALP;AAMT/B,MAAAA,WAAW,EAAEH;AANJ,KADY;AASvBO,IAAAA,YAAY,EAAE;AACZO,MAAAA,SAAS,EAAEN,SADC;AAEZyB,MAAAA,UAAU,EAAE,QAFA;AAGZC,MAAAA,cAAc,EAAE;AAHJ;AATS,GAAlB,CAAP;AAeD;;eAEctE,Q","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Animated, Easing, StyleSheet} from 'react-native';\nimport {Colors} from '../../style';\nimport Assets from '../../assets';\nimport {BaseComponent} from '../../commons';\nimport TouchableOpacity from '../touchableOpacity';\n\nconst DEFAULT_SIZE = 24;\nconst DEFAULT_COLOR = Colors.blue30;\nconst DEFAULT_ICON_COLOR = Colors.white;\nconst DEFAULT_DISABLED_COLOR = Colors.dark70;\n\n/**\n * Checkbox component for toggling boolean value related to some context\n */\nclass Checkbox extends BaseComponent {\n  static displayName = 'Checkbox';\n  static propTypes = {\n    /**\n     * The value of the Checkbox. If true the switch will be turned on. Default value is false.\n     */\n    value: PropTypes.bool,\n    /**\n     * Invoked with the new value when the value changes.\n     */\n    onValueChange: PropTypes.func,\n    /**\n     * Whether the checkbox should be disabled\n     */\n    disabled: PropTypes.bool,\n    /**\n     * The Checkbox color\n     */\n    color: PropTypes.string,\n    /**\n     * The size of the checkbox. affect both width and height\n     */\n    size: PropTypes.number,\n    /**\n     * The Checkbox border radius\n     */\n    borderRadius: PropTypes.number,\n    /**\n     * The icon asset to use for the selected indication (accept only local assets)\n     */\n    selectedIcon: PropTypes.number,\n    /**\n     * The selected icon color\n     */\n    iconColor: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isChecked: new Animated.Value(this.props.value ? 1 : 0)\n    };\n\n    this.animationStyle = {\n      opacity: this.state.isChecked,\n      transform: [\n        {\n          scaleX: this.state.isChecked\n        },\n        {\n          scaleY: this.state.isChecked\n        }\n      ]\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {value} = this.getThemeProps();\n    if (prevProps.value !== value) {\n      this.animateCheckbox(value);\n    }\n  }\n\n  getAccessibilityProps() {\n    const {accessibilityLabel, disabled, value} = this.getThemeProps();\n    const checkedState = value ? 'checked' : 'unchecked';\n\n    return {\n      accessible: true,\n      accessibilityLabel: accessibilityLabel ? `${accessibilityLabel} ${checkedState}` : `checkbox ${checkedState}`, //TODO: RN60 fix - label and role and convert to accessibilityActions\n      accessibilityRole: 'button',\n      accessibilityStates: disabled ? ['disabled'] : undefined\n    };\n  }\n\n  generateStyles() {\n    this.styles = createStyles(this.getThemeProps());\n  }\n\n  animateCheckbox(value) {\n    const {isChecked} = this.state;\n\n    Animated.timing(isChecked, {\n      duration: 170,\n      easing: Easing.bezier(0.77, 0.0, 0.175, 1.0),\n      toValue: Number(value),\n      useNativeDriver: true\n    }).start();\n  }\n\n  onPress = () => {\n    const {disabled} = this.getThemeProps();\n\n    if (!disabled) {\n      _.invoke(this.props, 'onValueChange', !this.props.value);\n    }\n  };\n\n  getColor() {\n    const {color, disabled} = this.getThemeProps();\n    return disabled ? DEFAULT_DISABLED_COLOR : color || DEFAULT_COLOR;\n  }\n\n  getBorderStyle() {\n    const {style: propsStyle} = this.getThemeProps();\n    const borderColor = {borderColor: this.getColor()};\n    const style = [this.styles.container, {borderWidth: 2}, borderColor, propsStyle];\n\n    return style;\n  }\n\n  render() {\n    const {selectedIcon, color, iconColor, disabled, testID, ...others} = this.getThemeProps();\n    return (\n      <TouchableOpacity\n        {...this.getAccessibilityProps()}\n        activeOpacity={1}\n        testID={testID}\n        {...others}\n        style={this.getBorderStyle()}\n        onPress={this.onPress}\n      >\n        {\n          <Animated.View\n            style={[this.styles.container, {backgroundColor: this.getColor()}, {opacity: this.animationStyle.opacity}]}\n          >\n            <Animated.Image\n              style={[\n                this.styles.selectedIcon,\n                color && {tintColor: iconColor},\n                {transform: this.animationStyle.transform},\n                disabled && {tintColor: DEFAULT_ICON_COLOR}\n              ]}\n              source={selectedIcon || Assets.icons.checkSmall}\n              testID={`${testID}.selected`}\n            />\n          </Animated.View>\n        }\n      </TouchableOpacity>\n    );\n  }\n}\n\nfunction createStyles({color = DEFAULT_COLOR, iconColor = DEFAULT_ICON_COLOR, size = DEFAULT_SIZE, borderRadius}) {\n  return StyleSheet.create({\n    container: {\n      width: size,\n      height: size,\n      borderRadius: borderRadius || 8,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderColor: color\n    },\n    selectedIcon: {\n      tintColor: iconColor,\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  });\n}\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"script"}