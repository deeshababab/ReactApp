{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeAnimatable = require(\"react-native-animatable\");\n\nvar _style = require(\"../../style\");\n\nvar _commons = require(\"../../commons\");\n\nvar _touchableOpacity = _interopRequireDefault(require(\"../../components/touchableOpacity\"));\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _ListItemPart = _interopRequireDefault(require(\"./ListItemPart\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\listItem\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ListItem = function (_BaseComponent) {\n  (0, _inherits2.default)(ListItem, _BaseComponent);\n\n  var _super = _createSuper(ListItem);\n\n  function ListItem(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ListItem);\n    _this = _super.call(this, props);\n    _this.state = {\n      pressed: false\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(ListItem, [{\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.props);\n    }\n  }, {\n    key: \"onHideUnderlay\",\n    value: function onHideUnderlay() {\n      this.setPressed(false);\n    }\n  }, {\n    key: \"onShowUnderlay\",\n    value: function onShowUnderlay() {\n      this.setPressed(true);\n    }\n  }, {\n    key: \"setPressed\",\n    value: function setPressed(isPressed) {\n      this.setState({\n        pressed: isPressed\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          containerElement = _this$props.containerElement,\n          containerStyle = _this$props.containerStyle,\n          style = _this$props.style,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress,\n          underlayColor = _this$props.underlayColor,\n          testID = _this$props.testID,\n          others = (0, _objectWithoutProperties2.default)(_this$props, [\"containerElement\", \"containerStyle\", \"style\", \"onPress\", \"onLongPress\", \"underlayColor\", \"testID\"]);\n      var pressed = this.state.pressed;\n      var pressedStyle = {\n        backgroundColor: underlayColor\n      };\n      var Container = onPress || onLongPress ? containerElement : _view.default;\n      var animationProps = this.extractAnimationProps();\n      var InnerContainer = !_lodash.default.isEmpty(animationProps) ? _reactNativeAnimatable.View : _view.default;\n\n      if (!_lodash.default.isEmpty(animationProps)) {\n        console.warn('ListItem component will soon stop supporting animationProps.' + 'Please wrap your ListItem component with your own animation component, such as Animatable.View');\n      }\n\n      return _react.default.createElement(Container, (0, _extends2.default)({\n        activeOpacity: 1,\n        style: [this.styles.container, containerStyle],\n        onPress: onPress,\n        onLongPress: onLongPress,\n        onHideUnderlay: this.onHideUnderlay,\n        onShowUnderlay: this.onShowUnderlay,\n        testID: testID\n      }, others, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(InnerContainer, (0, _extends2.default)({}, animationProps, {\n        style: [this.styles.innerContainer, style, pressed && pressedStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }), this.props.children));\n    }\n  }]);\n  return ListItem;\n}(_commons.BaseComponent);\n\nListItem.displayName = 'ListItem';\nListItem.propTypes = {\n  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n  onPress: _propTypes.default.func,\n  onLongPress: _propTypes.default.func,\n  containerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),\n  containerElement: _propTypes.default.func\n};\nListItem.defaultProps = {\n  height: 63,\n  containerElement: _touchableOpacity.default,\n  underlayColor: _style.Colors.dark70\n};\n\nfunction createStyles(_ref) {\n  var height = _ref.height;\n  return _reactNative.StyleSheet.create({\n    container: {\n      backgroundColor: _style.Colors.white\n    },\n    innerContainer: {\n      flexDirection: 'row',\n      height: height\n    }\n  });\n}\n\nListItem.Part = _ListItemPart.default;\nvar _default = ListItem;\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/listItem/index.js"],"names":["ListItem","props","state","pressed","styles","createStyles","setPressed","isPressed","setState","containerElement","containerStyle","style","onPress","onLongPress","underlayColor","testID","others","pressedStyle","backgroundColor","Container","View","animationProps","extractAnimationProps","InnerContainer","_","isEmpty","AnimatableView","console","warn","container","onHideUnderlay","onShowUnderlay","innerContainer","children","BaseComponent","displayName","propTypes","height","PropTypes","oneOfType","number","string","func","object","array","defaultProps","TouchableOpacity","Colors","dark70","StyleSheet","create","white","flexDirection","Part","ListItemPart"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet} from 'react-native';\nimport {View as AnimatableView} from 'react-native-animatable';\nimport {Colors} from '../../style';\nimport {BaseComponent} from '../../commons';\nimport TouchableOpacity from '../../components/touchableOpacity';\nimport View from '../view';\nimport ListItemPart from './ListItemPart';\n\n/**\n * @description: List item component to render inside a List component\n * @extends: TouchableOpacity\n * @extendslink: docs/TouchableOpacity\n * @gif: https://media.giphy.com/media/l1IBjHowyPcOTWAY8/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/listScreens/BasicListScreen.js\n */\nclass ListItem extends BaseComponent {\n  static displayName = 'ListItem';\n\n  static propTypes = {\n    /**\n     * the list item height\n     */\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    /**\n     * action for when pressing the item\n     */\n    onPress: PropTypes.func,\n    /**\n     * action for when long pressing the item\n     */\n    onLongPress: PropTypes.func,\n    /**\n     * Additional styles for the top container\n     */\n    containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * The container element to wrap the ListItem\n     */\n    containerElement: PropTypes.func\n  };\n\n  static defaultProps = {\n    height: 63,\n    containerElement: TouchableOpacity,\n    underlayColor: Colors.dark70\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      pressed: false\n    };\n  }\n\n  generateStyles() {\n    this.styles = createStyles(this.props);\n  }\n\n  onHideUnderlay() {\n    this.setPressed(false);\n  }\n  onShowUnderlay() {\n    this.setPressed(true);\n  }\n  setPressed(isPressed) {\n    this.setState({pressed: isPressed});\n  }\n\n  render() {\n    const {\n      containerElement,\n      containerStyle,\n      style,\n      onPress,\n      onLongPress,\n      underlayColor,\n      testID,\n      ...others\n    } = this.props;\n    const {pressed} = this.state;\n    const pressedStyle = {backgroundColor: underlayColor};\n    const Container = onPress || onLongPress ? containerElement : View;\n\n    const animationProps = this.extractAnimationProps();\n    const InnerContainer = !_.isEmpty(animationProps) ? AnimatableView : View;\n    if (!_.isEmpty(animationProps)) {\n      console.warn('ListItem component will soon stop supporting animationProps.' +\n          'Please wrap your ListItem component with your own animation component, such as Animatable.View',);\n    }\n\n    return (\n      <Container\n        activeOpacity={1}\n        style={[this.styles.container, containerStyle]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onHideUnderlay={this.onHideUnderlay}\n        onShowUnderlay={this.onShowUnderlay}\n        testID={testID}\n        {...others}\n      >\n        <InnerContainer {...animationProps} style={[this.styles.innerContainer, style, pressed && pressedStyle]}>\n          {this.props.children}\n        </InnerContainer>\n      </Container>\n    );\n  }\n}\n\nfunction createStyles({height}) {\n  return StyleSheet.create({\n    container: {\n      backgroundColor: Colors.white\n    },\n    innerContainer: {\n      flexDirection: 'row',\n      height\n    }\n  });\n}\n\nListItem.Part = ListItemPart;\n\nexport default ListItem;\n"]},"metadata":{},"sourceType":"script"}