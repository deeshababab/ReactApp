{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar SafeAreaInsetsCache = null;\nvar NativeSafeAreaManager = _reactNative.NativeModules.SafeAreaManager;\n\nvar SafeAreaInsetsManager = function () {\n  function SafeAreaInsetsManager() {\n    (0, _classCallCheck2.default)(this, SafeAreaInsetsManager);\n    this._defaultInsets = {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0\n    };\n    this._safeAreaInsets = this._defaultInsets;\n    this._safeAreaChangedDelegates = [];\n    this.addSafeAreaChangedListener();\n  }\n\n  (0, _createClass2.default)(SafeAreaInsetsManager, [{\n    key: \"addSafeAreaChangedListener\",\n    value: function addSafeAreaChangedListener() {\n      var _this = this;\n\n      if (!NativeSafeAreaManager) {\n        return;\n      }\n\n      var NativeSafeAreaEvents = new _reactNative.NativeEventEmitter(NativeSafeAreaManager);\n      NativeSafeAreaEvents.addListener('SafeAreaInsetsDidChangeEvent', function (safeAreaInsets) {\n        SafeAreaInsetsCache = safeAreaInsets;\n        _this._safeAreaInsets = SafeAreaInsetsCache;\n\n        _lodash.default.forEach(_this._safeAreaChangedDelegates, function (delegate) {\n          if (delegate.onSafeAreaInsetsDidChangeEvent) {\n            delegate.onSafeAreaInsetsDidChangeEvent(_this._safeAreaInsets);\n          } else {\n            console.warn('ERROR', 'SafeAreaInsetsManager', 'safe area changed delegate was added, but it does not implement the onSafeAreaInsetsDidChangeEvent method');\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_updateInsets\",\n    value: function _updateInsets() {\n      return _regenerator.default.async(function _updateInsets$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(NativeSafeAreaManager && SafeAreaInsetsCache === null)) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 3;\n              return _regenerator.default.awrap(NativeSafeAreaManager.getSafeAreaInsets());\n\n            case 3:\n              SafeAreaInsetsCache = _context.sent;\n              this._safeAreaInsets = SafeAreaInsetsCache;\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getSafeAreaInsets\",\n    value: function getSafeAreaInsets() {\n      return _regenerator.default.async(function getSafeAreaInsets$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regenerator.default.awrap(this._updateInsets());\n\n            case 2:\n              return _context2.abrupt(\"return\", this._safeAreaInsets);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"addSafeAreaChangedDelegate\",\n    value: function addSafeAreaChangedDelegate(delegate) {\n      this._safeAreaChangedDelegates.push(delegate);\n    }\n  }, {\n    key: \"removeSafeAreaChangedDelegate\",\n    value: function removeSafeAreaChangedDelegate(delegateToRemove) {\n      _lodash.default.remove(this._safeAreaChangedDelegates, function (currentDelegate) {\n        return currentDelegate === delegateToRemove;\n      });\n    }\n  }, {\n    key: \"defaultInsets\",\n    get: function get() {\n      return this._defaultInsets;\n    }\n  }]);\n  return SafeAreaInsetsManager;\n}();\n\nvar _default = new SafeAreaInsetsManager();\n\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/lib/components/SafeArea/SafeAreaInsetsManager.js"],"names":["SafeAreaInsetsCache","NativeSafeAreaManager","NativeModules","SafeAreaManager","SafeAreaInsetsManager","_defaultInsets","top","left","bottom","right","_safeAreaInsets","_safeAreaChangedDelegates","addSafeAreaChangedListener","NativeSafeAreaEvents","NativeEventEmitter","addListener","safeAreaInsets","_","forEach","delegate","onSafeAreaInsetsDidChangeEvent","console","warn","getSafeAreaInsets","_updateInsets","push","delegateToRemove","remove","currentDelegate"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AAEA,IAAIA,mBAAmB,GAAG,IAA1B;AAEA,IAAMC,qBAAqB,GAAGC,2BAAcC,eAA5C;;IAEMC,qB;AACJ,mCAAc;AAAA;AACZ,SAAKC,cAAL,GAAsB;AAACC,MAAAA,GAAG,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE,CAAf;AAAkBC,MAAAA,MAAM,EAAE,CAA1B;AAA6BC,MAAAA,KAAK,EAAE;AAApC,KAAtB;AACA,SAAKC,eAAL,GAAuB,KAAKL,cAA5B;AACA,SAAKM,yBAAL,GAAiC,EAAjC;AAEA,SAAKC,0BAAL;AACD;;;;iDAE4B;AAAA;;AAC3B,UAAI,CAACX,qBAAL,EAA4B;AAC1B;AACD;;AACD,UAAMY,oBAAoB,GAAG,IAAIC,+BAAJ,CAAuBb,qBAAvB,CAA7B;AACAY,MAAAA,oBAAoB,CAACE,WAArB,CAAiC,8BAAjC,EAAiE,UAACC,cAAD,EAAoB;AACnFhB,QAAAA,mBAAmB,GAAGgB,cAAtB;AACA,QAAA,KAAI,CAACN,eAAL,GAAuBV,mBAAvB;;AACAiB,wBAAEC,OAAF,CAAU,KAAI,CAACP,yBAAf,EAA0C,UAACQ,QAAD,EAAc;AACtD,cAAIA,QAAQ,CAACC,8BAAb,EAA6C;AAC3CD,YAAAA,QAAQ,CAACC,8BAAT,CAAwC,KAAI,CAACV,eAA7C;AACD,WAFD,MAEO;AACLW,YAAAA,OAAO,CAACC,IAAR,CAAa,OAAb,EAAsB,uBAAtB,EAA+C,2GAA/C;AACD;AACF,SAND;AAOD,OAVD;AAWD;;;;;;;;oBAGKrB,qBAAqB,IAAID,mBAAmB,KAAK,I;;;;;;gDACvBC,qBAAqB,CAACsB,iBAAtB,E;;;AAA5BvB,cAAAA,mB;AACA,mBAAKU,eAAL,GAAuBV,mBAAvB;;;;;;;;;;;;;;;;;gDAKI,KAAKwB,aAAL,E;;;gDACC,KAAKd,e;;;;;;;;;;;+CAGaS,Q,EAAU;AACnC,WAAKR,yBAAL,CAA+Bc,IAA/B,CAAoCN,QAApC;AACD;;;kDAE6BO,gB,EAAkB;AAC9CT,sBAAEU,MAAF,CAAS,KAAKhB,yBAAd,EAAyC,UAACiB,eAAD,EAAqB;AAC5D,eAAOA,eAAe,KAAKF,gBAA3B;AACD,OAFD;AAGD;;;wBAEmB;AAClB,aAAO,KAAKrB,cAAZ;AACD;;;;;eAGY,IAAID,qBAAJ,E","sourcesContent":["/* eslint no-underscore-dangle: 0 */\n\nimport {NativeModules, NativeEventEmitter} from 'react-native';\nimport _ from 'lodash';\n\nlet SafeAreaInsetsCache = null;\n\nconst NativeSafeAreaManager = NativeModules.SafeAreaManager;\n\nclass SafeAreaInsetsManager {\n  constructor() {\n    this._defaultInsets = {top: 0, left: 0, bottom: 0, right: 0};\n    this._safeAreaInsets = this._defaultInsets;\n    this._safeAreaChangedDelegates = [];\n\n    this.addSafeAreaChangedListener();\n  }\n\n  addSafeAreaChangedListener() {\n    if (!NativeSafeAreaManager) {\n      return;\n    }\n    const NativeSafeAreaEvents = new NativeEventEmitter(NativeSafeAreaManager);\n    NativeSafeAreaEvents.addListener('SafeAreaInsetsDidChangeEvent', (safeAreaInsets) => {\n      SafeAreaInsetsCache = safeAreaInsets;\n      this._safeAreaInsets = SafeAreaInsetsCache;\n      _.forEach(this._safeAreaChangedDelegates, (delegate) => {\n        if (delegate.onSafeAreaInsetsDidChangeEvent) {\n          delegate.onSafeAreaInsetsDidChangeEvent(this._safeAreaInsets);\n        } else {\n          console.warn('ERROR', 'SafeAreaInsetsManager', 'safe area changed delegate was added, but it does not implement the onSafeAreaInsetsDidChangeEvent method'); //eslint-disable-line\n        }\n      });\n    });\n  }\n\n  async _updateInsets() {\n    if (NativeSafeAreaManager && SafeAreaInsetsCache === null) {\n      SafeAreaInsetsCache = await NativeSafeAreaManager.getSafeAreaInsets();\n      this._safeAreaInsets = SafeAreaInsetsCache;\n    }\n  }\n\n  async getSafeAreaInsets() {\n    await this._updateInsets();\n    return this._safeAreaInsets;\n  }\n\n  addSafeAreaChangedDelegate(delegate) {\n    this._safeAreaChangedDelegates.push(delegate);\n  }\n\n  removeSafeAreaChangedDelegate(delegateToRemove) {\n    _.remove(this._safeAreaChangedDelegates, (currentDelegate) => {\n      return currentDelegate === delegateToRemove;\n    });\n  }\n\n  get defaultInsets() {\n    return this._defaultInsets;\n  }\n}\n\nexport default new SafeAreaInsetsManager();\n"]},"metadata":{},"sourceType":"script"}