{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _blur = require(\"@react-native-community/blur\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _commons = require(\"../../commons\");\n\nvar _TopBar = _interopRequireDefault(require(\"./TopBar\"));\n\nvar _view = _interopRequireDefault(require(\"../../components/view\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\screensComponents\\\\modal\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Modal = function (_BaseComponent) {\n  (0, _inherits2.default)(Modal, _BaseComponent);\n\n  var _super = _createSuper(Modal);\n\n  function Modal() {\n    (0, _classCallCheck2.default)(this, Modal);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(Modal, [{\n    key: \"renderTouchableOverlay\",\n    value: function renderTouchableOverlay() {\n      var _this$props = this.props,\n          overlayBackgroundColor = _this$props.overlayBackgroundColor,\n          onBackgroundPress = _this$props.onBackgroundPress;\n\n      if (_lodash.default.isFunction(onBackgroundPress) || !!overlayBackgroundColor) {\n        return _react.default.createElement(_view.default, {\n          accessible: true,\n          accessibilityLabel: \"Dismiss\",\n          accessibilityRole: \"button\",\n          style: [styles.touchableOverlay, {\n            backgroundColor: overlayBackgroundColor\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 9\n          }\n        }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {\n          onPress: onBackgroundPress,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }\n        }, _react.default.createElement(_view.default, {\n          flex: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }\n        })));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          blurView = _this$props2.blurView,\n          enableModalBlur = _this$props2.enableModalBlur,\n          visible = _this$props2.visible,\n          others = (0, _objectWithoutProperties2.default)(_this$props2, [\"blurView\", \"enableModalBlur\", \"visible\"]);\n      var defaultContainer = enableModalBlur && _helpers.Constants.isIOS ? _blur.BlurView : _view.default;\n      var Container = blurView ? blurView : defaultContainer;\n      return _react.default.createElement(_reactNative.Modal, (0, _extends2.default)({\n        visible: Boolean(visible)\n      }, others, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(Container, {\n        style: {\n          flex: 1\n        },\n        blurType: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }, this.renderTouchableOverlay(), this.props.children));\n    }\n  }]);\n  return Modal;\n}(_commons.BaseComponent);\n\nexports.default = Modal;\nModal.displayName = 'Modal';\nModal.propTypes = {\n  enableModalBlur: _propTypes.default.bool,\n  blurView: _propTypes.default.element,\n  onBackgroundPress: _propTypes.default.func,\n  overlayBackgroundColor: _propTypes.default.string\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  touchableOverlay: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject)\n});\n\nModal.TopBar = _TopBar.default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/screensComponents/modal/index.js"],"names":["Modal","props","overlayBackgroundColor","onBackgroundPress","_","isFunction","styles","touchableOverlay","backgroundColor","blurView","enableModalBlur","visible","others","defaultContainer","Constants","isIOS","BlurView","View","Container","Boolean","flex","renderTouchableOverlay","children","BaseComponent","displayName","propTypes","PropTypes","bool","element","func","string","StyleSheet","create","absoluteFillObject","TopBar"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;IASqBA,K;;;;;;;;;;;;6CAqBM;AAAA,wBAC6B,KAAKC,KADlC;AAAA,UAChBC,sBADgB,eAChBA,sBADgB;AAAA,UACQC,iBADR,eACQA,iBADR;;AAEvB,UAAIC,gBAAEC,UAAF,CAAaF,iBAAb,KAAmC,CAAC,CAACD,sBAAzC,EAAiE;AAC/D,eACE,6BAAC,aAAD;AACE,UAAA,UAAU,MADZ;AAEE,UAAA,kBAAkB,EAAC,SAFrB;AAGE,UAAA,iBAAiB,EAAC,QAHpB;AAIE,UAAA,KAAK,EAAE,CAACI,MAAM,CAACC,gBAAR,EAA0B;AAACC,YAAAA,eAAe,EAAEN;AAAlB,WAA1B,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME,6BAAC,qCAAD;AAA0B,UAAA,OAAO,EAAEC,iBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,6BAAC,aAAD;AAAM,UAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CANF,CADF;AAYD;AACF;;;6BAEQ;AAAA,yBACiD,KAAKF,KADtD;AAAA,UACAQ,QADA,gBACAA,QADA;AAAA,UACUC,eADV,gBACUA,eADV;AAAA,UAC2BC,OAD3B,gBAC2BA,OAD3B;AAAA,UACuCC,MADvC;AAEP,UAAMC,gBAAgB,GAAGH,eAAe,IAAII,mBAAUC,KAA7B,GAAqCC,cAArC,GAAgDC,aAAzE;AACA,UAAMC,SAAS,GAAGT,QAAQ,GAAGA,QAAH,GAAcI,gBAAxC;AAEA,aACE,6BAAC,kBAAD;AAAS,QAAA,OAAO,EAAEM,OAAO,CAACR,OAAD;AAAzB,SAAwCC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACE,6BAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAACQ,UAAAA,IAAI,EAAE;AAAP,SAAlB;AAA6B,QAAA,QAAQ,EAAC,OAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKC,sBAAL,EADH,EAEG,KAAKpB,KAAL,CAAWqB,QAFd,CADF,CADF;AAQD;;;EApDgCC,sB;;;AAAdvB,K,CACZwB,W,GAAc,O;AADFxB,K,CAEZyB,S,GAAY;AAIjBf,EAAAA,eAAe,EAAEgB,mBAAUC,IAJV;AAQjBlB,EAAAA,QAAQ,EAAEiB,mBAAUE,OARH;AAYjBzB,EAAAA,iBAAiB,EAAEuB,mBAAUG,IAZZ;AAgBjB3B,EAAAA,sBAAsB,EAAEwB,mBAAUI;AAhBjB,C;;AAqDrB,IAAMxB,MAAM,GAAGyB,wBAAWC,MAAX,CAAkB;AAC/BzB,EAAAA,gBAAgB,oBACXwB,wBAAWE,kBADA;AADe,CAAlB,CAAf;;AAMAjC,KAAK,CAACkC,MAAN,GAAeA,eAAf","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, Modal as RNModal, TouchableWithoutFeedback} from 'react-native';\nimport {BlurView} from '@react-native-community/blur';\nimport {Constants} from '../../helpers';\nimport {BaseComponent} from '../../commons';\nimport TopBar from './TopBar';\nimport View from '../../components/view';\n\n/**\n * @description: Component that present content on top of the invoking screen\n * @extends: Modal\n * @extendslink: https://facebook.github.io/react-native/docs/modal.html\n * @gif: https://media.giphy.com/media/3oFzmfSX8KgvctI4Ks/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.js\n */\nexport default class Modal extends BaseComponent {\n  static displayName = 'Modal';\n  static propTypes = {\n    /**\n     * Blurs the modal background when transparent (iOS only)\n     */\n    enableModalBlur: PropTypes.bool,\n    /**\n     * A custom view to use as a BlueView instead of the default one\n     */\n    blurView: PropTypes.element,\n    /**\n     * allow dismissing a modal when clicking on its background\n     */\n    onBackgroundPress: PropTypes.func,\n    /**\n     * the background color of the overlay\n     */\n    overlayBackgroundColor: PropTypes.string\n  };\n\n  renderTouchableOverlay() {\n    const {overlayBackgroundColor, onBackgroundPress} = this.props;\n    if (_.isFunction(onBackgroundPress) || !!overlayBackgroundColor) {\n      return (\n        <View\n          accessible\n          accessibilityLabel=\"Dismiss\"\n          accessibilityRole=\"button\"\n          style={[styles.touchableOverlay, {backgroundColor: overlayBackgroundColor}]}\n        >\n          <TouchableWithoutFeedback onPress={onBackgroundPress}>\n            <View flex/>\n          </TouchableWithoutFeedback>\n        </View>\n      );\n    }\n  }\n\n  render() {\n    const {blurView, enableModalBlur, visible, ...others} = this.props;\n    const defaultContainer = enableModalBlur && Constants.isIOS ? BlurView : View;\n    const Container = blurView ? blurView : defaultContainer;\n\n    return (\n      <RNModal visible={Boolean(visible)} {...others}>\n        <Container style={{flex: 1}} blurType=\"light\">\n          {this.renderTouchableOverlay()}\n          {this.props.children}\n        </Container>\n      </RNModal>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  touchableOverlay: {\n    ...StyleSheet.absoluteFillObject\n  }\n});\n\nModal.TopBar = TopBar;\n"]},"metadata":{},"sourceType":"script"}