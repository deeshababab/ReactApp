{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = _interopRequireWildcard(require(\"react-native\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-interactable\\\\lib\\\\src\\\\InteractableView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NativeViewManager = _reactNative.NativeModules.InteractableViewManager;\nvar NativeInteractableView = (0, _reactNative.requireNativeComponent)('InteractableView', null);\n\nvar WrappedInteractableView = function (_Component) {\n  (0, _inherits2.default)(WrappedInteractableView, _Component);\n\n  var _super = _createSuper(WrappedInteractableView);\n\n  function WrappedInteractableView() {\n    (0, _classCallCheck2.default)(this, WrappedInteractableView);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(WrappedInteractableView, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return _react.default.createElement(NativeInteractableView, (0, _extends2.default)({}, this.props, {\n        ref: function ref(_ref) {\n          return _this._nativeViewRef = _ref;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"getScrollableNode\",\n    value: function getScrollableNode() {\n      return _reactNative.default.findNodeHandle(this._nativeViewRef);\n    }\n  }]);\n  return WrappedInteractableView;\n}(_react.Component);\n\nvar AnimatedInteractableView = _reactNative.Animated.createAnimatedComponent(WrappedInteractableView);\n\nvar WrappedAnimatedInteractableView = function (_Component2) {\n  (0, _inherits2.default)(WrappedAnimatedInteractableView, _Component2);\n\n  var _super2 = _createSuper(WrappedAnimatedInteractableView);\n\n  function WrappedAnimatedInteractableView(props) {\n    var _this2;\n\n    (0, _classCallCheck2.default)(this, WrappedAnimatedInteractableView);\n    _this2 = _super2.call(this, props);\n\n    if (_this2.props.animatedValueX || _this2.props.animatedValueY) {\n      _this2._animatedEvent = _reactNative.Animated.event([{\n        nativeEvent: {\n          x: _this2.props.animatedValueX,\n          y: _this2.props.animatedValueY\n        }\n      }], {\n        useNativeDriver: !!_this2.props.animatedNativeDriver\n      });\n    }\n\n    return _this2;\n  }\n\n  (0, _createClass2.default)(WrappedAnimatedInteractableView, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {}\n  }, {\n    key: \"chokeTheBridge\",\n    value: function chokeTheBridge() {\n      var j = 0;\n      setInterval(function () {\n        for (var index = 0; index < 1e9; index++) {\n          j++;\n        }\n      }, 500);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react.default.createElement(AnimatedInteractableView, (0, _extends2.default)({\n        dragToss: 0.1\n      }, this.props, {\n        animatedValueX: undefined,\n        animatedValueY: undefined,\n        onAnimatedEvent: this._animatedEvent,\n        reportOnAnimatedEvents: !!this._animatedEvent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"setVelocity\",\n    value: function setVelocity(params) {\n      if (_reactNative.Platform.OS === 'ios') {\n        NativeViewManager.setVelocity(_reactNative.default.findNodeHandle(this), params);\n      } else if (_reactNative.Platform.OS === 'android') {\n        _reactNative.UIManager.dispatchViewManagerCommand(_reactNative.default.findNodeHandle(this), _reactNative.UIManager.InteractableView.Commands.setVelocity, [params]);\n      }\n    }\n  }, {\n    key: \"snapTo\",\n    value: function snapTo(params) {\n      if (_reactNative.Platform.OS === 'ios') {\n        NativeViewManager.snapTo(_reactNative.default.findNodeHandle(this), params);\n      } else if (_reactNative.Platform.OS === 'android') {\n        _reactNative.UIManager.dispatchViewManagerCommand(_reactNative.default.findNodeHandle(this), _reactNative.UIManager.InteractableView.Commands.snapTo, [params]);\n      }\n    }\n  }, {\n    key: \"changePosition\",\n    value: function changePosition(params) {\n      if (_reactNative.Platform.OS === 'ios') {\n        NativeViewManager.changePosition(_reactNative.default.findNodeHandle(this), params);\n      } else if (_reactNative.Platform.OS === 'android') {\n        _reactNative.UIManager.dispatchViewManagerCommand(_reactNative.default.findNodeHandle(this), _reactNative.UIManager.InteractableView.Commands.changePosition, [params]);\n      }\n    }\n  }, {\n    key: \"bringToFront\",\n    value: function bringToFront() {\n      if (_reactNative.Platform.OS === 'android') {\n        _reactNative.UIManager.dispatchViewManagerCommand(_reactNative.default.findNodeHandle(this), _reactNative.UIManager.InteractableView.Commands.bringToFront, []);\n      }\n    }\n  }]);\n  return WrappedAnimatedInteractableView;\n}(_react.Component);\n\nvar _default = WrappedAnimatedInteractableView;\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-interactable/lib/src/InteractableView.js"],"names":["NativeViewManager","NativeModules","InteractableViewManager","NativeInteractableView","WrappedInteractableView","props","ref","_nativeViewRef","ReactNative","findNodeHandle","Component","AnimatedInteractableView","Animated","createAnimatedComponent","WrappedAnimatedInteractableView","animatedValueX","animatedValueY","_animatedEvent","event","nativeEvent","x","y","useNativeDriver","animatedNativeDriver","j","setInterval","index","undefined","params","Platform","OS","setVelocity","UIManager","dispatchViewManagerCommand","InteractableView","Commands","snapTo","changePosition","bringToFront"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactNative, { requireNativeComponent, Animated, NativeModules, UIManager, Platform } from 'react-native';\n\n// this is required in order to perform imperative commands\nconst NativeViewManager = NativeModules.InteractableViewManager;\n\nconst NativeInteractableView = requireNativeComponent('InteractableView', null);\n\nclass WrappedInteractableView extends Component {\n  render() {\n    return (\n      <NativeInteractableView\n        {...this.props}\n        ref={(ref) => this._nativeViewRef = ref}\n      />\n    );\n  }\n\n  getScrollableNode() {\n    return ReactNative.findNodeHandle(this._nativeViewRef);\n  }\n}\n\n// this is required in order to support native events:\nconst AnimatedInteractableView = Animated.createAnimatedComponent(WrappedInteractableView);\n\nclass WrappedAnimatedInteractableView extends Component {\n  constructor(props) {\n    super(props);\n    if (this.props.animatedValueX || this.props.animatedValueY) {\n      this._animatedEvent = Animated.event(\n        [{\n          nativeEvent: {\n            x: this.props.animatedValueX,\n            y: this.props.animatedValueY\n          }\n        }],\n        { useNativeDriver: !!this.props.animatedNativeDriver }\n      );\n    }\n  }\n\n  componentWillMount() {\n    // this.chokeTheBridge();\n  }\n\n  // this helps us verify that useNativeDriver actually works and we don't rely on the bridge\n  chokeTheBridge() {\n    let j = 0;\n    setInterval(() => {\n      for (var index = 0; index < 1e9; index++) {\n        j++;\n      }\n    }, 500);\n  }\n\n  render() {\n    return (\n      <AnimatedInteractableView\n        dragToss={0.1}\n        {...this.props}\n        animatedValueX={undefined}\n        animatedValueY={undefined}\n        onAnimatedEvent={this._animatedEvent}\n        reportOnAnimatedEvents={!!this._animatedEvent}\n      />\n    );\n  }\n\n  setVelocity(params) {\n    if (Platform.OS === 'ios') {\n      NativeViewManager.setVelocity(ReactNative.findNodeHandle(this), params);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        ReactNative.findNodeHandle(this),\n        UIManager.InteractableView.Commands.setVelocity,\n        [params],\n      );\n    }\n  }\n\n  snapTo(params) {\n    if (Platform.OS === 'ios') {\n      NativeViewManager.snapTo(ReactNative.findNodeHandle(this), params);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        ReactNative.findNodeHandle(this),\n        UIManager.InteractableView.Commands.snapTo,\n        [params],\n      );\n    }\n  }\n\n  changePosition(params) {\n    if (Platform.OS === 'ios') {\n      NativeViewManager.changePosition(ReactNative.findNodeHandle(this), params);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        ReactNative.findNodeHandle(this),\n        UIManager.InteractableView.Commands.changePosition,\n        [params],\n      );\n    }\n  }\n\n  bringToFront() {\n    if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        ReactNative.findNodeHandle(this),\n        UIManager.InteractableView.Commands.bringToFront,\n        [],\n      );\n    }\n  }\n}\n\nexport default WrappedAnimatedInteractableView;\n"]},"metadata":{},"sourceType":"script"}