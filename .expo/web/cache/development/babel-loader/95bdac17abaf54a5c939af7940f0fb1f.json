{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _helpers = require(\"../helpers\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar WEIGHT_TYPES = {\n  ULIGHT: '100',\n  THIN: '200',\n  LIGHT: '300',\n  REGULAR: '400',\n  MEDIUM: '500',\n  THICK: '600',\n  BOLD: '700',\n  BLACK: '900'\n};\n\nvar Typography = function () {\n  function Typography() {\n    (0, _classCallCheck2.default)(this, Typography);\n    this.text10 = {\n      fontSize: 64,\n      fontWeight: WEIGHT_TYPES.ULIGHT,\n      lineHeight: Math.floor(64 * 1.4),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-thin' : undefined\n    };\n    this.text20 = {\n      fontSize: 50,\n      fontWeight: WEIGHT_TYPES.ULIGHT,\n      lineHeight: Math.floor(50 * 1.4),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-thin' : undefined\n    };\n    this.text30 = {\n      fontSize: 36,\n      fontWeight: _helpers.Constants.isAndroid ? WEIGHT_TYPES.ULIGHT : WEIGHT_TYPES.THIN,\n      lineHeight: Math.floor(36 * 1.3),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-thin' : undefined\n    };\n    this.text40 = {\n      fontSize: 28,\n      fontWeight: WEIGHT_TYPES.LIGHT,\n      lineHeight: _helpers.Constants.isAndroid ? Math.floor(28 * 1.4) : Math.floor(28 * 1.21),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-light' : undefined\n    };\n    this.text50 = {\n      fontSize: _helpers.Constants.isAndroid ? 24 : 22,\n      fontWeight: WEIGHT_TYPES.LIGHT,\n      lineHeight: _helpers.Constants.isAndroid ? Math.floor(24 * 1.17) : Math.floor(22 * 1.27),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-light' : undefined\n    };\n    this.text60 = {\n      fontSize: 20,\n      fontWeight: WEIGHT_TYPES.LIGHT,\n      lineHeight: Math.floor(20 * 1.2),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-light' : undefined\n    };\n    this.text70 = {\n      fontSize: _helpers.Constants.isAndroid ? 16 : 17,\n      fontWeight: WEIGHT_TYPES.LIGHT,\n      lineHeight: _helpers.Constants.isAndroid ? Math.floor(16 * 1.38) : Math.floor(17 * 1.29),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-light' : undefined\n    };\n    this.text80 = {\n      fontSize: _helpers.Constants.isAndroid ? 14 : 15,\n      fontWeight: WEIGHT_TYPES.LIGHT,\n      lineHeight: _helpers.Constants.isAndroid ? Math.floor(14 * 1.33) : Math.floor(15 * 1.33),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-light' : undefined\n    };\n    this.text90 = {\n      fontSize: _helpers.Constants.isAndroid ? 12 : 13,\n      fontWeight: WEIGHT_TYPES.LIGHT,\n      lineHeight: _helpers.Constants.isAndroid ? Math.floor(12 * 1.33) : Math.floor(13 * 1.38),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-light' : undefined\n    };\n    this.text100 = {\n      fontSize: _helpers.Constants.isAndroid ? 10 : 11,\n      fontWeight: WEIGHT_TYPES.LIGHT,\n      lineHeight: _helpers.Constants.isAndroid ? Math.floor(10 * 1.18) : Math.floor(11 * 1.18),\n      fontFamily: _helpers.Constants.isAndroid ? 'sans-serif-light' : undefined\n    };\n    this.keysPattern = this.generateKeysPattern();\n  }\n\n  (0, _createClass2.default)(Typography, [{\n    key: \"loadTypographies\",\n    value: function loadTypographies(typographies) {\n      var _this = this;\n\n      _lodash.default.forEach(typographies, function (value, key) {\n        _this[key] = value;\n      });\n\n      this.keysPattern = this.generateKeysPattern();\n    }\n  }, {\n    key: \"getKeysPattern\",\n    value: function getKeysPattern() {\n      return this.keysPattern;\n    }\n  }, {\n    key: \"generateKeysPattern\",\n    value: function generateKeysPattern() {\n      return new RegExp(_lodash.default.chain(this).keys().map(function (key) {\n        return [\"\" + key];\n      }).flatten().join('|').value());\n    }\n  }, {\n    key: \"measureWidth\",\n    value: function measureWidth(text) {\n      var typography,\n          containerWidth,\n          size,\n          _args = arguments;\n      return _regenerator.default.async(function measureWidth$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              typography = _args.length > 1 && _args[1] !== undefined ? _args[1] : Typography.text70;\n              containerWidth = _args.length > 2 && _args[2] !== undefined ? _args[2] : _helpers.Constants.screenWidth;\n              _context.next = 4;\n              return _regenerator.default.awrap(this.measureTextSize(text, typography, containerWidth));\n\n            case 4:\n              size = _context.sent;\n\n              if (!size) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", size.width);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"measureTextSize\",\n    value: function measureTextSize(text) {\n      var typography,\n          containerWidth,\n          rnTextSize,\n          size,\n          _args2 = arguments;\n      return _regenerator.default.async(function measureTextSize$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              typography = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : Typography.text70;\n              containerWidth = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : _helpers.Constants.screenWidth;\n              rnTextSize = require('react-native-text-size').default;\n\n              if (!text) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 6;\n              return _regenerator.default.awrap(rnTextSize.measure(_objectSpread({\n                text: text,\n                width: containerWidth\n              }, typography)));\n\n            case 6:\n              size = _context2.sent;\n              return _context2.abrupt(\"return\", size);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n  return Typography;\n}();\n\nvar _default = new Typography();\n\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/style/typography.js"],"names":["WEIGHT_TYPES","ULIGHT","THIN","LIGHT","REGULAR","MEDIUM","THICK","BOLD","BLACK","Typography","text10","fontSize","fontWeight","lineHeight","Math","floor","fontFamily","Constants","isAndroid","undefined","text20","text30","text40","text50","text60","text70","text80","text90","text100","keysPattern","generateKeysPattern","typographies","_","forEach","value","key","RegExp","chain","keys","map","flatten","join","text","typography","containerWidth","screenWidth","measureTextSize","size","width","rnTextSize","require","default","measure"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {Constants} from '../helpers';\n\n\nconst WEIGHT_TYPES = {\n  ULIGHT: '100',\n  THIN: '200',\n  LIGHT: '300',\n  REGULAR: '400',\n  MEDIUM: '500',\n  THICK: '600',\n  BOLD: '700',\n  BLACK: '900'\n};\n\nclass Typography {\n  text10 = {\n    fontSize: 64,\n    fontWeight: WEIGHT_TYPES.ULIGHT,\n    lineHeight: Math.floor(64 * 1.4),\n    fontFamily: Constants.isAndroid ? 'sans-serif-thin' : undefined,\n  };\n  text20 = {\n    fontSize: 50,\n    fontWeight: WEIGHT_TYPES.ULIGHT,\n    lineHeight: Math.floor(50 * 1.4),\n    fontFamily: Constants.isAndroid ? 'sans-serif-thin' : undefined,\n  };\n  text30 = {\n    fontSize: 36,\n    fontWeight: Constants.isAndroid ? WEIGHT_TYPES.ULIGHT : WEIGHT_TYPES.THIN,\n    lineHeight: Math.floor(36 * 1.3),\n    fontFamily: Constants.isAndroid ? 'sans-serif-thin' : undefined,\n  };\n  text40 = {\n    fontSize: 28,\n    fontWeight: WEIGHT_TYPES.LIGHT,\n    lineHeight: Constants.isAndroid ? Math.floor(28 * 1.4) : Math.floor(28 * 1.21),\n    fontFamily: Constants.isAndroid ? 'sans-serif-light' : undefined,\n  };\n  text50 = {\n    fontSize: Constants.isAndroid ? 24 : 22,\n    fontWeight: WEIGHT_TYPES.LIGHT,\n    lineHeight: Constants.isAndroid ? Math.floor(24 * 1.17) : Math.floor(22 * 1.27),\n    fontFamily: Constants.isAndroid ? 'sans-serif-light' : undefined,\n  };\n  text60 = {\n    fontSize: 20,\n    fontWeight: WEIGHT_TYPES.LIGHT,\n    lineHeight: Math.floor(20 * 1.2),\n    fontFamily: Constants.isAndroid ? 'sans-serif-light' : undefined,\n  };\n  text70 = {\n    fontSize: Constants.isAndroid ? 16 : 17,\n    fontWeight: WEIGHT_TYPES.LIGHT,\n    lineHeight: Constants.isAndroid ? Math.floor(16 * 1.38) : Math.floor(17 * 1.29),\n    fontFamily: Constants.isAndroid ? 'sans-serif-light' : undefined,\n  };\n  text80 = {\n    fontSize: Constants.isAndroid ? 14 : 15,\n    fontWeight: WEIGHT_TYPES.LIGHT,\n    lineHeight: Constants.isAndroid ? Math.floor(14 * 1.33) : Math.floor(15 * 1.33),\n    fontFamily: Constants.isAndroid ? 'sans-serif-light' : undefined,\n  };\n  text90 = {\n    fontSize: Constants.isAndroid ? 12 : 13,\n    fontWeight: WEIGHT_TYPES.LIGHT,\n    lineHeight: Constants.isAndroid ? Math.floor(12 * 1.33) : Math.floor(13 * 1.38),\n    fontFamily: Constants.isAndroid ? 'sans-serif-light' : undefined,\n  };\n  text100 = {\n    fontSize: Constants.isAndroid ? 10 : 11,\n    fontWeight: WEIGHT_TYPES.LIGHT,\n    lineHeight: Constants.isAndroid ? Math.floor(10 * 1.18) : Math.floor(11 * 1.18),\n    fontFamily: Constants.isAndroid ? 'sans-serif-light' : undefined,\n  };\n\n  keysPattern = this.generateKeysPattern();\n\n  /**\n   * Load custom set of typographies\n   * arguments:\n   * typographies - map of keys and typography values\n   * e.g {text15: {fontSize: 58, fontWeight: '100', lineHeight: Math.floor(58 * 1.4)}}\n   */\n  loadTypographies(typographies) {\n    _.forEach(typographies, (value, key) => {\n      this[key] = value;\n    });\n    this.keysPattern = this.generateKeysPattern();\n  }\n\n  getKeysPattern() {\n    return this.keysPattern;\n  }\n\n  generateKeysPattern() {\n    return new RegExp(_.chain(this)\n        .keys()\n        .map(key => [`${key}`])\n        .flatten()\n        .join('|')\n        .value());\n  }\n\n  // TODO: deprecate\n  async measureWidth(text, typography = Typography.text70, containerWidth = Constants.screenWidth) {\n    const size = await this.measureTextSize(text, typography, containerWidth);\n    if (size) {\n      return size.width;\n    }\n  }\n\n  async measureTextSize(text, typography = Typography.text70, containerWidth = Constants.screenWidth) {\n    const rnTextSize = require('react-native-text-size').default;\n    if (text) {\n      const size = await rnTextSize.measure({\n        text, // text to measure, can include symbols\n        width: containerWidth, // max-width of the \"virtual\" container\n        ...typography, // RN font specification\n      });\n      return size;\n    }\n  }\n}\n\nexport default new Typography();\n"]},"metadata":{},"sourceType":"script"}