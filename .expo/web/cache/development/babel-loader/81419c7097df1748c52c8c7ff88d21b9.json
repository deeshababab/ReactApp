{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _BaseInput2 = _interopRequireDefault(require(\"./BaseInput\"));\n\nvar _TextField = _interopRequireDefault(require(\"./TextField\"));\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _text = _interopRequireDefault(require(\"../text\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\inputs\\\\MaskedInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar MaskedInput = function (_BaseInput) {\n  (0, _inherits2.default)(MaskedInput, _BaseInput);\n\n  var _super = _createSuper(MaskedInput);\n\n  function MaskedInput() {\n    (0, _classCallCheck2.default)(this, MaskedInput);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(MaskedInput, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      this.keyboardDidHideListener = _reactNative.Keyboard.addListener('keyboardDidHide', function () {\n        if (_lodash.default.invoke(_this, 'isFocused')) {\n          _lodash.default.invoke(_this, 'blur');\n        }\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.keyboardDidHideListener.remove();\n    }\n  }, {\n    key: \"renderMaskedText\",\n    value: function renderMaskedText() {\n      var renderMaskedText = this.props.renderMaskedText;\n      var value = this.state.value;\n\n      if (_lodash.default.isFunction(renderMaskedText)) {\n        return renderMaskedText(value);\n      }\n\n      return _react.default.createElement(_text.default, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 12\n        }\n      }, value);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var containerStyle = this.props.containerStyle;\n\n      var TextInputProps = _TextField.default.extractOwnProps(this.props, ['containerStyle', 'style']);\n\n      return _react.default.createElement(_view.default, {\n        style: containerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_TextField.default, (0, _extends2.default)({}, this.props, {\n        ref: function ref(r) {\n          return _this2.input = r;\n        },\n        containerStyle: styles.hiddenInputContainer,\n        style: styles.hiddenInput,\n        enableErrors: false,\n        hideUnderline: true,\n        placeholder: \"\"\n      }, TextInputProps, {\n        caretHidden: true,\n        multiline: false,\n        onChangeText: this.onChangeText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      })), _react.default.createElement(_view.default, {\n        style: styles.maskedInputWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, this.renderMaskedText()));\n    }\n  }]);\n  return MaskedInput;\n}(_BaseInput2.default);\n\nexports.default = MaskedInput;\nMaskedInput.displayName = 'MaskedInput';\nMaskedInput.propTypes = _objectSpread(_objectSpread({}, _TextField.default.propTypes), {}, {\n  renderMaskedText: _propTypes.default.func.isRequired,\n  containerStyle: _reactNative.ViewPropTypes.style\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  hiddenInputContainer: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1\n  }),\n  hiddenInput: {\n    color: 'transparent',\n    backgroundColor: 'transparent',\n    height: undefined\n  },\n  maskedInputWrapper: {\n    zIndex: 0\n  }\n});","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/inputs/MaskedInput.js"],"names":["MaskedInput","keyboardDidHideListener","Keyboard","addListener","_","invoke","remove","renderMaskedText","props","value","state","isFunction","containerStyle","TextInputProps","TextField","extractOwnProps","r","input","styles","hiddenInputContainer","hiddenInput","onChangeText","maskedInputWrapper","BaseInput","displayName","propTypes","PropTypes","func","isRequired","ViewPropTypes","style","StyleSheet","create","absoluteFillObject","zIndex","color","backgroundColor","height","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;IASqBA,W;;;;;;;;;;;;wCAcC;AAAA;;AAClB,WAAKC,uBAAL,GAA+BC,sBAASC,WAAT,CAAqB,iBAArB,EAAwC,YAAM;AAC3E,YAAIC,gBAAEC,MAAF,CAAS,KAAT,EAAe,WAAf,CAAJ,EAAiC;AAC/BD,0BAAEC,MAAF,CAAS,KAAT,EAAe,MAAf;AACD;AACF,OAJ8B,CAA/B;AAKD;;;2CAEsB;AACrB,WAAKJ,uBAAL,CAA6BK,MAA7B;AACD;;;uCAEkB;AAAA,UACVC,gBADU,GACU,KAAKC,KADf,CACVD,gBADU;AAAA,UAEVE,KAFU,GAED,KAAKC,KAFJ,CAEVD,KAFU;;AAIjB,UAAIL,gBAAEO,UAAF,CAAaJ,gBAAb,CAAJ,EAAoC;AAClC,eAAOA,gBAAgB,CAACE,KAAD,CAAvB;AACD;;AACD,aAAO,6BAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,KAAP,CAAP;AACD;;;6BAEQ;AAAA;;AAAA,UACAG,cADA,GACkB,KAAKJ,KADvB,CACAI,cADA;;AAEP,UAAMC,cAAc,GAAGC,mBAAUC,eAAV,CAA0B,KAAKP,KAA/B,EAAsC,CAAC,gBAAD,EAAmB,OAAnB,CAAtC,CAAvB;;AAEA,aACE,6BAAC,aAAD;AAAM,QAAA,KAAK,EAAEI,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,kBAAD,6BACM,KAAKJ,KADX;AAEE,QAAA,GAAG,EAAE,aAAAQ,CAAC;AAAA,iBAAK,MAAI,CAACC,KAAL,GAAaD,CAAlB;AAAA,SAFR;AAGE,QAAA,cAAc,EAAEE,MAAM,CAACC,oBAHzB;AAIE,QAAA,KAAK,EAAED,MAAM,CAACE,WAJhB;AAKE,QAAA,YAAY,EAAE,KALhB;AAME,QAAA,aAAa,MANf;AAOE,QAAA,WAAW,EAAC;AAPd,SAQMP,cARN;AASE,QAAA,WAAW,MATb;AAUE,QAAA,SAAS,EAAE,KAVb;AAWE,QAAA,YAAY,EAAE,KAAKQ,YAXrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAcE,6BAAC,aAAD;AAAM,QAAA,KAAK,EAAEH,MAAM,CAACI,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyC,KAAKf,gBAAL,EAAzC,CAdF,CADF;AAkBD;;;EA1DsCgB,mB;;;AAApBvB,W,CACZwB,W,GAAc,a;AADFxB,W,CAEZyB,S,mCACFX,mBAAUW,S;AAIblB,EAAAA,gBAAgB,EAAEmB,mBAAUC,IAAV,CAAeC,U;AAIjChB,EAAAA,cAAc,EAAEiB,2BAAcC;;;AAkDlC,IAAMZ,MAAM,GAAGa,wBAAWC,MAAX,CAAkB;AAC/Bb,EAAAA,oBAAoB,kCACfY,wBAAWE,kBADI;AAElBC,IAAAA,MAAM,EAAE;AAFU,IADW;AAK/Bd,EAAAA,WAAW,EAAE;AACXe,IAAAA,KAAK,EAAE,aADI;AAEXC,IAAAA,eAAe,EAAE,aAFN;AAGXC,IAAAA,MAAM,EAAEC;AAHG,GALkB;AAU/BhB,EAAAA,kBAAkB,EAAE;AAClBY,IAAAA,MAAM,EAAE;AADU;AAVW,CAAlB,CAAf","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, ViewPropTypes, Keyboard} from 'react-native';\nimport BaseInput from './BaseInput';\nimport TextField from './TextField';\nimport View from '../view';\nimport Text from '../text';\n\n/**\n * @description: Mask Input to create custom looking inputs with custom formats\n * @extends: TextInput\n * @extendslink: docs/TagsInput\n * @gif: https://camo.githubusercontent.com/61eedb65e968845d5eac713dcd21a69691571fb1/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4b5a5a7446666f486f454b334b2f67697068792e676966\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/MaskedInputScreen.js\n */\nexport default class MaskedInput extends BaseInput {\n  static displayName = 'MaskedInput';\n  static propTypes = {\n    ...TextField.propTypes,\n    /**\n     * callback for rendering the custom input out of the value returns from the actual input\n     */\n    renderMaskedText: PropTypes.func.isRequired,\n    /**\n     * container style for the masked input container\n     */\n    containerStyle: ViewPropTypes.style\n  };\n\n  componentDidMount() {\n    this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', () => {\n      if (_.invoke(this, 'isFocused')) {\n        _.invoke(this, 'blur');\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.keyboardDidHideListener.remove();\n  }\n\n  renderMaskedText() {\n    const {renderMaskedText} = this.props;\n    const {value} = this.state;\n\n    if (_.isFunction(renderMaskedText)) {\n      return renderMaskedText(value);\n    }\n    return <Text>{value}</Text>;\n  }\n\n  render() {\n    const {containerStyle} = this.props;\n    const TextInputProps = TextField.extractOwnProps(this.props, ['containerStyle', 'style']);\n\n    return (\n      <View style={containerStyle}>\n        <TextField\n          {...this.props}\n          ref={r => (this.input = r)}\n          containerStyle={styles.hiddenInputContainer}\n          style={styles.hiddenInput}\n          enableErrors={false}\n          hideUnderline\n          placeholder=\"\"\n          {...TextInputProps}\n          caretHidden\n          multiline={false}\n          onChangeText={this.onChangeText}\n        />\n        <View style={styles.maskedInputWrapper}>{this.renderMaskedText()}</View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  hiddenInputContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1\n  },\n  hiddenInput: {\n    color: 'transparent',\n    backgroundColor: 'transparent',\n    height: undefined\n  },\n  maskedInputWrapper: {\n    zIndex: 0\n  }\n});\n"]},"metadata":{},"sourceType":"script"}