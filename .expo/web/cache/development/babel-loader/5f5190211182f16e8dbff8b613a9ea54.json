{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BADGE_SIZES = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeAnimatable = require(\"react-native-animatable\");\n\nvar _commons = require(\"../../commons\");\n\nvar _style = require(\"../../style\");\n\nvar _image = _interopRequireDefault(require(\"../image\"));\n\nvar _touchableOpacity = _interopRequireDefault(require(\"../touchableOpacity\"));\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\badge\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar LABEL_FORMATTER_VALUES = [1, 2, 3, 4];\nvar BADGE_SIZES = {\n  pimpleSmall: 6,\n  pimpleBig: 10,\n  pimpleHuge: 14,\n  small: 16,\n  default: 20,\n  large: 24\n};\nexports.BADGE_SIZES = BADGE_SIZES;\n\nvar Badge = function (_PureBaseComponent) {\n  (0, _inherits2.default)(Badge, _PureBaseComponent);\n\n  var _super = _createSuper(Badge);\n\n  function Badge(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Badge);\n    _this = _super.call(this, props);\n\n    if (props.testId) {\n      console.warn('Badge prop \\'testId\\' is deprecated. Please use RN \\'testID\\' prop instead.');\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Badge, [{\n    key: \"getAccessibilityProps\",\n    value: function getAccessibilityProps() {\n      var _this$props = this.props,\n          onPress = _this$props.onPress,\n          icon = _this$props.icon,\n          label = _this$props.label;\n      return _objectSpread(_objectSpread({\n        accessibilityLabel: icon ? 'badge' : label ? label + \" new items\" : undefined\n      }, this.extractAccessibilityProps()), {}, {\n        accessible: true,\n        accessibilityRole: onPress ? 'button' : icon ? 'image' : 'text'\n      });\n    }\n  }, {\n    key: \"isSmallBadge\",\n    value: function isSmallBadge() {\n      var size = this.props.size;\n      return size === 'small';\n    }\n  }, {\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.props);\n    }\n  }, {\n    key: \"getBadgeSizeStyle\",\n    value: function getBadgeSizeStyle() {\n      var _this$props2 = this.props,\n          borderWidth = _this$props2.borderWidth,\n          size = _this$props2.size,\n          icon = _this$props2.icon;\n      var label = this.getFormattedLabel();\n      var badgeHeight = _lodash.default.isNumber(size) ? size : BADGE_SIZES[size];\n      var style = {\n        paddingHorizontal: this.isSmallBadge() ? 4 : 6,\n        height: badgeHeight,\n        minWidth: badgeHeight\n      };\n      var isPimple = label === undefined;\n\n      if (isPimple || icon) {\n        style.paddingHorizontal = 0;\n        style.minWidth = undefined;\n        style.width = style.height;\n\n        if (borderWidth) {\n          style.height += borderWidth * 2;\n          style.width += borderWidth * 2;\n        }\n\n        return style;\n      }\n\n      if (borderWidth) {\n        style.height += borderWidth * 2;\n        style.minWidth += borderWidth * 2;\n      }\n\n      return style;\n    }\n  }, {\n    key: \"getFormattedLabel\",\n    value: function getFormattedLabel() {\n      var _this$getThemeProps = this.getThemeProps(),\n          labelFormatterLimit = _this$getThemeProps.labelFormatterLimit,\n          label = _this$getThemeProps.label;\n\n      if (isNaN(label)) {\n        return label;\n      }\n\n      if (LABEL_FORMATTER_VALUES.includes(labelFormatterLimit)) {\n        var maxLabelNumber = Math.pow(10, labelFormatterLimit) - 1;\n        var formattedLabel = label;\n\n        if (formattedLabel > maxLabelNumber) {\n          formattedLabel = maxLabelNumber + \"+\";\n        }\n\n        return formattedLabel;\n      } else {\n        return label;\n      }\n    }\n  }, {\n    key: \"getBorderStyling\",\n    value: function getBorderStyling() {\n      var _this$props3 = this.props,\n          borderWidth = _this$props3.borderWidth,\n          borderColor = _this$props3.borderColor;\n      return {\n        borderWidth: borderWidth,\n        borderColor: borderColor\n      };\n    }\n  }, {\n    key: \"renderLabel\",\n    value: function renderLabel() {\n      var labelStyle = this.props.labelStyle;\n      return _react.default.createElement(_reactNative.Text, {\n        style: [this.styles.label, this.isSmallBadge() && this.styles.labelSmall, labelStyle],\n        allowFontScaling: false,\n        numberOfLines: 1,\n        testID: \"badge\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }\n      }, this.getFormattedLabel());\n    }\n  }, {\n    key: \"renderIcon\",\n    value: function renderIcon() {\n      var _this$props4 = this.props,\n          icon = _this$props4.icon,\n          iconStyle = _this$props4.iconStyle,\n          iconProps = _this$props4.iconProps,\n          borderColor = _this$props4.borderColor;\n      return _react.default.createElement(_image.default, (0, _extends2.default)({\n        source: icon,\n        resizeMode: \"contain\",\n        borderColor: borderColor\n      }, iconProps, {\n        style: _objectSpread({\n          flex: 1\n        }, iconStyle),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          activeOpacity = _this$props5.activeOpacity,\n          borderWidth = _this$props5.borderWidth,\n          backgroundColor = _this$props5.backgroundColor,\n          containerStyle = _this$props5.containerStyle,\n          icon = _this$props5.icon,\n          onPress = _this$props5.onPress,\n          testId = _this$props5.testId,\n          testID = _this$props5.testID,\n          others = (0, _objectWithoutProperties2.default)(_this$props5, [\"activeOpacity\", \"borderWidth\", \"backgroundColor\", \"containerStyle\", \"icon\", \"onPress\", \"testId\", \"testID\"]);\n      var backgroundStyle = backgroundColor && {\n        backgroundColor: backgroundColor\n      };\n      var sizeStyle = this.getBadgeSizeStyle();\n      var borderStyle = borderWidth ? this.getBorderStyling() : undefined;\n      var animationProps = this.extractAnimationProps();\n      var Container = !_lodash.default.isEmpty(animationProps) ? _reactNativeAnimatable.View : onPress ? _touchableOpacity.default : _view.default;\n\n      if (!_lodash.default.isEmpty(animationProps)) {\n        console.warn('Badge component will soon stop supporting animationProps.' + 'Please wrap your Badge component with your own animation component, such as Animatable.View');\n      }\n\n      return _react.default.createElement(_view.default, (0, _extends2.default)({\n        style: containerStyle\n      }, others, {\n        backgroundColor: undefined\n      }, this.getAccessibilityProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(Container, (0, _extends2.default)({\n        testID: testID || testId,\n        pointerEvents: 'none',\n        style: [sizeStyle, this.styles.badge, borderStyle, backgroundStyle],\n        onPress: onPress,\n        activeOpacity: activeOpacity\n      }, animationProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }\n      }), icon ? this.renderIcon() : this.renderLabel()));\n    }\n  }]);\n  return Badge;\n}(_commons.PureBaseComponent);\n\nexports.default = Badge;\nBadge.displayName = 'Badge';\nBadge.propTypes = {\n  label: _propTypes.default.string,\n  backgroundColor: _propTypes.default.string,\n  size: _propTypes.default.oneOfType([_propTypes.default.oneOf(Object.keys(BADGE_SIZES)), _propTypes.default.number]),\n  borderWidth: _propTypes.default.number,\n  borderColor: _propTypes.default.string,\n  containerStyle: _reactNative.ViewPropTypes.style,\n  labelStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),\n  labelFormatterLimit: _propTypes.default.oneOf(LABEL_FORMATTER_VALUES),\n  icon: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number]),\n  iconStyle: _propTypes.default.object,\n  iconProps: _propTypes.default.object,\n  testId: _propTypes.default.string\n};\nBadge.defaultProps = {\n  size: 'default'\n};\n\nfunction createStyles(props) {\n  return _reactNative.StyleSheet.create({\n    badge: {\n      alignSelf: 'flex-start',\n      borderRadius: _style.BorderRadiuses.br100,\n      backgroundColor: !props.icon ? _style.ThemeManager.primaryColor : undefined,\n      alignItems: 'center',\n      justifyContent: 'center',\n      overflow: 'hidden'\n    },\n    label: _objectSpread(_objectSpread({}, _style.Typography.text90), {}, {\n      color: _style.Colors.white,\n      backgroundColor: 'transparent'\n    }),\n    labelSmall: _objectSpread(_objectSpread({}, _style.Typography.text100), {}, {\n      lineHeight: undefined\n    })\n  });\n}","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/badge/index.js"],"names":["LABEL_FORMATTER_VALUES","BADGE_SIZES","pimpleSmall","pimpleBig","pimpleHuge","small","default","large","Badge","props","testId","console","warn","onPress","icon","label","accessibilityLabel","undefined","extractAccessibilityProps","accessible","accessibilityRole","size","styles","createStyles","borderWidth","getFormattedLabel","badgeHeight","_","isNumber","style","paddingHorizontal","isSmallBadge","height","minWidth","isPimple","width","getThemeProps","labelFormatterLimit","isNaN","includes","maxLabelNumber","formattedLabel","borderColor","labelStyle","labelSmall","iconStyle","iconProps","flex","activeOpacity","backgroundColor","containerStyle","testID","others","backgroundStyle","sizeStyle","getBadgeSizeStyle","borderStyle","getBorderStyling","animationProps","extractAnimationProps","Container","isEmpty","AnimatableView","TouchableOpacity","View","getAccessibilityProps","badge","renderIcon","renderLabel","PureBaseComponent","displayName","propTypes","PropTypes","string","oneOfType","oneOf","Object","keys","number","ViewPropTypes","object","array","defaultProps","StyleSheet","create","alignSelf","borderRadius","BorderRadiuses","br100","ThemeManager","primaryColor","alignItems","justifyContent","overflow","Typography","text90","color","Colors","white","text100","lineHeight"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, Text, ViewPropTypes} from 'react-native';\nimport {View as AnimatableView} from 'react-native-animatable';\nimport {PureBaseComponent} from '../../commons';\nimport {BorderRadiuses, Colors, ThemeManager, Typography} from '../../style';\nimport Image from '../image';\nimport TouchableOpacity from '../touchableOpacity';\nimport View from '../view';\n\nconst LABEL_FORMATTER_VALUES = [1, 2, 3, 4];\n\n// TODO: depreciate enum badge sizes, use only number for size\nexport const BADGE_SIZES = {\n  pimpleSmall: 6,\n  pimpleBig: 10,\n  pimpleHuge: 14,\n  small: 16,\n  default: 20,\n  large: 24\n};\n\n/**\n * @description: Round colored badge, typically used to show a number\n * @extends: Animatable.View\n * @extendslink: https://github.com/oblador/react-native-animatable\n * @image: https://user-images.githubusercontent.com/33805983/34480753-df7a868a-efb6-11e7-9072-80f5c110a4f3.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/BadgesScreen.js\n */\nexport default class Badge extends PureBaseComponent {\n  static displayName = 'Badge';\n  static propTypes = {\n    /**\n     * Text to show inside the badge.\n     * Not passing a label (undefined) will present a pimple badge.\n     */\n    label: PropTypes.string,\n    /**\n     * Color of the badge background\n     */\n    backgroundColor: PropTypes.string,\n    /**\n     * the badge size (default, small)\n     */\n    size: PropTypes.oneOfType([PropTypes.oneOf(Object.keys(BADGE_SIZES)), PropTypes.number]),\n    /**\n     * width of border around the badge\n     */\n    borderWidth: PropTypes.number,\n    /**\n     * color of border around the badge\n     */\n    borderColor: PropTypes.string,\n    /**\n     * Additional styles for the top container\n     */\n    containerStyle: ViewPropTypes.style,\n    /**\n     * Additional styles for the badge label\n     */\n    labelStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * Receives a number from 1 to 4, representing the label's max digit length.\n     * Beyond the max number for that digit length, a \"+\" will show at the end.\n     * If set to a value not included in LABEL_FORMATTER_VALUES, no formating will occur.\n     * Example: labelLengthFormater={2}, label={124}, label will present \"99+\".\n     */\n    labelFormatterLimit: PropTypes.oneOf(LABEL_FORMATTER_VALUES),\n    /**\n     * Renders an icon badge\n     */\n    icon: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * Additional styling to badge icon\n     */\n    iconStyle: PropTypes.object,\n    /**\n     * Additional props passed to icon\n     */\n    iconProps: PropTypes.object,\n    /**\n     * Use to identify the badge in tests\n     */\n    testId: PropTypes.string\n  };\n\n  static defaultProps = {\n    size: 'default'\n  };\n\n  constructor(props) {\n    super(props);\n\n    if (props.testId) {\n      console.warn('Badge prop \\'testId\\' is deprecated. Please use RN \\'testID\\' prop instead.');\n    }\n  }\n\n  getAccessibilityProps() {\n    const {onPress, icon, label} = this.props;\n\n    return {\n      accessibilityLabel: icon ? 'badge' : label ? `${label} new items` : undefined,\n      ...this.extractAccessibilityProps(),\n      accessible: true,\n      accessibilityRole: onPress ? 'button' : icon ? 'image' : 'text'\n    };\n  }\n\n  isSmallBadge() {\n    const {size} = this.props;\n    return size === 'small';\n  }\n\n  generateStyles() {\n    this.styles = createStyles(this.props);\n  }\n\n  getBadgeSizeStyle() {\n    const {borderWidth, size, icon} = this.props;\n    const label = this.getFormattedLabel();\n    const badgeHeight = _.isNumber(size) ? size : BADGE_SIZES[size];\n\n    const style = {\n      paddingHorizontal: this.isSmallBadge() ? 4 : 6,\n      height: badgeHeight,\n      minWidth: badgeHeight\n    };\n\n    const isPimple = label === undefined;\n    if (isPimple || icon) {\n      style.paddingHorizontal = 0;\n      style.minWidth = undefined;\n      style.width = style.height;\n      if (borderWidth) {\n        style.height += borderWidth * 2;\n        style.width += borderWidth * 2;\n      }\n      return style;\n    }\n\n    if (borderWidth) {\n      style.height += borderWidth * 2;\n      style.minWidth += borderWidth * 2;\n    }\n    return style;\n  }\n\n  getFormattedLabel() {\n    const {labelFormatterLimit, label} = this.getThemeProps();\n    if (isNaN(label)) {\n      return label;\n    }\n    if (LABEL_FORMATTER_VALUES.includes(labelFormatterLimit)) {\n      const maxLabelNumber = 10 ** labelFormatterLimit - 1;\n      let formattedLabel = label;\n      if (formattedLabel > maxLabelNumber) {\n        formattedLabel = `${maxLabelNumber}+`;\n      }\n      return formattedLabel;\n    } else {\n      return label;\n    }\n  }\n\n  getBorderStyling() {\n    const {borderWidth, borderColor} = this.props;\n    return {\n      borderWidth,\n      borderColor\n    };\n  }\n\n  renderLabel() {\n    const {labelStyle} = this.props;\n    return (\n      <Text\n        style={[this.styles.label, this.isSmallBadge() && this.styles.labelSmall, labelStyle]}\n        allowFontScaling={false}\n        numberOfLines={1}\n        testID=\"badge\"\n      >\n        {this.getFormattedLabel()}\n      </Text>\n    );\n  }\n\n  renderIcon() {\n    const {icon, iconStyle, iconProps, borderColor} = this.props;\n    return (\n      <Image\n        source={icon}\n        resizeMode=\"contain\"\n        borderColor={borderColor}\n        {...iconProps}\n        style={{\n          flex: 1,\n          ...iconStyle\n        }}\n      />\n    );\n  }\n\n  render() {\n    // TODO: remove testId after deprecation\n    const {\n      activeOpacity,\n      borderWidth,\n      backgroundColor,\n      containerStyle,\n      icon,\n      onPress,\n      testId,\n      testID,\n      ...others\n    } = this.props;\n    const backgroundStyle = backgroundColor && {backgroundColor};\n    const sizeStyle = this.getBadgeSizeStyle();\n    const borderStyle = borderWidth ? this.getBorderStyling() : undefined;\n\n    const animationProps = this.extractAnimationProps();\n    const Container = !_.isEmpty(animationProps) ? AnimatableView : onPress ? TouchableOpacity : View;\n    if (!_.isEmpty(animationProps)) {\n      console.warn('Badge component will soon stop supporting animationProps.' +\n          'Please wrap your Badge component with your own animation component, such as Animatable.View',);\n    }\n    return (\n      // The extra View wrapper is to break badge's flex-ness\n      <View style={containerStyle} {...others} backgroundColor={undefined} {...this.getAccessibilityProps()}>\n        <Container\n          testID={testID || testId}\n          pointerEvents={'none'}\n          style={[sizeStyle, this.styles.badge, borderStyle, backgroundStyle]}\n          onPress={onPress}\n          activeOpacity={activeOpacity}\n          {...animationProps}\n        >\n          {icon ? this.renderIcon() : this.renderLabel()}\n        </Container>\n      </View>\n    );\n  }\n}\n\nfunction createStyles(props) {\n  return StyleSheet.create({\n    badge: {\n      alignSelf: 'flex-start',\n      borderRadius: BorderRadiuses.br100,\n      backgroundColor: !props.icon ? ThemeManager.primaryColor : undefined,\n      alignItems: 'center',\n      justifyContent: 'center',\n      overflow: 'hidden'\n    },\n    label: {\n      ...Typography.text90,\n      color: Colors.white,\n      backgroundColor: 'transparent'\n    },\n    labelSmall: {\n      ...Typography.text100,\n      lineHeight: undefined\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}