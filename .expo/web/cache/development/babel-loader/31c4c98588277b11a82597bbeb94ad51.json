{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _commons = require(\"../../commons\");\n\nvar _view = _interopRequireDefault(require(\"../../components/view\"));\n\nvar _modal = _interopRequireDefault(require(\"../../screensComponents/modal\"));\n\nvar _button = _interopRequireDefault(require(\"../../components/button\"));\n\nvar _inputs = require(\"../inputs\");\n\nvar PickerPresenter = _interopRequireWildcard(require(\"./PickerPresenter\"));\n\nvar _NativePicker = _interopRequireDefault(require(\"./NativePicker\"));\n\nvar _PickerModal = _interopRequireDefault(require(\"./PickerModal\"));\n\nvar _PickerItem = _interopRequireDefault(require(\"./PickerItem\"));\n\nvar _style = require(\"../../style\");\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\picker\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar PICKER_MODES = {\n  SINGLE: 'SINGLE',\n  MULTI: 'MULTI'\n};\n\nvar ItemType = _propTypes.default.shape({\n  value: _propTypes.default.any,\n  label: _propTypes.default.string\n});\n\nvar Picker = function (_BaseComponent) {\n  (0, _inherits2.default)(Picker, _BaseComponent);\n\n  var _super = _createSuper(Picker);\n\n  function Picker(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Picker);\n    _this = _super.call(this, props);\n\n    _this.handlePickerOnPress = function () {\n      _this.toggleExpandableModal(true);\n\n      _lodash.default.invoke(_this.props, 'onPress');\n    };\n\n    _this.toggleExpandableModal = function (value) {\n      _this.setState({\n        showExpandableModal: value\n      });\n    };\n\n    _this.toggleItemSelection = function (item) {\n      var value = _this.state.value;\n\n      var newValue = _lodash.default.xorBy(value, [item], 'value');\n\n      _this.setState({\n        value: newValue\n      });\n    };\n\n    _this.cancelSelect = function () {\n      _this.setState({\n        value: _this.props.value\n      });\n\n      _this.toggleExpandableModal(false);\n    };\n\n    _this.onDoneSelecting = function (item) {\n      _this.setState({\n        searchValue: '',\n        value: item\n      });\n\n      _this.toggleExpandableModal(false);\n\n      _lodash.default.invoke(_this.props, 'onChange', item);\n    };\n\n    _this.onSearchChange = function (searchValue) {\n      _this.setState({\n        searchValue: searchValue\n      });\n\n      _lodash.default.invoke(_this.props, 'onSearchChange', searchValue);\n    };\n\n    _this.onSelectedItemLayout = function (_ref) {\n      var y = _ref.nativeEvent.layout.y;\n\n      _this.setState({\n        selectedItemPosition: y\n      });\n    };\n\n    _this.appendPropsToChildren = function () {\n      var _this$props = _this.props,\n          children = _this$props.children,\n          mode = _this$props.mode,\n          getItemValue = _this$props.getItemValue,\n          showSearch = _this$props.showSearch,\n          renderItem = _this$props.renderItem;\n      var _this$state = _this.state,\n          value = _this$state.value,\n          searchValue = _this$state.searchValue;\n\n      var childrenWithProps = _react.default.Children.map(children, function (child) {\n        var childValue = PickerPresenter.getItemValue(_objectSpread({\n          getItemValue: getItemValue\n        }, child.props));\n        var childLabel = PickerPresenter.getItemLabel(_objectSpread(_objectSpread({}, child.props), {}, {\n          getLabel: child.props.getItemLabel\n        }));\n\n        if (!showSearch || _lodash.default.isEmpty(searchValue) || _lodash.default.includes(_lodash.default.lowerCase(childLabel), _lodash.default.lowerCase(searchValue))) {\n          var selectedValue = PickerPresenter.getItemValue({\n            value: value,\n            getItemValue: getItemValue\n          });\n          return _react.default.cloneElement(child, {\n            isSelected: PickerPresenter.isItemSelected(childValue, selectedValue),\n            onPress: mode === Picker.modes.MULTI ? _this.toggleItemSelection : _this.onDoneSelecting,\n            getItemValue: child.props.getItemValue || getItemValue,\n            onSelectedLayout: _this.onSelectedItemLayout,\n            renderItem: child.props.renderItem || renderItem,\n            accessibilityHint: 'Double click to select this suggestion'\n          });\n        }\n      });\n\n      return childrenWithProps;\n    };\n\n    _this.renderExpandableModal = function () {\n      var _this$getThemeProps = _this.getThemeProps(),\n          mode = _this$getThemeProps.mode,\n          enableModalBlur = _this$getThemeProps.enableModalBlur,\n          topBarProps = _this$getThemeProps.topBarProps,\n          showSearch = _this$getThemeProps.showSearch,\n          searchStyle = _this$getThemeProps.searchStyle,\n          searchPlaceholder = _this$getThemeProps.searchPlaceholder,\n          renderCustomSearch = _this$getThemeProps.renderCustomSearch,\n          renderCustomModal = _this$getThemeProps.renderCustomModal,\n          listProps = _this$getThemeProps.listProps,\n          testID = _this$getThemeProps.testID;\n\n      var _this$state2 = _this.state,\n          showExpandableModal = _this$state2.showExpandableModal,\n          selectedItemPosition = _this$state2.selectedItemPosition;\n\n      var children = _this.appendPropsToChildren(_this.props.children);\n\n      if (renderCustomModal) {\n        var modalProps = {\n          visible: showExpandableModal,\n          toggleModal: _this.toggleExpandableModal,\n          children: children\n        };\n        return renderCustomModal(modalProps);\n      }\n\n      return _react.default.createElement(_PickerModal.default, {\n        testID: testID + \".modal\",\n        visible: showExpandableModal,\n        scrollPosition: selectedItemPosition,\n        enableModalBlur: enableModalBlur,\n        topBarProps: _objectSpread(_objectSpread({}, topBarProps), {}, {\n          onCancel: _this.cancelSelect,\n          onDone: mode === Picker.modes.MULTI ? function () {\n            return _this.onDoneSelecting(_this.state.value);\n          } : undefined\n        }),\n        showSearch: showSearch,\n        searchStyle: searchStyle,\n        searchPlaceholder: searchPlaceholder,\n        onSearchChange: _this.onSearchChange,\n        renderCustomSearch: renderCustomSearch,\n        listProps: listProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 7\n        }\n      }, children);\n    };\n\n    _this.state = {\n      value: props.value,\n      selectedItemPosition: 0\n    };\n\n    if (props.mode === Picker.modes.SINGLE && Array.isArray(props.value)) {\n      console.warn('Picker in SINGLE mode cannot accept an array for value');\n    }\n\n    if (props.mode === Picker.modes.MULTI && !Array.isArray(props.value)) {\n      console.warn('Picker in MULTI mode must accept an array for value');\n    }\n\n    if (props.useNativePicker && _lodash.default.isPlainObject(props.value)) {\n      console.warn('UILib Picker: don\\'t use object as value for native picker, use either string or a number');\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Picker, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nexProps) {\n      this.setState({\n        value: nexProps.value\n      });\n    }\n  }, {\n    key: \"getAccessibilityInfo\",\n    value: function getAccessibilityInfo() {\n      var placeholder = this.props.placeholder;\n      return _objectSpread({\n        accessibilityLabel: this.getLabel() ? placeholder + \" \" + this.getLabel() : \"Select \" + placeholder,\n        accessibilityHint: this.getLabel() ? 'Double tap to edit' : \"Goes to \" + placeholder + \". Suggestions will be provided\"\n      }, this.extractAccessibilityProps());\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel() {\n      var value = this.state.value;\n\n      if (_lodash.default.isArray(value)) {\n        return _lodash.default.chain(value).map('label').join(', ').value();\n      }\n\n      var getLabel = this.props.getLabel;\n      return _lodash.default.isFunction(getLabel) ? getLabel(value) : _lodash.default.get(value, 'label');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          useNativePicker = _this$props2.useNativePicker,\n          renderPicker = _this$props2.renderPicker,\n          customPickerProps = _this$props2.customPickerProps,\n          testID = _this$props2.testID;\n\n      if (useNativePicker) {\n        return _react.default.createElement(_NativePicker.default, (0, _extends2.default)({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 14\n          }\n        }));\n      }\n\n      if (_lodash.default.isFunction(renderPicker)) {\n        var value = this.state.value;\n        return _react.default.createElement(_view.default, {\n          left: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 9\n          }\n        }, _react.default.createElement(_button.default, (0, _extends2.default)({}, customPickerProps, {\n          link: true,\n          onPress: this.handlePickerOnPress,\n          testID: testID,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 11\n          }\n        }), renderPicker(value)), this.renderExpandableModal());\n      }\n\n      var textInputProps = _inputs.TextField.extractOwnProps(this.props);\n\n      var label = this.getLabel();\n      return _react.default.createElement(_inputs.TextField, (0, _extends2.default)({\n        color: _style.Colors.dark10\n      }, textInputProps, this.getAccessibilityInfo(), {\n        value: label,\n        expandable: true,\n        renderExpandable: this.renderExpandableModal,\n        onToggleExpandableModal: this.toggleExpandableModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 7\n        }\n      }));\n    }\n  }]);\n  return Picker;\n}(_commons.BaseComponent);\n\nPicker.displayName = 'Picker';\nPicker.propTypes = _objectSpread(_objectSpread({}, _inputs.TextField.propTypes), {}, {\n  value: _propTypes.default.oneOfType([ItemType, _propTypes.default.arrayOf(ItemType), _propTypes.default.object, _propTypes.default.string, _propTypes.default.number]),\n  onChange: _propTypes.default.func,\n  mode: _propTypes.default.oneOf(Object.keys(PICKER_MODES)),\n  enableModalBlur: _propTypes.default.bool,\n  renderPicker: _propTypes.default.func,\n  renderItem: _propTypes.default.func,\n  renderCustomModal: _propTypes.default.func,\n  customPickerProps: _propTypes.default.object,\n  onPress: _propTypes.default.func,\n  getItemValue: _propTypes.default.func,\n  getLabel: _propTypes.default.func,\n  topBarProps: _propTypes.default.shape(_modal.default.TopBar.propTypes),\n  showSearch: _propTypes.default.bool,\n  searchStyle: _propTypes.default.shape({\n    color: _propTypes.default.string,\n    placeholderTextColor: _propTypes.default.string,\n    selectionColor: _propTypes.default.string\n  }),\n  searchPlaceholder: _propTypes.default.string,\n  onSearchChange: _propTypes.default.func,\n  renderCustomSearch: _propTypes.default.func,\n  useNativePicker: _propTypes.default.bool,\n  renderNativePicker: _propTypes.default.func,\n  listProps: _propTypes.default.object\n});\nPicker.defaultProps = _objectSpread(_objectSpread({}, _inputs.TextField.defaultProps), {}, {\n  mode: PICKER_MODES.SINGLE\n});\nPicker.modes = PICKER_MODES;\nPicker.Item = _PickerItem.default;\nvar _default = Picker;\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/picker/index.js"],"names":["PICKER_MODES","SINGLE","MULTI","ItemType","PropTypes","shape","value","any","label","string","Picker","props","handlePickerOnPress","toggleExpandableModal","_","invoke","setState","showExpandableModal","toggleItemSelection","item","state","newValue","xorBy","cancelSelect","onDoneSelecting","searchValue","onSearchChange","onSelectedItemLayout","y","nativeEvent","layout","selectedItemPosition","appendPropsToChildren","children","mode","getItemValue","showSearch","renderItem","childrenWithProps","React","Children","map","child","childValue","PickerPresenter","childLabel","getItemLabel","getLabel","isEmpty","includes","lowerCase","selectedValue","cloneElement","isSelected","isItemSelected","onPress","modes","onSelectedLayout","accessibilityHint","renderExpandableModal","getThemeProps","enableModalBlur","topBarProps","searchStyle","searchPlaceholder","renderCustomSearch","renderCustomModal","listProps","testID","modalProps","visible","toggleModal","onCancel","onDone","undefined","Array","isArray","console","warn","useNativePicker","isPlainObject","nexProps","placeholder","accessibilityLabel","extractAccessibilityProps","chain","join","isFunction","get","renderPicker","customPickerProps","textInputProps","TextField","extractOwnProps","Colors","dark10","getAccessibilityInfo","BaseComponent","displayName","propTypes","oneOfType","arrayOf","object","number","onChange","func","oneOf","Object","keys","bool","Modal","TopBar","color","placeholderTextColor","selectionColor","renderNativePicker","defaultProps","Item","PickerItem"],"mappings":"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","sourcesContent":["// TODO: deprecate value allowing passing an object, allow only string or number\n// TODO: extract picker labels from children in order to obtain the correct label to render (similar to NativePicker)\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {BaseComponent} from '../../commons';\nimport View from '../../components/view';\nimport Modal from '../../screensComponents/modal';\nimport Button from '../../components/button';\nimport {TextField} from '../inputs';\nimport * as PickerPresenter from './PickerPresenter';\nimport NativePicker from './NativePicker';\nimport PickerModal from './PickerModal';\nimport PickerItem from './PickerItem';\nimport {Colors} from '../../style';\n\nconst PICKER_MODES = {\n  SINGLE: 'SINGLE',\n  MULTI: 'MULTI'\n};\nconst ItemType = PropTypes.shape({\n  value: PropTypes.any,\n  label: PropTypes.string\n});\n\n/**\n * @description: Picker Component, support single or multiple selection, blurModel and nativePicker\n * @gif: https://media.giphy.com/media/3o751SiuZZiByET2lq/giphy.gif, https://media.giphy.com/media/TgMQnyw5grJIDohzvx/giphy.gif, https://media.giphy.com/media/5hsdmVptBRskZKn787/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/FormScreen.js\n */\nclass Picker extends BaseComponent {\n  static displayName = 'Picker';\n  static propTypes = {\n    ...TextField.propTypes,\n    /**\n     * Picker current value in the shape of {value: ..., label: ...}, for custom shape use 'getItemValue' prop\n     */\n    value: PropTypes.oneOfType([\n      ItemType,\n      PropTypes.arrayOf(ItemType),\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.number\n    ]),\n    /**\n     * Callback for when picker value change\n     */\n    onChange: PropTypes.func,\n    /**\n     * SINGLE mode or MULTI mode\n     */\n    mode: PropTypes.oneOf(Object.keys(PICKER_MODES)),\n    /**\n     * Adds blur effect to picker modal (iOS only)\n     */\n    enableModalBlur: PropTypes.bool,\n    /**\n     * Render custom picker - input will be value (see above)\n     * Example:\n     * renderPicker = (selectedItem) => {...}\n     */\n    renderPicker: PropTypes.func,\n    /**\n     * Render custom picker item\n     */\n    renderItem: PropTypes.func,\n    /**\n     * Render custom picker modal (e.g ({visible, children, toggleModal}) => {...})\n     */\n    renderCustomModal: PropTypes.func,\n    /**\n     * Custom picker props (when using renderPicker, will apply on the button wrapper)\n     */\n    customPickerProps: PropTypes.object,\n    /**\n     * Add onPress callback for when pressing the picker\n     */\n    onPress: PropTypes.func,\n    /**\n     * A function that extract the unique value out of the value prop in case value has a custom structure\n     */\n    getItemValue: PropTypes.func,\n    /**\n     * A function that returns the label to show for the selected Picker value\n     */\n    getLabel: PropTypes.func,\n    /**\n     * The picker modal top bar props\n     */\n    topBarProps: PropTypes.shape(Modal.TopBar.propTypes),\n    /**\n     * Show search input to filter picker items by label\n     */\n    showSearch: PropTypes.bool,\n    /**\n     * Style object for the search input (only when passing showSearch)\n     */\n    searchStyle: PropTypes.shape({\n      color: PropTypes.string,\n      placeholderTextColor: PropTypes.string,\n      selectionColor: PropTypes.string\n    }),\n    /**\n     * Placeholder text for the search input (only when passing showSearch)\n     */\n    searchPlaceholder: PropTypes.string,\n    /**\n     * callback for picker modal search input text change (only when passing showSearch)\n     */\n    onSearchChange: PropTypes.func,\n    /**\n     * Render custom search input (only when passing showSearch)\n     */\n    renderCustomSearch: PropTypes.func,\n    /**\n     * Allow to use the native picker solution (different style for iOS and Android)\n     */\n    useNativePicker: PropTypes.bool,\n    /**\n     * Callback for rendering a custom native picker inside the dialog (relevant to native picker only)\n     */\n    renderNativePicker: PropTypes.func,\n    /**\n     * Pass props to the list component that wraps the picker options (allows to control FlatList behavior)\n     */\n    listProps: PropTypes.object\n  };\n\n  static defaultProps = {\n    ...TextField.defaultProps,\n    mode: PICKER_MODES.SINGLE\n  };\n\n  static modes = PICKER_MODES;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      selectedItemPosition: 0\n    };\n\n    if (props.mode === Picker.modes.SINGLE && Array.isArray(props.value)) {\n      console.warn('Picker in SINGLE mode cannot accept an array for value');\n    }\n    if (props.mode === Picker.modes.MULTI && !Array.isArray(props.value)) {\n      console.warn('Picker in MULTI mode must accept an array for value');\n    }\n\n    if (props.useNativePicker && _.isPlainObject(props.value)) {\n      console.warn('UILib Picker: don\\'t use object as value for native picker, use either string or a number');\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nexProps) {\n    this.setState({\n      value: nexProps.value\n    });\n  }\n\n  getAccessibilityInfo() {\n    const {placeholder} = this.props;\n    return {\n      accessibilityLabel: this.getLabel() ? `${placeholder} ${this.getLabel()}` : `Select ${placeholder}`,\n      accessibilityHint: this.getLabel()\n        ? 'Double tap to edit'\n        : `Goes to ${placeholder}. Suggestions will be provided`,\n      ...this.extractAccessibilityProps()\n    };\n  }\n\n  getLabel() {\n    const {value} = this.state;\n\n    if (_.isArray(value)) {\n      return _.chain(value)\n        .map('label')\n        .join(', ')\n        .value();\n    }\n\n    const {getLabel} = this.props;\n    return _.isFunction(getLabel) ? getLabel(value) : _.get(value, 'label');\n  }\n\n  handlePickerOnPress = () => {\n    this.toggleExpandableModal(true);\n    _.invoke(this.props, 'onPress');\n  };\n\n  toggleExpandableModal = value => {\n    this.setState({showExpandableModal: value});\n  };\n\n  toggleItemSelection = item => {\n    const {value} = this.state;\n    const newValue = _.xorBy(value, [item], 'value');\n    this.setState({\n      value: newValue\n    });\n  };\n\n  cancelSelect = () => {\n    this.setState({\n      value: this.props.value\n    });\n    this.toggleExpandableModal(false);\n  };\n\n  onDoneSelecting = item => {\n    this.setState({searchValue: '', value: item}); // clean search when done selecting\n    this.toggleExpandableModal(false);\n    _.invoke(this.props, 'onChange', item);\n  };\n\n  onSearchChange = searchValue => {\n    this.setState({\n      searchValue\n    });\n    _.invoke(this.props, 'onSearchChange', searchValue);\n  };\n\n  onSelectedItemLayout = ({\n    nativeEvent: {\n      layout: {y}\n    }\n  }) => {\n    this.setState({selectedItemPosition: y});\n  };\n\n  appendPropsToChildren = () => {\n    const {children, mode, getItemValue, showSearch, renderItem} = this.props;\n    const {value, searchValue} = this.state;\n    const childrenWithProps = React.Children.map(children, child => {\n      const childValue = PickerPresenter.getItemValue({getItemValue, ...child.props});\n      const childLabel = PickerPresenter.getItemLabel({...child.props, getLabel: child.props.getItemLabel});\n\n      if (!showSearch || _.isEmpty(searchValue) || _.includes(_.lowerCase(childLabel), _.lowerCase(searchValue))) {\n        const selectedValue = PickerPresenter.getItemValue({value, getItemValue});\n        return React.cloneElement(child, {\n          isSelected: PickerPresenter.isItemSelected(childValue, selectedValue),\n          onPress: mode === Picker.modes.MULTI ? this.toggleItemSelection : this.onDoneSelecting,\n          getItemValue: child.props.getItemValue || getItemValue,\n          onSelectedLayout: this.onSelectedItemLayout,\n          renderItem: child.props.renderItem || renderItem,\n          accessibilityHint: 'Double click to select this suggestion'\n        });\n      }\n    });\n\n    return childrenWithProps;\n  };\n\n  renderExpandableModal = () => {\n    const {\n      mode,\n      enableModalBlur,\n      topBarProps,\n      showSearch,\n      searchStyle,\n      searchPlaceholder,\n      renderCustomSearch,\n      renderCustomModal,\n      listProps,\n      testID\n    } = this.getThemeProps();\n    const {showExpandableModal, selectedItemPosition} = this.state;\n    const children = this.appendPropsToChildren(this.props.children);\n\n    if (renderCustomModal) {\n      const modalProps = {\n        visible: showExpandableModal,\n        toggleModal: this.toggleExpandableModal,\n        children\n      };\n\n      return renderCustomModal(modalProps);\n    }\n\n    return (\n      <PickerModal\n        testID={`${testID}.modal`}\n        visible={showExpandableModal}\n        scrollPosition={selectedItemPosition}\n        enableModalBlur={enableModalBlur}\n        topBarProps={{\n          ...topBarProps,\n          onCancel: this.cancelSelect,\n          onDone: mode === Picker.modes.MULTI ? () => this.onDoneSelecting(this.state.value) : undefined\n        }}\n        showSearch={showSearch}\n        searchStyle={searchStyle}\n        searchPlaceholder={searchPlaceholder}\n        onSearchChange={this.onSearchChange}\n        renderCustomSearch={renderCustomSearch}\n        listProps={listProps}\n      >\n        {children}\n      </PickerModal>\n    );\n  };\n\n  render() {\n    const {useNativePicker, renderPicker, customPickerProps, testID} = this.props;\n\n    if (useNativePicker) {\n      return <NativePicker {...this.props}/>;\n    }\n\n    if (_.isFunction(renderPicker)) {\n      const {value} = this.state;\n      return (\n        <View left>\n          <Button {...customPickerProps} link onPress={this.handlePickerOnPress} testID={testID}>\n            {renderPicker(value)}\n          </Button>\n          {this.renderExpandableModal()}\n        </View>\n      );\n    }\n\n    const textInputProps = TextField.extractOwnProps(this.props);\n    const label = this.getLabel();\n    return (\n      <TextField\n        color={Colors.dark10}\n        {...textInputProps}\n        {...this.getAccessibilityInfo()}\n        value={label}\n        expandable\n        renderExpandable={this.renderExpandableModal}\n        onToggleExpandableModal={this.toggleExpandableModal}\n      />\n    );\n  }\n}\n\nPicker.Item = PickerItem;\nexport default Picker;\n"]},"metadata":{},"sourceType":"script"}