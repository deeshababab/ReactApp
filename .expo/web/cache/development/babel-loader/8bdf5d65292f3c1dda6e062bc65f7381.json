{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _style = require(\"../../style\");\n\nvar _BaseInput2 = _interopRequireDefault(require(\"./BaseInput\"));\n\nvar _screensComponents = require(\"../../screensComponents\");\n\nvar _TextArea = _interopRequireDefault(require(\"./TextArea\"));\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _image = _interopRequireDefault(require(\"../image\"));\n\nvar _text = _interopRequireDefault(require(\"../text\"));\n\nvar _touchableOpacity = _interopRequireDefault(require(\"../touchableOpacity\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\inputs\\\\TextField.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar DEFAULT_COLOR_BY_STATE = {\n  default: _style.Colors.dark40,\n  focus: _style.Colors.blue30,\n  error: _style.Colors.red30\n};\nvar DEFAULT_UNDERLINE_COLOR_BY_STATE = {\n  default: _style.Colors.dark70,\n  focus: _style.Colors.blue30,\n  error: _style.Colors.red30\n};\nvar LABEL_TYPOGRAPHY = _style.Typography.text80;\nvar ICON_SIZE = 24;\nvar ICON_RIGHT_PADDING = 3;\nvar ICON_LEFT_PADDING = 6;\n\nvar TextField = function (_BaseInput) {\n  (0, _inherits2.default)(TextField, _BaseInput);\n\n  var _super = _createSuper(TextField);\n\n  function TextField(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TextField);\n    _this = _super.call(this, props);\n\n    _this.onPressRightButton = function () {\n      _lodash.default.invoke(_this.props, 'rightButtonProps.onPress');\n    };\n\n    _this.onDoneEditingExpandableInput = function () {\n      var expandableInputValue = _lodash.default.get(_this.expandableInput, 'state.value');\n\n      _this.setState({\n        value: expandableInputValue\n      });\n\n      _this.state.floatingPlaceholderState.setValue(expandableInputValue ? 1 : 0);\n\n      _lodash.default.invoke(_this.props, 'onChangeText', expandableInputValue);\n\n      _this.toggleExpandableModal(false);\n    };\n\n    _this.onKeyPress = function (event) {\n      _this.lastKey = event.nativeEvent.key;\n\n      _lodash.default.invoke(_this.props, 'onKeyPress', event);\n    };\n\n    _this.onChangeText = function (text) {\n      if (text === '' && _this.lastKey && _this.lastKey !== 'Backspace') {\n        return;\n      }\n\n      var _this$props = _this.props,\n          transformer = _this$props.transformer,\n          validateOnChange = _this$props.validateOnChange;\n      var transformedText = text;\n\n      if (_lodash.default.isFunction(transformer)) {\n        transformedText = transformer(text);\n      }\n\n      _lodash.default.invoke(_this.props, 'onChangeText', transformedText);\n\n      _this.setState({\n        value: transformedText\n      }, function () {\n        if (validateOnChange) {\n          setImmediate(_this.validate);\n        }\n      });\n    };\n\n    _this.updateFloatingPlaceholderState = _this.updateFloatingPlaceholderState.bind((0, _assertThisInitialized2.default)(_this));\n    _this.toggleExpandableModal = _this.toggleExpandableModal.bind((0, _assertThisInitialized2.default)(_this));\n    _this.state = _objectSpread(_objectSpread({}, _this.state), {}, {\n      value: props.value,\n      floatingPlaceholderState: new _reactNative.Animated.Value(_this.shouldFloatPlaceholder(props.value) ? 1 : 0),\n      showExpandableModal: false\n    });\n\n    _this.generatePropsWarnings(props);\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(TextField, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          value: nextProps.value\n        }, this.updateFloatingPlaceholderState);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.value !== this.state.value || prevProps.focused !== this.state.focused) {\n        this.updateFloatingPlaceholderState();\n      }\n    }\n  }, {\n    key: \"generatePropsWarnings\",\n    value: function generatePropsWarnings(props) {\n      if (props.maxLength === 0) {\n        console.warn('Setting maxLength to zero will block typing in this input');\n      }\n\n      if (props.showCharacterCounter && !props.maxLength) {\n        console.warn('In order to use showCharacterCount please pass \\'maxLength\\' prop');\n      }\n    }\n  }, {\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.getThemeProps());\n    }\n  }, {\n    key: \"toggleExpandableModal\",\n    value: function toggleExpandableModal(value) {\n      this.setState({\n        showExpandableModal: value\n      });\n\n      _lodash.default.invoke(this.props, 'onToggleExpandableModal', value);\n    }\n  }, {\n    key: \"updateFloatingPlaceholderState\",\n    value: function updateFloatingPlaceholderState(withoutAnimation) {\n      if (withoutAnimation) {\n        this.state.floatingPlaceholderState.setValue(this.shouldFloatPlaceholder() ? 1 : 0);\n      } else {\n        _reactNative.Animated.spring(this.state.floatingPlaceholderState, {\n          toValue: this.shouldFloatPlaceholder() ? 1 : 0,\n          duration: 150\n        }).start();\n      }\n    }\n  }, {\n    key: \"getPlaceholderText\",\n    value: function getPlaceholderText() {\n      var _this$props2 = this.props,\n          placeholder = _this$props2.placeholder,\n          helperText = _this$props2.helperText;\n      var text = this.shouldFakePlaceholder() ? this.shouldShowHelperText() ? helperText : ' ' : this.shouldShowTopError() && this.shouldShowHelperText() ? helperText : placeholder;\n      return text;\n    }\n  }, {\n    key: \"getStateColor\",\n    value: function getStateColor(colorProp, isUnderline) {\n      var focused = this.state.focused;\n\n      var _this$getThemeProps = this.getThemeProps(),\n          disabledColor = _this$getThemeProps.disabledColor;\n\n      var error = this.getErrorMessage();\n\n      var colorByState = _lodash.default.cloneDeep(isUnderline ? DEFAULT_UNDERLINE_COLOR_BY_STATE : DEFAULT_COLOR_BY_STATE);\n\n      if (this.isDisabled() && disabledColor) {\n        return disabledColor;\n      }\n\n      if (colorProp) {\n        if (_lodash.default.isString(colorProp)) {\n          return colorProp;\n        } else if (_lodash.default.isObject(colorProp)) {\n          _lodash.default.merge(colorByState, colorProp);\n        }\n      }\n\n      var color = colorByState.default;\n\n      if (error && isUnderline) {\n        color = colorByState.error;\n      } else if (focused) {\n        color = colorByState.focus;\n      }\n\n      return color;\n    }\n  }, {\n    key: \"getCharCount\",\n    value: function getCharCount() {\n      var value = this.state.value;\n\n      if (value) {\n        return value.length;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"getTopPaddings\",\n    value: function getTopPaddings() {\n      var _this$getThemeProps2 = this.getThemeProps(),\n          floatingPlaceholder = _this$getThemeProps2.floatingPlaceholder;\n\n      return floatingPlaceholder ? this.shouldShowTopError() ? undefined : 25 : undefined;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      return this.props.editable === false;\n    }\n  }, {\n    key: \"isCounterLimit\",\n    value: function isCounterLimit() {\n      var _this$getThemeProps3 = this.getThemeProps(),\n          maxLength = _this$getThemeProps3.maxLength;\n\n      var counter = this.getCharCount();\n      return counter === 0 ? false : maxLength <= counter;\n    }\n  }, {\n    key: \"hasText\",\n    value: function hasText(value) {\n      return !_lodash.default.isEmpty(value || this.state.value);\n    }\n  }, {\n    key: \"shouldShowHelperText\",\n    value: function shouldShowHelperText() {\n      var focused = this.state.focused;\n      var helperText = this.props.helperText;\n      return focused && helperText;\n    }\n  }, {\n    key: \"shouldFloatOnFocus\",\n    value: function shouldFloatOnFocus() {\n      var focused = this.state.focused;\n\n      var _this$getThemeProps4 = this.getThemeProps(),\n          floatOnFocus = _this$getThemeProps4.floatOnFocus;\n\n      return focused && floatOnFocus;\n    }\n  }, {\n    key: \"shouldFloatPlaceholder\",\n    value: function shouldFloatPlaceholder(text) {\n      return this.hasText(text) || this.shouldShowHelperText() || this.shouldFloatOnFocus();\n    }\n  }, {\n    key: \"shouldFakePlaceholder\",\n    value: function shouldFakePlaceholder() {\n      var _this$getThemeProps5 = this.getThemeProps(),\n          floatingPlaceholder = _this$getThemeProps5.floatingPlaceholder,\n          centered = _this$getThemeProps5.centered;\n\n      return Boolean(floatingPlaceholder && !centered && !this.shouldShowTopError());\n    }\n  }, {\n    key: \"shouldShowError\",\n    value: function shouldShowError() {\n      var _this$getThemeProps6 = this.getThemeProps(),\n          enableErrors = _this$getThemeProps6.enableErrors;\n\n      var error = this.getErrorMessage();\n      return enableErrors && error;\n    }\n  }, {\n    key: \"shouldShowTopError\",\n    value: function shouldShowTopError() {\n      var _this$getThemeProps7 = this.getThemeProps(),\n          useTopErrors = _this$getThemeProps7.useTopErrors;\n\n      return this.shouldShowError() && useTopErrors;\n    }\n  }, {\n    key: \"shouldDisplayRightButton\",\n    value: function shouldDisplayRightButton() {\n      var _this$getThemeProps8 = this.getThemeProps(),\n          rightButtonProps = _this$getThemeProps8.rightButtonProps,\n          expandable = _this$getThemeProps8.expandable;\n\n      return !expandable && rightButtonProps && rightButtonProps.iconSource;\n    }\n  }, {\n    key: \"renderPlaceholder\",\n    value: function renderPlaceholder() {\n      var _this2 = this;\n\n      var floatingPlaceholderState = this.state.floatingPlaceholderState;\n\n      var _this$getThemeProps9 = this.getThemeProps(),\n          expandable = _this$getThemeProps9.expandable,\n          placeholder = _this$getThemeProps9.placeholder,\n          placeholderTextColor = _this$getThemeProps9.placeholderTextColor,\n          floatingPlaceholderColor = _this$getThemeProps9.floatingPlaceholderColor,\n          multiline = _this$getThemeProps9.multiline;\n\n      var typography = this.getTypography();\n      var placeholderColor = this.getStateColor(placeholderTextColor);\n\n      if (this.shouldFakePlaceholder()) {\n        return _react.default.createElement(_reactNative.Animated.Text, {\n          style: [this.styles.floatingPlaceholder, this.styles.placeholder, typography, {\n            top: floatingPlaceholderState.interpolate({\n              inputRange: [0, 1],\n              outputRange: multiline && _helpers.Constants.isIOS ? [30, 5] : [25, 0]\n            }),\n            fontSize: floatingPlaceholderState.interpolate({\n              inputRange: [0, 1],\n              outputRange: [typography.fontSize, LABEL_TYPOGRAPHY.fontSize]\n            }),\n            color: floatingPlaceholderState.interpolate({\n              inputRange: [0, 1],\n              outputRange: [placeholderColor, this.getStateColor(floatingPlaceholderColor)]\n            }),\n            lineHeight: this.shouldFloatPlaceholder() ? LABEL_TYPOGRAPHY.lineHeight : typography.lineHeight\n          }],\n          numberOfLines: 1,\n          onPress: function onPress() {\n            return expandable && _this2.toggleExpandableModal(true);\n          },\n          suppressHighlighting: true,\n          accessible: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 9\n          }\n        }, placeholder);\n      }\n    }\n  }, {\n    key: \"renderTitle\",\n    value: function renderTitle() {\n      var _this$getThemeProps10 = this.getThemeProps(),\n          floatingPlaceholder = _this$getThemeProps10.floatingPlaceholder,\n          title = _this$getThemeProps10.title,\n          titleColor = _this$getThemeProps10.titleColor,\n          titleStyle = _this$getThemeProps10.titleStyle;\n\n      var color = this.getStateColor(titleColor);\n\n      if (!floatingPlaceholder && title) {\n        return _react.default.createElement(_text.default, {\n          style: [{\n            color: color\n          }, this.styles.topLabel, this.styles.label, titleStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 14\n          }\n        }, title);\n      }\n    }\n  }, {\n    key: \"renderCharCounter\",\n    value: function renderCharCounter() {\n      var focused = this.state.focused;\n\n      var _this$getThemeProps11 = this.getThemeProps(),\n          maxLength = _this$getThemeProps11.maxLength,\n          showCharacterCounter = _this$getThemeProps11.showCharacterCounter,\n          disabledColor = _this$getThemeProps11.disabledColor;\n\n      if (maxLength && showCharacterCounter) {\n        var counter = this.getCharCount();\n        var textColor = this.isCounterLimit() && focused ? DEFAULT_COLOR_BY_STATE.error : DEFAULT_COLOR_BY_STATE.default;\n        var color = this.isDisabled() && disabledColor ? disabledColor : textColor;\n        return _react.default.createElement(_text.default, {\n          style: [{\n            color: color\n          }, this.styles.bottomLabel, this.styles.label],\n          accessibilityLabel: counter + \" out of \" + maxLength + \" max characters\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 9\n          }\n        }, counter, \" / \", maxLength);\n      }\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError(visible) {\n      var _this$getThemeProps12 = this.getThemeProps(),\n          enableErrors = _this$getThemeProps12.enableErrors,\n          useTopErrors = _this$getThemeProps12.useTopErrors;\n\n      var positionStyle = useTopErrors ? this.styles.topLabel : this.styles.bottomLabel;\n      var error = this.getErrorMessage();\n\n      if (visible && enableErrors) {\n        return _react.default.createElement(_text.default, {\n          style: [this.styles.errorMessage, this.styles.label, positionStyle],\n          accessible: !_lodash.default.isEmpty(error),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 9\n          }\n        }, error);\n      }\n    }\n  }, {\n    key: \"renderExpandableModal\",\n    value: function renderExpandableModal() {\n      var _this3 = this;\n\n      var _this$getThemeProps13 = this.getThemeProps(),\n          renderExpandable = _this$getThemeProps13.renderExpandable,\n          topBarProps = _this$getThemeProps13.topBarProps;\n\n      var showExpandableModal = this.state.showExpandableModal;\n\n      if (_lodash.default.isFunction(renderExpandable) && showExpandableModal) {\n        return renderExpandable(this.getThemeProps(), this.state);\n      }\n\n      var textInputProps = TextField.extractOwnProps(this.props, 'error');\n      return _react.default.createElement(_screensComponents.Modal, {\n        animationType: 'slide',\n        visible: showExpandableModal,\n        onRequestClose: function onRequestClose() {\n          return _this3.toggleExpandableModal(false);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_screensComponents.Modal.TopBar, (0, _extends2.default)({}, topBarProps, {\n        onCancel: function onCancel() {\n          return _this3.toggleExpandableModal(false);\n        },\n        onDone: this.onDoneEditingExpandableInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 9\n        }\n      })), _react.default.createElement(_view.default, {\n        style: this.styles.expandableModalContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_TextArea.default, (0, _extends2.default)({\n        ref: function ref(textarea) {\n          _this3.expandableInput = textarea;\n        }\n      }, textInputProps, {\n        value: this.state.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }, {\n    key: \"renderExpandableInput\",\n    value: function renderExpandableInput() {\n      var _this4 = this;\n\n      var _this$getThemeProps14 = this.getThemeProps(),\n          renderExpandableInput = _this$getThemeProps14.renderExpandableInput,\n          testID = _this$getThemeProps14.testID;\n\n      if (_lodash.default.isFunction(renderExpandableInput)) {\n        return renderExpandableInput(this.getThemeProps());\n      }\n\n      return _react.default.createElement(_touchableOpacity.default, (0, _extends2.default)({\n        style: this.styles.expandableInput,\n        activeOpacity: 1,\n        onPress: function onPress() {\n          return !_this4.isDisabled() && _this4.toggleExpandableModal(true);\n        },\n        testID: testID + \".expandable\"\n      }, this.extractAccessibilityProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 7\n        }\n      }), this.renderTextInput());\n    }\n  }, {\n    key: \"renderTextInput\",\n    value: function renderTextInput() {\n      var _this5 = this;\n\n      var value = this.state.value;\n\n      var _this$getThemeProps15 = this.getThemeProps(),\n          style = _this$getThemeProps15.style,\n          placeholder = _this$getThemeProps15.placeholder,\n          placeholderTextColor = _this$getThemeProps15.placeholderTextColor,\n          floatingPlaceholder = _this$getThemeProps15.floatingPlaceholder,\n          multiline = _this$getThemeProps15.multiline,\n          hideUnderline = _this$getThemeProps15.hideUnderline,\n          numberOfLines = _this$getThemeProps15.numberOfLines,\n          expandable = _this$getThemeProps15.expandable,\n          rightIconSource = _this$getThemeProps15.rightIconSource,\n          others = (0, _objectWithoutProperties2.default)(_this$getThemeProps15, [\"style\", \"placeholder\", \"placeholderTextColor\", \"floatingPlaceholder\", \"multiline\", \"hideUnderline\", \"numberOfLines\", \"expandable\", \"rightIconSource\"]);\n\n      var typography = this.getTypography();\n      var lineHeight = typography.lineHeight,\n          typographyStyle = (0, _objectWithoutProperties2.default)(typography, [\"lineHeight\"]);\n      var color = this.getStateColor(this.props.color || this.extractColorValue() || this.getThemeProps().color);\n      var hasRightElement = this.shouldDisplayRightButton() || rightIconSource;\n      var inputStyle = [hasRightElement && this.styles.rightElement, this.styles.input, hideUnderline && this.styles.inputWithoutUnderline, _objectSpread({}, typographyStyle), _helpers.Constants.isAndroid && {\n        lineHeight: lineHeight\n      }, expandable && {\n        maxHeight: lineHeight * (_helpers.Constants.isAndroid ? 3 : 3.3)\n      }, _helpers.Constants.isRTL && {\n        minHeight: lineHeight + 3\n      }, color && {\n        color: color\n      }, style];\n      var placeholderText = this.getPlaceholderText();\n      var placeholderColor = this.getStateColor(placeholderTextColor);\n      var shouldUseMultiline = multiline ? multiline : expandable;\n      var isEditable = !this.isDisabled() && !expandable;\n      return _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({\n        accessibilityLabel: floatingPlaceholder ? placeholder : undefined\n      }, others, {\n        accessibilityStates: this.isDisabled() ? ['disabled'] : undefined,\n        value: value,\n        placeholder: placeholderText,\n        placeholderTextColor: placeholderColor,\n        underlineColorAndroid: \"transparent\",\n        style: inputStyle,\n        multiline: shouldUseMultiline,\n        numberOfLines: numberOfLines,\n        onKeyPress: this.onKeyPress,\n        onChangeText: this.onChangeText,\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        ref: function ref(input) {\n          _this5.input = input;\n        },\n        editable: isEditable,\n        pointerEvents: expandable ? 'none' : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"renderRightButton\",\n    value: function renderRightButton() {\n      if (this.shouldDisplayRightButton()) {\n        var _this$getThemeProps16 = this.getThemeProps(),\n            rightButtonProps = _this$getThemeProps16.rightButtonProps;\n\n        var style = rightButtonProps.style,\n            iconSource = rightButtonProps.iconSource,\n            iconColor = rightButtonProps.iconColor;\n        return _react.default.createElement(_touchableOpacity.default, {\n          style: [this.styles.rightButton, style],\n          onPress: this.onPressRightButton,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 9\n          }\n        }, _react.default.createElement(_image.default, {\n          pointerEvents: \"none\",\n          source: iconSource,\n          resizeMode: 'contain',\n          style: [this.styles.rightButtonImage, {\n            tintColor: iconColor || _style.Colors.blue30\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 11\n          }\n        }));\n      }\n    }\n  }, {\n    key: \"renderRightIcon\",\n    value: function renderRightIcon() {\n      var _this$getThemeProps17 = this.getThemeProps(),\n          rightIconSource = _this$getThemeProps17.rightIconSource;\n\n      if (rightIconSource) {\n        return _react.default.createElement(_view.default, {\n          style: this.styles.rightIcon,\n          pointerEvents: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 9\n          }\n        }, _react.default.createElement(_image.default, {\n          source: rightIconSource,\n          resizeMode: 'center',\n          style: this.styles.rightButtonImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 11\n          }\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var margins = this.state.margins;\n\n      var _this$getThemeProps18 = this.getThemeProps(),\n          expandable = _this$getThemeProps18.expandable,\n          containerStyle = _this$getThemeProps18.containerStyle,\n          underlineColor = _this$getThemeProps18.underlineColor,\n          useTopErrors = _this$getThemeProps18.useTopErrors,\n          hideUnderline = _this$getThemeProps18.hideUnderline;\n\n      var underlineStateColor = this.getStateColor(underlineColor, true);\n      return _react.default.createElement(_view.default, {\n        style: [this.styles.container, margins, containerStyle],\n        collapsable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 7\n        }\n      }, this.shouldShowTopError() ? this.renderError(useTopErrors) : this.renderTitle(), _react.default.createElement(_view.default, {\n        style: [this.styles.innerContainer, hideUnderline && this.styles.innerContainerWithoutUnderline, {\n          borderColor: underlineStateColor\n        }, {\n          paddingTop: this.getTopPaddings()\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 9\n        }\n      }, this.renderPlaceholder(), expandable ? this.renderExpandableInput() : this.renderTextInput(), this.renderRightButton(), this.renderRightIcon(), expandable && this.renderExpandableModal()), _react.default.createElement(_view.default, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_view.default, {\n        flex: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }\n      }, this.renderError(!useTopErrors)), this.renderCharCounter()));\n    }\n  }]);\n  return TextField;\n}(_BaseInput2.default);\n\nexports.default = TextField;\nTextField.displayName = 'TextField';\nTextField.propTypes = _objectSpread(_objectSpread(_objectSpread({}, _reactNative.TextInput.propTypes), _BaseInput2.default.propTypes), {}, {\n  floatingPlaceholder: _propTypes.default.bool,\n  floatingPlaceholderColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n  helperText: _propTypes.default.string,\n  hideUnderline: _propTypes.default.bool,\n  underlineColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n  disabledColor: _propTypes.default.string,\n  centered: _propTypes.default.bool,\n  error: _propTypes.default.string,\n  enableErrors: _propTypes.default.bool,\n  expandable: _propTypes.default.bool,\n  renderExpandableInput: _propTypes.default.func,\n  renderExpandable: _propTypes.default.func,\n  onToggleExpandableModal: _propTypes.default.func,\n  topBarProps: _propTypes.default.shape(_screensComponents.Modal.TopBar.propTypes),\n  transformer: _propTypes.default.func,\n  title: _propTypes.default.string,\n  titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n  titleStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),\n  showCharacterCounter: _propTypes.default.bool,\n  floatOnFocus: _propTypes.default.bool,\n  useTopErrors: _propTypes.default.bool,\n  rightIconSource: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number]),\n  rightButtonProps: _propTypes.default.shape({\n    iconSource: _propTypes.default.number,\n    iconColor: _propTypes.default.string,\n    onPress: _propTypes.default.func,\n    style: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number])\n  })\n});\nTextField.defaultProps = {\n  placeholderTextColor: DEFAULT_COLOR_BY_STATE.default,\n  enableErrors: true,\n  validateOnBlur: true\n};\n\nfunction createStyles(_ref) {\n  var placeholderTextColor = _ref.placeholderTextColor,\n      centered = _ref.centered,\n      multiline = _ref.multiline,\n      expandable = _ref.expandable;\n  var inputTextAlign = _helpers.Constants.isRTL ? 'right' : 'left';\n  return _reactNative.StyleSheet.create({\n    container: {},\n    innerContainer: {\n      flexGrow: 1,\n      flexDirection: 'row',\n      justifyContent: centered ? 'center' : undefined,\n      borderBottomWidth: 1,\n      borderColor: _style.Colors.dark70\n    },\n    innerContainerWithoutUnderline: {\n      borderBottomWidth: 0\n    },\n    input: {\n      flexGrow: 1,\n      textAlign: centered ? 'center' : inputTextAlign,\n      backgroundColor: 'transparent',\n      marginBottom: _helpers.Constants.isIOS ? 10 : 5,\n      padding: 0,\n      textAlignVertical: 'top',\n      borderColor: 'transparent',\n      borderWidth: 1\n    },\n    expandableInput: {\n      flexGrow: 1,\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    inputWithoutUnderline: {\n      marginBottom: undefined\n    },\n    expandableModalContent: {\n      flex: 1,\n      paddingTop: 15,\n      paddingHorizontal: 20\n    },\n    floatingPlaceholder: {\n      position: 'absolute',\n      width: '100%',\n      backgroundColor: 'transparent'\n    },\n    placeholder: {\n      color: placeholderTextColor,\n      textAlign: 'left'\n    },\n    errorMessage: {\n      color: _style.Colors.red30,\n      textAlign: centered ? 'center' : undefined\n    },\n    topLabel: {\n      marginBottom: _helpers.Constants.isIOS ? multiline ? 1 : 6 : 7\n    },\n    bottomLabel: {\n      marginTop: 1\n    },\n    label: _objectSpread(_objectSpread({}, LABEL_TYPOGRAPHY), {}, {\n      height: LABEL_TYPOGRAPHY.lineHeight\n    }),\n    rightElement: {\n      paddingRight: ICON_SIZE + ICON_RIGHT_PADDING + ICON_LEFT_PADDING\n    },\n    rightIcon: {\n      position: 'absolute',\n      right: ICON_RIGHT_PADDING,\n      alignSelf: 'flex-end',\n      paddingBottom: expandable ? 14 : 8\n    },\n    rightButton: {\n      position: 'absolute',\n      right: ICON_RIGHT_PADDING,\n      alignSelf: 'center'\n    },\n    rightButtonImage: {\n      width: ICON_SIZE,\n      height: ICON_SIZE\n    }\n  });\n}","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/inputs/TextField.js"],"names":["DEFAULT_COLOR_BY_STATE","default","Colors","dark40","focus","blue30","error","red30","DEFAULT_UNDERLINE_COLOR_BY_STATE","dark70","LABEL_TYPOGRAPHY","Typography","text80","ICON_SIZE","ICON_RIGHT_PADDING","ICON_LEFT_PADDING","TextField","props","onPressRightButton","_","invoke","onDoneEditingExpandableInput","expandableInputValue","get","expandableInput","setState","value","state","floatingPlaceholderState","setValue","toggleExpandableModal","onKeyPress","event","lastKey","nativeEvent","key","onChangeText","text","transformer","validateOnChange","transformedText","isFunction","setImmediate","validate","updateFloatingPlaceholderState","bind","Animated","Value","shouldFloatPlaceholder","showExpandableModal","generatePropsWarnings","nextProps","prevProps","prevState","focused","maxLength","console","warn","showCharacterCounter","styles","createStyles","getThemeProps","withoutAnimation","spring","toValue","duration","start","placeholder","helperText","shouldFakePlaceholder","shouldShowHelperText","shouldShowTopError","colorProp","isUnderline","disabledColor","getErrorMessage","colorByState","cloneDeep","isDisabled","isString","isObject","merge","color","length","floatingPlaceholder","undefined","editable","counter","getCharCount","isEmpty","floatOnFocus","hasText","shouldFloatOnFocus","centered","Boolean","enableErrors","useTopErrors","shouldShowError","rightButtonProps","expandable","iconSource","placeholderTextColor","floatingPlaceholderColor","multiline","typography","getTypography","placeholderColor","getStateColor","top","interpolate","inputRange","outputRange","Constants","isIOS","fontSize","lineHeight","title","titleColor","titleStyle","topLabel","label","textColor","isCounterLimit","bottomLabel","visible","positionStyle","errorMessage","renderExpandable","topBarProps","textInputProps","extractOwnProps","expandableModalContent","textarea","renderExpandableInput","testID","extractAccessibilityProps","renderTextInput","style","hideUnderline","numberOfLines","rightIconSource","others","typographyStyle","extractColorValue","hasRightElement","shouldDisplayRightButton","inputStyle","rightElement","input","inputWithoutUnderline","isAndroid","maxHeight","isRTL","minHeight","placeholderText","getPlaceholderText","shouldUseMultiline","isEditable","onChange","onFocus","onBlur","iconColor","rightButton","rightButtonImage","tintColor","rightIcon","margins","containerStyle","underlineColor","underlineStateColor","container","renderError","renderTitle","innerContainer","innerContainerWithoutUnderline","borderColor","paddingTop","getTopPaddings","renderPlaceholder","renderRightButton","renderRightIcon","renderExpandableModal","renderCharCounter","BaseInput","displayName","propTypes","RNTextInput","PropTypes","bool","oneOfType","string","object","func","onToggleExpandableModal","shape","Modal","TopBar","number","array","onPress","defaultProps","validateOnBlur","inputTextAlign","StyleSheet","create","flexGrow","flexDirection","justifyContent","borderBottomWidth","textAlign","backgroundColor","marginBottom","padding","textAlignVertical","borderWidth","alignItems","flex","paddingHorizontal","position","width","marginTop","height","paddingRight","right","alignSelf","paddingBottom"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, Animated, TextInput as RNTextInput} from 'react-native';\nimport {Constants} from '../../helpers';\nimport {Colors, Typography} from '../../style';\nimport BaseInput from './BaseInput';\nimport {Modal} from '../../screensComponents';\nimport TextArea from './TextArea';\nimport View from '../view';\nimport Image from '../image';\nimport Text from '../text';\nimport TouchableOpacity from '../touchableOpacity';\n\nconst DEFAULT_COLOR_BY_STATE = {\n  default: Colors.dark40,\n  focus: Colors.blue30,\n  error: Colors.red30\n};\nconst DEFAULT_UNDERLINE_COLOR_BY_STATE = {\n  default: Colors.dark70,\n  focus: Colors.blue30,\n  error: Colors.red30\n};\nconst LABEL_TYPOGRAPHY = Typography.text80;\nconst ICON_SIZE = 24;\nconst ICON_RIGHT_PADDING = 3;\nconst ICON_LEFT_PADDING = 6;\n\n/**\n * @description: A wrapper for TextInput component with extra functionality like floating placeholder\n * @modifiers: Typography\n * @extends: TextInput\n * @extendslink: https://facebook.github.io/react-native/docs/textinput.html\n * @gif: https://media.giphy.com/media/xULW8su8Cs5Z9Fq4PS/giphy.gif, https://media.giphy.com/media/3ohc1dhDcLS9FvWLJu/giphy.gif, https://media.giphy.com/media/oNUSOxnHdMP5ZnKYsh/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/InputsScreen.js\n */\nexport default class TextField extends BaseInput {\n  static displayName = 'TextField';\n\n  static propTypes = {\n    ...RNTextInput.propTypes,\n    ...BaseInput.propTypes,\n    /**\n     * should placeholder have floating behavior\n     */\n    floatingPlaceholder: PropTypes.bool,\n    /**\n     * floating placeholder color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue'}\n     */\n    floatingPlaceholderColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * This text will appear as a placeholder when the textInput becomes focused, only when passing floatingPlaceholder\n     * as well (NOT for expandable textInputs)\n     */\n    helperText: PropTypes.string,\n    /**\n     * hide text input underline, by default false\n     */\n    hideUnderline: PropTypes.bool,\n    /**\n     * underline color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue'}\n     */\n    underlineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * the color of all text when the input is disabled (if undefined will not apply color)\n     */\n    disabledColor: PropTypes.string,\n    /**\n     * should text input be align to center\n     */\n    centered: PropTypes.bool,\n    /**\n     * input error message, should be empty if no error exists\n     */\n    error: PropTypes.string,\n    /**\n     * should the input component support error messages\n     */\n    enableErrors: PropTypes.bool,\n    /**\n     * should the input expand to another text area modal\n     */\n    expandable: PropTypes.bool,\n    /**\n     * Render custom expandable input (requires expandable to be true)\n     */\n    renderExpandableInput: PropTypes.func,\n    /**\n     * allow custom rendering of expandable content when clicking on the input (useful for pickers)\n     * accept props and state as params, ex. (props, state) => {...}\n     * use toggleExpandableModal(false) method to toggle off the expandable content\n     */\n    renderExpandable: PropTypes.func,\n    /**\n     * Callback for the modal toggle. Pass with renderExpandable to control the modal toggle\n     */\n    onToggleExpandableModal: PropTypes.func,\n    /**\n     * The picker modal top bar props\n     */\n    topBarProps: PropTypes.shape(Modal.TopBar.propTypes),\n    /**\n     * transform function executed on value and return transformed value\n     */\n    transformer: PropTypes.func,\n    /**\n     * Fixed title that will displayed above the input (note: floatingPlaceholder MUST be 'false')\n     */\n    title: PropTypes.string,\n    /**\n     * The title's color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue'}\n     */\n    titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * Additional styles for the title (not including 'color')\n     */\n    titleStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * should the input display a character counter (only when passing 'maxLength')\n     */\n    showCharacterCounter: PropTypes.bool,\n    /**\n     * should float the placeholder when focused (instead of when typing)\n     */\n    floatOnFocus: PropTypes.bool,\n    /**\n     * should the errors be displayed at the top\n     */\n    useTopErrors: PropTypes.bool,\n    /**\n     * Icon asset source for showing on the right side, appropriate for dropdown icon and such\n     */\n    rightIconSource: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * Props for the right button {iconSource, onPress, style}\n     */\n    rightButtonProps: PropTypes.shape({\n      iconSource: PropTypes.number,\n      iconColor: PropTypes.string,\n      onPress: PropTypes.func,\n      style: PropTypes.oneOfType([PropTypes.object, PropTypes.number])\n    })\n  };\n\n  static defaultProps = {\n    placeholderTextColor: DEFAULT_COLOR_BY_STATE.default,\n    enableErrors: true,\n    validateOnBlur: true\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.updateFloatingPlaceholderState = this.updateFloatingPlaceholderState.bind(this);\n    this.toggleExpandableModal = this.toggleExpandableModal.bind(this);\n\n    this.state = {\n      ...this.state,\n      value: props.value, // for floatingPlaceholder functionality\n      floatingPlaceholderState: new Animated.Value(this.shouldFloatPlaceholder(props.value) ? 1 : 0),\n      showExpandableModal: false\n    };\n\n    this.generatePropsWarnings(props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({value: nextProps.value}, this.updateFloatingPlaceholderState);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.value !== this.state.value || prevProps.focused !== this.state.focused) {\n      this.updateFloatingPlaceholderState();\n    }\n  }\n\n  /** Actions */\n  generatePropsWarnings(props) {\n    if (props.maxLength === 0) {\n      console.warn('Setting maxLength to zero will block typing in this input');\n    }\n    if (props.showCharacterCounter && !props.maxLength) {\n      console.warn('In order to use showCharacterCount please pass \\'maxLength\\' prop');\n    }\n  }\n\n  generateStyles() {\n    this.styles = createStyles(this.getThemeProps());\n  }\n\n  toggleExpandableModal(value) {\n    this.setState({showExpandableModal: value});\n    _.invoke(this.props, 'onToggleExpandableModal', value);\n  }\n\n  updateFloatingPlaceholderState(withoutAnimation) {\n    if (withoutAnimation) {\n      this.state.floatingPlaceholderState.setValue(this.shouldFloatPlaceholder() ? 1 : 0);\n    } else {\n      Animated.spring(this.state.floatingPlaceholderState, {\n        toValue: this.shouldFloatPlaceholder() ? 1 : 0,\n        duration: 150\n      }).start();\n    }\n  }\n\n  getPlaceholderText() {\n    // HACK: passing whitespace instead of undefined. Issue fixed in RN56\n    const {placeholder, helperText} = this.props;\n    const text = this.shouldFakePlaceholder()\n      ? this.shouldShowHelperText()\n        ? helperText\n        : ' '\n      : this.shouldShowTopError() && this.shouldShowHelperText()\n        ? helperText\n        : placeholder;\n    return text;\n  }\n\n  getStateColor(colorProp, isUnderline) {\n    const {focused} = this.state;\n    const {disabledColor} = this.getThemeProps();\n    const error = this.getErrorMessage();\n    const colorByState = _.cloneDeep(isUnderline ? DEFAULT_UNDERLINE_COLOR_BY_STATE : DEFAULT_COLOR_BY_STATE);\n\n    if (this.isDisabled() && disabledColor) {\n      return disabledColor;\n    }\n\n    if (colorProp) {\n      if (_.isString(colorProp)) {\n        // use given color for any state\n        return colorProp;\n      } else if (_.isObject(colorProp)) {\n        // set given colors by states\n        _.merge(colorByState, colorProp);\n      }\n    }\n\n    // return the right color for the current state\n    let color = colorByState.default;\n    if (error && isUnderline) {\n      color = colorByState.error;\n    } else if (focused) {\n      color = colorByState.focus;\n    }\n    return color;\n  }\n\n  getCharCount() {\n    const {value} = this.state;\n    if (value) {\n      return value.length;\n    }\n    return 0;\n  }\n\n  getTopPaddings() {\n    const {floatingPlaceholder} = this.getThemeProps();\n    return floatingPlaceholder ? (this.shouldShowTopError() ? undefined : 25) : undefined;\n  }\n\n  isDisabled() {\n    return this.props.editable === false;\n  }\n\n  isCounterLimit() {\n    const {maxLength} = this.getThemeProps();\n    const counter = this.getCharCount();\n    return counter === 0 ? false : maxLength <= counter;\n  }\n\n  hasText(value) {\n    return !_.isEmpty(value || this.state.value);\n  }\n\n  shouldShowHelperText() {\n    const {focused} = this.state;\n    const {helperText} = this.props;\n    return focused && helperText;\n  }\n\n  shouldFloatOnFocus() {\n    const {focused} = this.state;\n    const {floatOnFocus} = this.getThemeProps();\n    return focused && floatOnFocus;\n  }\n\n  shouldFloatPlaceholder(text) {\n    return this.hasText(text) || this.shouldShowHelperText() || this.shouldFloatOnFocus();\n  }\n\n  shouldFakePlaceholder() {\n    const {floatingPlaceholder, centered} = this.getThemeProps();\n    return Boolean(floatingPlaceholder && !centered && !this.shouldShowTopError());\n  }\n\n  shouldShowError() {\n    const {enableErrors} = this.getThemeProps();\n    const error = this.getErrorMessage();\n\n    return enableErrors && error;\n  }\n\n  shouldShowTopError() {\n    const {useTopErrors} = this.getThemeProps();\n    return this.shouldShowError() && useTopErrors;\n  }\n\n  shouldDisplayRightButton() {\n    const {rightButtonProps, expandable} = this.getThemeProps();\n    return !expandable && rightButtonProps && rightButtonProps.iconSource;\n  }\n\n  onPressRightButton = () => {\n    _.invoke(this.props, 'rightButtonProps.onPress');\n  };\n\n  /** Renders */\n  renderPlaceholder() {\n    const {floatingPlaceholderState} = this.state;\n    const {expandable, placeholder, placeholderTextColor, floatingPlaceholderColor, multiline} = this.getThemeProps();\n    const typography = this.getTypography();\n    const placeholderColor = this.getStateColor(placeholderTextColor);\n\n    if (this.shouldFakePlaceholder()) {\n      return (\n        <Animated.Text\n          style={[\n            this.styles.floatingPlaceholder,\n            this.styles.placeholder,\n            typography,\n            {\n              top: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: multiline && Constants.isIOS ? [30, 5] : [25, 0]\n              }),\n              fontSize: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: [typography.fontSize, LABEL_TYPOGRAPHY.fontSize]\n              }),\n              color: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: [placeholderColor, this.getStateColor(floatingPlaceholderColor)]\n              }),\n              lineHeight: this.shouldFloatPlaceholder() ? LABEL_TYPOGRAPHY.lineHeight : typography.lineHeight\n            }\n          ]}\n          numberOfLines={1}\n          onPress={() => expandable && this.toggleExpandableModal(true)}\n          suppressHighlighting\n          accessible={false}\n        >\n          {placeholder}\n        </Animated.Text>\n      );\n    }\n  }\n\n  renderTitle() {\n    const {floatingPlaceholder, title, titleColor, titleStyle} = this.getThemeProps();\n    const color = this.getStateColor(titleColor);\n\n    if (!floatingPlaceholder && title) {\n      return <Text style={[{color}, this.styles.topLabel, this.styles.label, titleStyle]}>{title}</Text>;\n    }\n  }\n\n  renderCharCounter() {\n    const {focused} = this.state;\n    const {maxLength, showCharacterCounter, disabledColor} = this.getThemeProps();\n\n    if (maxLength && showCharacterCounter) {\n      const counter = this.getCharCount();\n      const textColor =\n        this.isCounterLimit() && focused ? DEFAULT_COLOR_BY_STATE.error : DEFAULT_COLOR_BY_STATE.default;\n      const color = this.isDisabled() && disabledColor ? disabledColor : textColor;\n\n      return (\n        <Text\n          style={[{color}, this.styles.bottomLabel, this.styles.label]}\n          accessibilityLabel={`${counter} out of ${maxLength} max characters`}\n        >\n          {counter} / {maxLength}\n        </Text>\n      );\n    }\n  }\n\n  renderError(visible) {\n    const {enableErrors, useTopErrors} = this.getThemeProps();\n    const positionStyle = useTopErrors ? this.styles.topLabel : this.styles.bottomLabel;\n    const error = this.getErrorMessage();\n\n    if (visible && enableErrors) {\n      return (\n        <Text style={[this.styles.errorMessage, this.styles.label, positionStyle]} accessible={!_.isEmpty(error)}>\n          {error}\n        </Text>\n      );\n    }\n  }\n\n  renderExpandableModal() {\n    const {renderExpandable, topBarProps} = this.getThemeProps();\n    const {showExpandableModal} = this.state;\n\n    if (_.isFunction(renderExpandable) && showExpandableModal) {\n      return renderExpandable(this.getThemeProps(), this.state);\n    }\n\n    const textInputProps = TextField.extractOwnProps(this.props, 'error');\n\n    return (\n      <Modal\n        animationType={'slide'}\n        visible={showExpandableModal}\n        onRequestClose={() => this.toggleExpandableModal(false)}\n      >\n        <Modal.TopBar\n          {...topBarProps}\n          onCancel={() => this.toggleExpandableModal(false)}\n          onDone={this.onDoneEditingExpandableInput}\n        />\n        <View style={this.styles.expandableModalContent}>\n          <TextArea\n            ref={textarea => {\n              this.expandableInput = textarea;\n            }}\n            {...textInputProps}\n            value={this.state.value}\n          />\n        </View>\n      </Modal>\n    );\n  }\n\n  renderExpandableInput() {\n    const {renderExpandableInput, testID} = this.getThemeProps();\n\n    if (_.isFunction(renderExpandableInput)) {\n      return renderExpandableInput(this.getThemeProps());\n    }\n\n    return (\n      <TouchableOpacity\n        style={this.styles.expandableInput}\n        activeOpacity={1}\n        onPress={() => !this.isDisabled() && this.toggleExpandableModal(true)}\n        testID={`${testID}.expandable`}\n        {...this.extractAccessibilityProps()}\n      >\n        {this.renderTextInput()}\n      </TouchableOpacity>\n    );\n  }\n\n  renderTextInput() {\n    const {value} = this.state; // value set on state for floatingPlaceholder functionality\n    const {\n      style,\n      placeholder,\n      placeholderTextColor,\n      floatingPlaceholder,\n      multiline,\n      hideUnderline,\n      numberOfLines,\n      expandable,\n      rightIconSource,\n      ...others\n    } = this.getThemeProps();\n    const typography = this.getTypography();\n    const {lineHeight, ...typographyStyle} = typography;\n    // color priority is: user's color prop, then modifiers, then theme props.\n    const color = this.getStateColor(this.props.color || this.extractColorValue() || this.getThemeProps().color);\n    const hasRightElement = this.shouldDisplayRightButton() || rightIconSource;\n    const inputStyle = [\n      hasRightElement && this.styles.rightElement,\n      this.styles.input,\n      hideUnderline && this.styles.inputWithoutUnderline,\n      {...typographyStyle},\n      Constants.isAndroid && {lineHeight},\n      expandable && {maxHeight: lineHeight * (Constants.isAndroid ? 3 : 3.3)},\n      Constants.isRTL && {minHeight: lineHeight + 3},\n      color && {color},\n      style\n    ];\n    const placeholderText = this.getPlaceholderText();\n    const placeholderColor = this.getStateColor(placeholderTextColor);\n    const shouldUseMultiline = multiline ? multiline : expandable;\n    const isEditable = !this.isDisabled() && !expandable;\n\n    return (\n      <RNTextInput\n        accessibilityLabel={floatingPlaceholder ? placeholder : undefined}\n        {...others}\n        accessibilityStates={this.isDisabled() ? ['disabled'] : undefined}\n        value={value}\n        placeholder={placeholderText}\n        placeholderTextColor={placeholderColor}\n        underlineColorAndroid=\"transparent\"\n        style={inputStyle}\n        multiline={shouldUseMultiline}\n        numberOfLines={numberOfLines}\n        onKeyPress={this.onKeyPress}\n        onChangeText={this.onChangeText}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        ref={input => {\n          this.input = input;\n        }}\n        editable={isEditable}\n        pointerEvents={expandable ? 'none' : undefined}\n      />\n    );\n  }\n\n  renderRightButton() {\n    if (this.shouldDisplayRightButton()) {\n      const {rightButtonProps} = this.getThemeProps();\n      const {style, iconSource, iconColor} = rightButtonProps;\n\n      return (\n        <TouchableOpacity style={[this.styles.rightButton, style]} onPress={this.onPressRightButton}>\n          <Image\n            pointerEvents=\"none\"\n            source={iconSource}\n            resizeMode={'contain'}\n            style={[this.styles.rightButtonImage, {tintColor: iconColor || Colors.blue30}]}\n          />\n        </TouchableOpacity>\n      );\n    }\n  }\n\n  renderRightIcon() {\n    const {rightIconSource} = this.getThemeProps();\n\n    if (rightIconSource) {\n      return (\n        <View style={this.styles.rightIcon} pointerEvents=\"none\">\n          <Image source={rightIconSource} resizeMode={'center'} style={this.styles.rightButtonImage}/>\n        </View>\n      );\n    }\n  }\n\n  render() {\n    const {margins} = this.state;\n    const {expandable, containerStyle, underlineColor, useTopErrors, hideUnderline} = this.getThemeProps();\n    const underlineStateColor = this.getStateColor(underlineColor, true);\n\n    return (\n      <View style={[this.styles.container, margins, containerStyle]} collapsable={false}>\n        {this.shouldShowTopError() ? this.renderError(useTopErrors) : this.renderTitle()}\n\n        <View\n          style={[\n            this.styles.innerContainer,\n            hideUnderline && this.styles.innerContainerWithoutUnderline,\n            {borderColor: underlineStateColor},\n            {paddingTop: this.getTopPaddings()}\n          ]}\n        >\n          {this.renderPlaceholder()}\n          {expandable ? this.renderExpandableInput() : this.renderTextInput()}\n          {this.renderRightButton()}\n          {this.renderRightIcon()}\n          {expandable && this.renderExpandableModal()}\n        </View>\n\n        <View row>\n          <View flex>{this.renderError(!useTopErrors)}</View>\n          {this.renderCharCounter()}\n        </View>\n      </View>\n    );\n  }\n\n  /** Events */\n  onDoneEditingExpandableInput = () => {\n    const expandableInputValue = _.get(this.expandableInput, 'state.value');\n    this.setState({value: expandableInputValue});\n    this.state.floatingPlaceholderState.setValue(expandableInputValue ? 1 : 0);\n    _.invoke(this.props, 'onChangeText', expandableInputValue);\n    this.toggleExpandableModal(false);\n  };\n\n  onKeyPress = event => {\n    this.lastKey = event.nativeEvent.key;\n    _.invoke(this.props, 'onKeyPress', event);\n  };\n\n  onChangeText = text => {\n    // when character count exceeds maxLength text will be empty string.\n    // HACK: To avoid setting state value to '' we check the source of that deletion\n    if (text === '' && this.lastKey && this.lastKey !== 'Backspace') {\n      return;\n    }\n\n    const {transformer, validateOnChange} = this.props;\n    let transformedText = text;\n    if (_.isFunction(transformer)) {\n      transformedText = transformer(text);\n    }\n\n    _.invoke(this.props, 'onChangeText', transformedText);\n    this.setState({value: transformedText}, () => {\n      if (validateOnChange) {\n        setImmediate(this.validate);\n      }\n    });\n  };\n}\n\nfunction createStyles({placeholderTextColor, centered, multiline, expandable}) {\n  const inputTextAlign = Constants.isRTL ? 'right' : 'left';\n\n  return StyleSheet.create({\n    container: {},\n    innerContainer: {\n      flexGrow: 1,\n      flexDirection: 'row',\n      justifyContent: centered ? 'center' : undefined,\n      borderBottomWidth: 1,\n      borderColor: Colors.dark70\n    },\n    innerContainerWithoutUnderline: {\n      borderBottomWidth: 0\n    },\n    input: {\n      flexGrow: 1,\n      textAlign: centered ? 'center' : inputTextAlign,\n      backgroundColor: 'transparent',\n      marginBottom: Constants.isIOS ? 10 : 5,\n      padding: 0, // for Android\n      textAlignVertical: 'top', // for Android (not working)\n      borderColor: 'transparent', // borderColor+borderWidth is a fix for collapsing issue on Android\n      borderWidth: 1\n    },\n    expandableInput: {\n      flexGrow: 1,\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    inputWithoutUnderline: {\n      marginBottom: undefined\n    },\n    expandableModalContent: {\n      flex: 1,\n      paddingTop: 15,\n      paddingHorizontal: 20\n    },\n    floatingPlaceholder: {\n      position: 'absolute',\n      width: '100%',\n      backgroundColor: 'transparent'\n    },\n    placeholder: {\n      color: placeholderTextColor,\n      textAlign: 'left'\n    },\n    errorMessage: {\n      color: Colors.red30,\n      textAlign: centered ? 'center' : undefined\n    },\n    topLabel: {\n      marginBottom: Constants.isIOS ? (multiline ? 1 : 6) : 7\n    },\n    bottomLabel: {\n      marginTop: 1\n    },\n    label: {\n      ...LABEL_TYPOGRAPHY,\n      height: LABEL_TYPOGRAPHY.lineHeight\n    },\n    rightElement: {\n      paddingRight: ICON_SIZE + ICON_RIGHT_PADDING + ICON_LEFT_PADDING\n    },\n    rightIcon: {\n      position: 'absolute',\n      right: ICON_RIGHT_PADDING,\n      alignSelf: 'flex-end',\n      paddingBottom: expandable ? 14 : 8\n    },\n    rightButton: {\n      position: 'absolute',\n      right: ICON_RIGHT_PADDING,\n      alignSelf: 'center'\n    },\n    rightButtonImage: {\n      width: ICON_SIZE,\n      height: ICON_SIZE\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}