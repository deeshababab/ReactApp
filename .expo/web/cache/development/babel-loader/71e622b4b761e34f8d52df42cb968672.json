{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _colors = _interopRequireDefault(require(\"./colors\"));\n\nvar ThemeManager = function () {\n  function ThemeManager() {\n    (0, _classCallCheck2.default)(this, ThemeManager);\n    this.theme = {\n      primaryColor: _colors.default.blue30,\n      CTA: {\n        textColor: _colors.default.white,\n        disabledColor: _colors.default.dark60,\n        backgroundColor: _colors.default.blue30\n      },\n      titleColor: _colors.default.dark10,\n      subtitleColor: _colors.default.dark40,\n      dividerColor: _colors.default.dark70,\n      components: {\n        TouchableOpacity: {\n          throttleTime: 0,\n          throttleOptions: {\n            leading: true,\n            trailing: false\n          }\n        }\n      }\n    };\n  }\n\n  (0, _createClass2.default)(ThemeManager, [{\n    key: \"setTheme\",\n    value: function setTheme(overrides) {\n      this.theme = _lodash.default.merge(this.theme, overrides);\n    }\n  }, {\n    key: \"getTheme\",\n    value: function getTheme() {\n      return this.theme;\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      if (key === 'components') {\n        throw new Error('Overriding the \"components\" key is not possible.');\n      }\n\n      _lodash.default.set(this.theme, key, value);\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return _lodash.default.get(this.theme, key);\n    }\n  }, {\n    key: \"setComponentTheme\",\n    value: function setComponentTheme(componentName, overrides) {\n      if (_lodash.default.isFunction(overrides)) {\n        this.theme.components[componentName] = overrides;\n      } else {\n        this.theme.components[componentName] = _lodash.default.cloneDeep(overrides);\n      }\n    }\n  }, {\n    key: \"components\",\n    get: function get() {\n      return this.theme.components;\n    }\n  }, {\n    key: \"primaryColor\",\n    get: function get() {\n      return this.theme.primaryColor;\n    }\n  }, {\n    key: \"CTATextColor\",\n    get: function get() {\n      return this.theme.CTA.textColor;\n    }\n  }, {\n    key: \"CTADisabledColor\",\n    get: function get() {\n      return this.theme.CTA.disabledColor;\n    }\n  }, {\n    key: \"CTABackgroundColor\",\n    get: function get() {\n      return this.theme.CTA.backgroundColor;\n    }\n  }, {\n    key: \"titleColor\",\n    get: function get() {\n      return this.theme.titleColor;\n    }\n  }, {\n    key: \"subtitleColor\",\n    get: function get() {\n      return this.theme.subtitleColor;\n    }\n  }, {\n    key: \"dividerColor\",\n    get: function get() {\n      return this.theme.dividerColor;\n    }\n  }]);\n  return ThemeManager;\n}();\n\nvar _default = new ThemeManager();\n\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/style/themeManager.js"],"names":["ThemeManager","theme","primaryColor","Colors","blue30","CTA","textColor","white","disabledColor","dark60","backgroundColor","titleColor","dark10","subtitleColor","dark40","dividerColor","dark70","components","TouchableOpacity","throttleTime","throttleOptions","leading","trailing","overrides","_","merge","key","value","Error","set","get","componentName","isFunction","cloneDeep"],"mappings":";;;;;;;;;;;AAAA;;AACA;;IAEMA,Y;;;SACJC,K,GAAQ;AACNC,MAAAA,YAAY,EAAEC,gBAAOC,MADf;AAENC,MAAAA,GAAG,EAAE;AACHC,QAAAA,SAAS,EAAEH,gBAAOI,KADf;AAEHC,QAAAA,aAAa,EAAEL,gBAAOM,MAFnB;AAGHC,QAAAA,eAAe,EAAEP,gBAAOC;AAHrB,OAFC;AAONO,MAAAA,UAAU,EAAER,gBAAOS,MAPb;AAQNC,MAAAA,aAAa,EAAEV,gBAAOW,MARhB;AASNC,MAAAA,YAAY,EAAEZ,gBAAOa,MATf;AAUNC,MAAAA,UAAU,EAAE;AACVC,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,YAAY,EAAE,CADE;AAEhBC,UAAAA,eAAe,EAAE;AAACC,YAAAA,OAAO,EAAE,IAAV;AAAgBC,YAAAA,QAAQ,EAAE;AAA1B;AAFD;AADR;AAVN,K;;;;;6BAkBCC,S,EAAW;AAClB,WAAKtB,KAAL,GAAauB,gBAAEC,KAAF,CAAQ,KAAKxB,KAAb,EAAoBsB,SAApB,CAAb;AACD;;;+BAEU;AACT,aAAO,KAAKtB,KAAZ;AACD;;;4BAEOyB,G,EAAKC,K,EAAO;AAClB,UAAID,GAAG,KAAK,YAAZ,EAA0B;AACxB,cAAM,IAAIE,KAAJ,CAAU,kDAAV,CAAN;AACD;;AAEDJ,sBAAEK,GAAF,CAAM,KAAK5B,KAAX,EAAkByB,GAAlB,EAAuBC,KAAvB;AACD;;;4BAEOD,G,EAAK;AAEX,aAAOF,gBAAEM,GAAF,CAAM,KAAK7B,KAAX,EAAkByB,GAAlB,CAAP;AACD;;;sCAEiBK,a,EAAeR,S,EAAW;AAC1C,UAAIC,gBAAEQ,UAAF,CAAaT,SAAb,CAAJ,EAA6B;AAC3B,aAAKtB,KAAL,CAAWgB,UAAX,CAAsBc,aAAtB,IAAuCR,SAAvC;AACD,OAFD,MAEO;AACL,aAAKtB,KAAL,CAAWgB,UAAX,CAAsBc,aAAtB,IAAuCP,gBAAES,SAAF,CAAYV,SAAZ,CAAvC;AACD;AACF;;;wBAEgB;AACf,aAAO,KAAKtB,KAAL,CAAWgB,UAAlB;AACD;;;wBAEkB;AACjB,aAAO,KAAKhB,KAAL,CAAWC,YAAlB;AACD;;;wBAEkB;AACjB,aAAO,KAAKD,KAAL,CAAWI,GAAX,CAAeC,SAAtB;AACD;;;wBAEsB;AACrB,aAAO,KAAKL,KAAL,CAAWI,GAAX,CAAeG,aAAtB;AACD;;;wBAEwB;AACvB,aAAO,KAAKP,KAAL,CAAWI,GAAX,CAAeK,eAAtB;AACD;;;wBAEgB;AACf,aAAO,KAAKT,KAAL,CAAWU,UAAlB;AACD;;;wBAEmB;AAClB,aAAO,KAAKV,KAAL,CAAWY,aAAlB;AACD;;;wBAEkB;AACjB,aAAO,KAAKZ,KAAL,CAAWc,YAAlB;AACD;;;;;eAGY,IAAIf,YAAJ,E","sourcesContent":["import _ from 'lodash';\nimport Colors from './colors';\n\nclass ThemeManager {\n  theme = {\n    primaryColor: Colors.blue30,\n    CTA: {\n      textColor: Colors.white,\n      disabledColor: Colors.dark60,\n      backgroundColor: Colors.blue30\n    },\n    titleColor: Colors.dark10,\n    subtitleColor: Colors.dark40,\n    dividerColor: Colors.dark70,\n    components: {\n      TouchableOpacity: {\n        throttleTime: 0,\n        throttleOptions: {leading: true, trailing: false}\n      }\n    }\n  };\n\n  setTheme(overrides) {\n    this.theme = _.merge(this.theme, overrides);\n  }\n\n  getTheme() {\n    return this.theme;\n  }\n\n  setItem(key, value) {\n    if (key === 'components') {\n      throw new Error('Overriding the \"components\" key is not possible.');\n    }\n    // this.theme[key] = value;\n    _.set(this.theme, key, value);\n  }\n\n  getItem(key) {\n    // return this.theme[key];\n    return _.get(this.theme, key);\n  }\n\n  setComponentTheme(componentName, overrides) {\n    if (_.isFunction(overrides)) {\n      this.theme.components[componentName] = overrides;\n    } else {\n      this.theme.components[componentName] = _.cloneDeep(overrides);\n    }\n  }\n\n  get components() {\n    return this.theme.components;\n  }\n\n  get primaryColor() {\n    return this.theme.primaryColor;\n  }\n\n  get CTATextColor() {\n    return this.theme.CTA.textColor;\n  }\n\n  get CTADisabledColor() {\n    return this.theme.CTA.disabledColor;\n  }\n\n  get CTABackgroundColor() {\n    return this.theme.CTA.backgroundColor;\n  }\n\n  get titleColor() {\n    return this.theme.titleColor;\n  }\n\n  get subtitleColor() {\n    return this.theme.subtitleColor;\n  }\n\n  get dividerColor() {\n    return this.theme.dividerColor;\n  }\n}\n\nexport default new ThemeManager();\n"]},"metadata":{},"sourceType":"script"}