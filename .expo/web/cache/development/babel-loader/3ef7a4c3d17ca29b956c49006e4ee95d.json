{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _asPanViewConsumer = _interopRequireDefault(require(\"./asPanViewConsumer\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\panningViews\\\\panResponderView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar panResponderView = function (_PureComponent) {\n  (0, _inherits2.default)(panResponderView, _PureComponent);\n\n  var _super = _createSuper(panResponderView);\n\n  function panResponderView(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, panResponderView);\n    _this = _super.call(this, props);\n    _this.initialLeft = 0;\n    _this.initialTop = 0;\n    _this.ref = _react.default.createRef();\n    return _this;\n  }\n\n  (0, _createClass2.default)(panResponderView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setNativeProps(this.initialLeft, this.initialTop);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var ignorePanning = this.props.ignorePanning;\n      var _this$props$context = this.props.context,\n          isPanning = _this$props$context.isPanning,\n          dragDeltas = _this$props$context.dragDeltas;\n      var _prevProps$context = prevProps.context,\n          prevIsPanning = _prevProps$context.isPanning,\n          prevDragDeltas = _prevProps$context.dragDeltas;\n\n      if (!ignorePanning && !isPanning && prevIsPanning) {\n        this.onPanEnd();\n      }\n\n      if (!ignorePanning && isPanning && (dragDeltas.x || dragDeltas.y) && (dragDeltas.x !== prevDragDeltas.x || dragDeltas.y !== prevDragDeltas.y)) {\n        this.onDrag(dragDeltas);\n      }\n    }\n  }, {\n    key: \"onPanEnd\",\n    value: function onPanEnd() {\n      var location = {\n        left: this.left,\n        top: this.top\n      };\n      this.initialLeft = this.left;\n      this.initialTop = this.top;\n\n      _lodash.default.invoke(this.props, 'onPanLocationChanged', location);\n\n      _lodash.default.invoke(this.props.context, 'onPanLocationChanged', location);\n    }\n  }, {\n    key: \"onDrag\",\n    value: function onDrag(deltas) {\n      var left = this.initialLeft + (deltas.x ? Math.round(deltas.x) : 0);\n      var top = this.initialTop + (deltas.y ? Math.round(deltas.y) : 0);\n      this.setNativeProps(left, top);\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(left, top) {\n      if (this.ref.current) {\n        this.ref.current.setNativeProps({\n          style: {\n            left: left,\n            top: top\n          }\n        });\n        this.left = left;\n        this.top = top;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isAnimated = _this$props.isAnimated,\n          others = (0, _objectWithoutProperties2.default)(_this$props, [\"isAnimated\"]);\n      var Container = isAnimated ? _reactNative.Animated.View : _view.default;\n      return _react.default.createElement(Container, (0, _extends2.default)({\n        ref: this.ref,\n        pointerEvents: 'box-none'\n      }, others, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }), this.props.children);\n    }\n  }]);\n  return panResponderView;\n}(_react.PureComponent);\n\npanResponderView.displayName = 'panResponderView';\npanResponderView.propTypes = {\n  onPanLocationChanged: _propTypes.default.func,\n  ignorePanning: _propTypes.default.bool,\n  isAnimated: _propTypes.default.bool\n};\npanResponderView.defaultProps = {\n  isAnimated: false\n};\n\nvar _default = (0, _asPanViewConsumer.default)(panResponderView);\n\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/panningViews/panResponderView.js"],"names":["panResponderView","props","initialLeft","initialTop","ref","React","createRef","setNativeProps","prevProps","ignorePanning","context","isPanning","dragDeltas","prevIsPanning","prevDragDeltas","onPanEnd","x","y","onDrag","location","left","top","_","invoke","deltas","Math","round","current","style","isAnimated","others","Container","Animated","View","children","PureComponent","displayName","propTypes","onPanLocationChanged","PropTypes","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport {Animated} from 'react-native';\nimport View from '../view';\nimport asPanViewConsumer from './asPanViewConsumer';\n\n/**\n * @description: panResponderView component created to making listening to swipe and drag events easier.\n * @notes: Has to be used as a child of a PanningProvider that also has a PanListenerView.\n *         The PanListenerView is the one that sends the drag\\swipe events.\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PanResponderScreen.js\n */\nclass panResponderView extends PureComponent {\n  static displayName = 'panResponderView';\n  static propTypes = {\n    /**\n     * Will be called with the current location ({left, top}) when the pan has ended\n     */\n    onPanLocationChanged: PropTypes.func,\n    /**\n     * Ignore panning events while this is true\n     */\n    ignorePanning: PropTypes.bool,\n    /**\n     * Allow the view to be animated (send animation via style; default is false)\n     */\n    isAnimated: PropTypes.bool\n  };\n\n  static defaultProps = {\n    isAnimated: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.initialLeft = 0;\n    this.initialTop = 0;\n\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setNativeProps(this.initialLeft, this.initialTop);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {ignorePanning} = this.props;\n    const {isPanning, dragDeltas} = this.props.context; // eslint-disable-line\n    const {isPanning: prevIsPanning, dragDeltas: prevDragDeltas} = prevProps.context; // eslint-disable-line\n\n    if (!ignorePanning && !isPanning && prevIsPanning) {\n      this.onPanEnd();\n    }\n\n    if (\n      !ignorePanning &&\n      isPanning &&\n      (dragDeltas.x || dragDeltas.y) &&\n      (dragDeltas.x !== prevDragDeltas.x || dragDeltas.y !== prevDragDeltas.y)\n    ) {\n      this.onDrag(dragDeltas);\n    }\n  }\n\n  onPanEnd() {\n    const location = {left: this.left, top: this.top};\n    this.initialLeft = this.left;\n    this.initialTop = this.top;\n    _.invoke(this.props, 'onPanLocationChanged', location);\n    _.invoke(this.props.context, 'onPanLocationChanged', location); // eslint-disable-line\n  }\n\n  onDrag(deltas) {\n    const left = this.initialLeft + (deltas.x ? Math.round(deltas.x) : 0);\n    const top = this.initialTop + (deltas.y ? Math.round(deltas.y) : 0);\n\n    this.setNativeProps(left, top);\n  }\n\n  setNativeProps(left, top) {\n    if (this.ref.current) {\n      this.ref.current.setNativeProps({style: {left, top}});\n      this.left = left;\n      this.top = top;\n    }\n  }\n\n  render() {\n    const {isAnimated, ...others} = this.props;\n    const Container = isAnimated ? Animated.View : View;\n\n    return (\n      <Container ref={this.ref} pointerEvents={'box-none'} {...others}>\n        {this.props.children}\n      </Container>\n    );\n  }\n}\n\nexport default asPanViewConsumer(panResponderView);\n"]},"metadata":{},"sourceType":"script"}