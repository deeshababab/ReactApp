{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _BaseInput2 = _interopRequireDefault(require(\"./BaseInput\"));\n\nvar _text = _interopRequireDefault(require(\"../text\"));\n\nvar _style = require(\"../../style\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _screensComponents = require(\"../../screensComponents\");\n\nvar _TextArea = _interopRequireDefault(require(\"./TextArea\"));\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _image = _interopRequireDefault(require(\"../image\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\inputs\\\\TextInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar DEFAULT_COLOR_BY_STATE = {\n  default: _style.Colors.dark40,\n  focus: _style.Colors.blue30,\n  error: _style.Colors.red30\n};\nvar DEFAULT_UNDERLINE_COLOR_BY_STATE = {\n  default: _style.Colors.dark70,\n  focus: _style.Colors.blue30,\n  error: _style.Colors.red30\n};\nvar LABEL_TYPOGRAPHY = _style.Typography.text80;\n\nvar TextInput = function (_BaseInput) {\n  (0, _inherits2.default)(TextInput, _BaseInput);\n\n  var _super = _createSuper(TextInput);\n\n  function TextInput(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, TextInput);\n    _this = _super.call(this, props);\n\n    _this.onDoneEditingExpandableInput = function () {\n      var expandableInputValue = _lodash.default.get(_this.expandableInput, 'state.value');\n\n      _this.setState({\n        value: expandableInputValue\n      });\n\n      _this.state.floatingPlaceholderState.setValue(expandableInputValue ? 1 : 0);\n\n      _lodash.default.invoke(_this.props, 'onChangeText', expandableInputValue);\n\n      _this.toggleExpandableModal(false);\n    };\n\n    _this.onKeyPress = function (event) {\n      _this.lastKey = event.nativeEvent.key;\n\n      _lodash.default.invoke(_this.props, 'onKeyPress', event);\n    };\n\n    _this.onChangeText = function (text) {\n      if (text === '' && _this.lastKey && _this.lastKey !== 'Backspace') {\n        return;\n      }\n\n      var transformer = _this.props.transformer;\n      var transformedText = text;\n\n      if (_lodash.default.isFunction(transformer)) {\n        transformedText = transformer(text);\n      }\n\n      _lodash.default.invoke(_this.props, 'onChangeText', transformedText);\n\n      _this.setState({\n        value: transformedText\n      }, _this.updateFloatingPlaceholderState);\n    };\n\n    _this.onFocus = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _lodash.default.invoke.apply(_lodash.default, [_this.props, 'onFocus'].concat(args));\n\n      _this.setState({\n        focused: true\n      }, _this.updateFloatingPlaceholderState);\n    };\n\n    _this.onBlur = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      _lodash.default.invoke.apply(_lodash.default, [_this.props, 'onBlur'].concat(args));\n\n      _this.setState({\n        focused: false\n      }, _this.updateFloatingPlaceholderState);\n    };\n\n    console.warn('uilib TextInput component will be deprecated soon, please use TextField instead');\n    _this.updateFloatingPlaceholderState = _this.updateFloatingPlaceholderState.bind((0, _assertThisInitialized2.default)(_this));\n    _this.toggleExpandableModal = _this.toggleExpandableModal.bind((0, _assertThisInitialized2.default)(_this));\n    _this.state = {\n      value: props.value,\n      floatingPlaceholderState: new _reactNative.Animated.Value(_this.shouldFloatPlacholder(props.value) ? 1 : 0),\n      showExpandableModal: false\n    };\n\n    _this.generatePropsWarnings(props);\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(TextInput, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          value: nextProps.value\n        }, this.updateFloatingPlaceholderState);\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"generatePropsWarnings\",\n    value: function generatePropsWarnings(props) {\n      if (props.maxLength === 0) {\n        console.warn('Setting maxLength to zero will block typing in this input');\n      }\n\n      if (props.showCharacterCounter && !props.maxLength) {\n        console.warn('In order to use showCharacterCount please pass \\'maxLength\\' prop');\n      }\n    }\n  }, {\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.props);\n    }\n  }, {\n    key: \"toggleExpandableModal\",\n    value: function toggleExpandableModal(value) {\n      this.setState({\n        showExpandableModal: value\n      });\n    }\n  }, {\n    key: \"updateFloatingPlaceholderState\",\n    value: function updateFloatingPlaceholderState(withoutAnimation) {\n      if (withoutAnimation) {\n        this.state.floatingPlaceholderState.setValue(this.shouldFloatPlacholder() ? 1 : 0);\n      } else {\n        _reactNative.Animated.spring(this.state.floatingPlaceholderState, {\n          toValue: this.shouldFloatPlacholder() ? 1 : 0,\n          duration: 150\n        }).start();\n      }\n    }\n  }, {\n    key: \"getPlaceholderText\",\n    value: function getPlaceholderText() {\n      var _this$props = this.props,\n          placeholder = _this$props.placeholder,\n          helperText = _this$props.helperText;\n      var text = this.shouldFakePlaceholder() ? this.shouldShowHelperText() ? helperText : ' ' : this.shouldShowTopError() && this.shouldShowHelperText() ? helperText : placeholder;\n      return text;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      return this.props.editable === false;\n    }\n  }, {\n    key: \"getStateColor\",\n    value: function getStateColor(colorProp, isUnderline) {\n      var focused = this.state.focused;\n      var _this$props2 = this.props,\n          error = _this$props2.error,\n          disabledColor = _this$props2.disabledColor;\n\n      var colorByState = _lodash.default.cloneDeep(isUnderline ? DEFAULT_UNDERLINE_COLOR_BY_STATE : DEFAULT_COLOR_BY_STATE);\n\n      if (this.isDisabled() && disabledColor) {\n        return disabledColor;\n      }\n\n      if (colorProp) {\n        if (_lodash.default.isString(colorProp)) {\n          return colorProp;\n        } else if (_lodash.default.isObject(colorProp)) {\n          _lodash.default.merge(colorByState, colorProp);\n        }\n      }\n\n      var color = colorByState.default;\n\n      if (error && isUnderline) {\n        color = colorByState.error;\n      } else if (focused) {\n        color = colorByState.focus;\n      }\n\n      return color;\n    }\n  }, {\n    key: \"getCharCount\",\n    value: function getCharCount() {\n      var value = this.state.value;\n\n      if (value) {\n        return value.length;\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"isCounterLimit\",\n    value: function isCounterLimit() {\n      var maxLength = this.props.maxLength;\n      var counter = this.getCharCount();\n      return counter === 0 ? false : maxLength <= counter;\n    }\n  }, {\n    key: \"hasText\",\n    value: function hasText(value) {\n      return !_lodash.default.isEmpty(value || this.state.value);\n    }\n  }, {\n    key: \"shouldShowHelperText\",\n    value: function shouldShowHelperText() {\n      var focused = this.state.focused;\n      var helperText = this.props.helperText;\n      return focused && helperText;\n    }\n  }, {\n    key: \"shouldFloatOnFocus\",\n    value: function shouldFloatOnFocus() {\n      var focused = this.state.focused;\n      var floatOnFocus = this.props.floatOnFocus;\n      return focused && floatOnFocus;\n    }\n  }, {\n    key: \"shouldFloatPlacholder\",\n    value: function shouldFloatPlacholder(text) {\n      return this.hasText(text) || this.shouldShowHelperText() || this.shouldFloatOnFocus();\n    }\n  }, {\n    key: \"shouldFakePlaceholder\",\n    value: function shouldFakePlaceholder() {\n      var _this$props3 = this.props,\n          floatingPlaceholder = _this$props3.floatingPlaceholder,\n          centered = _this$props3.centered;\n      return Boolean(floatingPlaceholder && !centered && !this.shouldShowTopError());\n    }\n  }, {\n    key: \"shouldShowError\",\n    value: function shouldShowError() {\n      var _this$props4 = this.props,\n          enableErrors = _this$props4.enableErrors,\n          error = _this$props4.error;\n      return enableErrors && error;\n    }\n  }, {\n    key: \"shouldShowTopError\",\n    value: function shouldShowTopError() {\n      var useTopErrors = this.props.useTopErrors;\n      return this.shouldShowError() && useTopErrors;\n    }\n  }, {\n    key: \"renderPlaceholder\",\n    value: function renderPlaceholder() {\n      var _this2 = this;\n\n      var floatingPlaceholderState = this.state.floatingPlaceholderState;\n      var _this$props5 = this.props,\n          centered = _this$props5.centered,\n          expandable = _this$props5.expandable,\n          placeholder = _this$props5.placeholder,\n          placeholderTextColor = _this$props5.placeholderTextColor,\n          floatingPlaceholderColor = _this$props5.floatingPlaceholderColor,\n          multiline = _this$props5.multiline;\n      var typography = this.getTypography();\n      var placeholderColor = this.getStateColor(placeholderTextColor);\n\n      if (this.shouldFakePlaceholder()) {\n        return _react.default.createElement(_reactNative.Animated.Text, {\n          style: [this.styles.floatingPlaceholder, this.styles.placeholder, typography, centered && this.styles.placeholderCentered, !centered && {\n            top: floatingPlaceholderState.interpolate({\n              inputRange: [0, 1],\n              outputRange: [multiline ? 30 : 28, multiline ? 7 : 0]\n            }),\n            fontSize: floatingPlaceholderState.interpolate({\n              inputRange: [0, 1],\n              outputRange: [typography.fontSize, LABEL_TYPOGRAPHY.fontSize]\n            }),\n            color: floatingPlaceholderState.interpolate({\n              inputRange: [0, 1],\n              outputRange: [placeholderColor, this.getStateColor(floatingPlaceholderColor)]\n            }),\n            lineHeight: this.shouldFloatPlacholder() ? LABEL_TYPOGRAPHY.lineHeight : typography.lineHeight\n          }],\n          numberOfLines: 1,\n          onPress: function onPress() {\n            return expandable && _this2.toggleExpandableModal(true);\n          },\n          suppressHighlighting: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 9\n          }\n        }, placeholder);\n      }\n    }\n  }, {\n    key: \"renderTitle\",\n    value: function renderTitle() {\n      var _this$props6 = this.props,\n          floatingPlaceholder = _this$props6.floatingPlaceholder,\n          title = _this$props6.title,\n          titleColor = _this$props6.titleColor,\n          titleStyle = _this$props6.titleStyle;\n      var color = this.getStateColor(titleColor);\n\n      if (!floatingPlaceholder && title) {\n        return _react.default.createElement(_text.default, {\n          style: [{\n            color: color\n          }, this.styles.topLabel, this.styles.label, titleStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 14\n          }\n        }, title);\n      }\n    }\n  }, {\n    key: \"renderCharCounter\",\n    value: function renderCharCounter() {\n      var focused = this.state.focused;\n      var _this$props7 = this.props,\n          maxLength = _this$props7.maxLength,\n          showCharacterCounter = _this$props7.showCharacterCounter,\n          disabledColor = _this$props7.disabledColor;\n\n      if (maxLength && showCharacterCounter) {\n        var counter = this.getCharCount();\n        var textColor = this.isCounterLimit() && focused ? DEFAULT_COLOR_BY_STATE.error : DEFAULT_COLOR_BY_STATE.default;\n        var color = this.isDisabled() && disabledColor ? disabledColor : textColor;\n        return _react.default.createElement(_text.default, {\n          style: [{\n            color: color\n          }, this.styles.bottomLabel, this.styles.label],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 9\n          }\n        }, counter, \" / \", maxLength);\n      }\n    }\n  }, {\n    key: \"renderError\",\n    value: function renderError(visible) {\n      var _this$props8 = this.props,\n          enableErrors = _this$props8.enableErrors,\n          error = _this$props8.error,\n          useTopErrors = _this$props8.useTopErrors;\n      var positionStyle = useTopErrors ? this.styles.topLabel : this.styles.bottomLabel;\n\n      if (visible && enableErrors) {\n        return _react.default.createElement(_text.default, {\n          style: [this.styles.errorMessage, this.styles.label, positionStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 14\n          }\n        }, error);\n      }\n    }\n  }, {\n    key: \"renderExpandableModal\",\n    value: function renderExpandableModal() {\n      var _this3 = this;\n\n      var renderExpandable = this.props.renderExpandable;\n      var showExpandableModal = this.state.showExpandableModal;\n\n      if (_lodash.default.isFunction(renderExpandable) && showExpandableModal) {\n        return renderExpandable(this.props, this.state);\n      }\n\n      return _react.default.createElement(_screensComponents.Modal, {\n        animationType: 'slide',\n        visible: showExpandableModal,\n        onRequestClose: function onRequestClose() {\n          return _this3.toggleExpandableModal(false);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_screensComponents.Modal.TopBar, {\n        onCancel: function onCancel() {\n          return _this3.toggleExpandableModal(false);\n        },\n        onDone: this.onDoneEditingExpandableInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_view.default, {\n        style: this.styles.expandableModalContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_TextArea.default, (0, _extends2.default)({\n        ref: function ref(textarea) {\n          _this3.expandableInput = textarea;\n        }\n      }, this.props, {\n        value: this.state.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }, {\n    key: \"renderExpandableInput\",\n    value: function renderExpandableInput() {\n      var _this4 = this;\n\n      var _this$props9 = this.props,\n          style = _this$props9.style,\n          floatingPlaceholder = _this$props9.floatingPlaceholder,\n          placeholder = _this$props9.placeholder,\n          hideUnderline = _this$props9.hideUnderline,\n          renderExpandableInput = _this$props9.renderExpandableInput,\n          rightIconSource = _this$props9.rightIconSource;\n      var value = this.state.value;\n      var typography = this.getTypography();\n      var color = this.getStateColor(this.props.color || this.extractColorValue());\n      var minHeight = typography.lineHeight;\n      var shouldShowPlaceholder = _lodash.default.isEmpty(value) && !floatingPlaceholder;\n      var inputStyle = [this.styles.input, hideUnderline && this.styles.inputWithoutUnderline, typography, color && {\n        color: color\n      }, style];\n\n      if (_lodash.default.isFunction(renderExpandableInput)) {\n        return renderExpandableInput(this.getThemeProps());\n      }\n\n      return _react.default.createElement(_reactNative.TouchableOpacity, {\n        style: this.styles.expandableInput,\n        activeOpacity: 1,\n        onPress: function onPress() {\n          return !_this4.isDisabled() && _this4.toggleExpandableModal(true);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_text.default, {\n        style: [{\n          minHeight: minHeight\n        }, inputStyle, shouldShowPlaceholder && this.styles.placeholder],\n        numberOfLines: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 9\n        }\n      }, shouldShowPlaceholder ? placeholder : value), rightIconSource && _react.default.createElement(_image.default, {\n        pointerEvents: \"none\",\n        source: rightIconSource,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 29\n        }\n      }));\n    }\n  }, {\n    key: \"renderTextInput\",\n    value: function renderTextInput() {\n      var _this5 = this;\n\n      var value = this.state.value;\n      var color = this.getStateColor(this.props.color || this.extractColorValue());\n      var typography = this.getTypography();\n      var _this$props10 = this.props,\n          style = _this$props10.style,\n          placeholderTextColor = _this$props10.placeholderTextColor,\n          multiline = _this$props10.multiline,\n          hideUnderline = _this$props10.hideUnderline,\n          numberOfLines = _this$props10.numberOfLines,\n          others = (0, _objectWithoutProperties2.default)(_this$props10, [\"style\", \"placeholderTextColor\", \"multiline\", \"hideUnderline\", \"numberOfLines\"]);\n      var inputStyle = [this.styles.input, hideUnderline && this.styles.inputWithoutUnderline, typography, color && {\n        color: color\n      }, style];\n      var placeholderText = this.getPlaceholderText();\n      var placeholderColor = this.getStateColor(placeholderTextColor);\n      return _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({}, others, {\n        value: value,\n        placeholder: placeholderText,\n        placeholderTextColor: placeholderColor,\n        underlineColorAndroid: \"transparent\",\n        style: inputStyle,\n        multiline: multiline,\n        numberOfLines: numberOfLines,\n        onKeyPress: this.onKeyPress,\n        onChangeText: this.onChangeText,\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        ref: function ref(input) {\n          _this5.input = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"getTopPaddings\",\n    value: function getTopPaddings() {\n      var floatingPlaceholder = this.props.floatingPlaceholder;\n      return floatingPlaceholder ? this.shouldShowTopError() ? undefined : 25 : undefined;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props11 = this.props,\n          expandable = _this$props11.expandable,\n          containerStyle = _this$props11.containerStyle,\n          underlineColor = _this$props11.underlineColor,\n          useTopErrors = _this$props11.useTopErrors,\n          hideUnderline = _this$props11.hideUnderline;\n      var underlineStateColor = this.getStateColor(underlineColor, true);\n      return _react.default.createElement(_view.default, {\n        style: [this.styles.container, containerStyle],\n        collapsable: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_view.default, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 9\n        }\n      }, this.shouldShowTopError() ? this.renderError(useTopErrors) : this.renderTitle()), _react.default.createElement(_view.default, {\n        style: [this.styles.innerContainer, hideUnderline && this.styles.innerContainerWithoutUnderline, {\n          borderColor: underlineStateColor\n        }, {\n          paddingTop: this.getTopPaddings()\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 9\n        }\n      }, this.renderPlaceholder(), expandable ? this.renderExpandableInput() : this.renderTextInput(), expandable && this.renderExpandableModal()), _react.default.createElement(_view.default, {\n        row: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_view.default, {\n        flex: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }\n      }, this.renderError(!useTopErrors)), this.renderCharCounter()));\n    }\n  }]);\n  return TextInput;\n}(_BaseInput2.default);\n\nexports.default = TextInput;\nTextInput.displayName = 'TextInput';\nTextInput.propTypes = _objectSpread(_objectSpread(_objectSpread({}, _reactNative.TextInput.propTypes), _BaseInput2.default.propTypes), {}, {\n  floatingPlaceholder: _propTypes.default.bool,\n  floatingPlaceholderColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n  helperText: _propTypes.default.string,\n  hideUnderline: _propTypes.default.bool,\n  underlineColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n  disabledColor: _propTypes.default.string,\n  centered: _propTypes.default.bool,\n  error: _propTypes.default.string,\n  enableErrors: _propTypes.default.bool,\n  expandable: _propTypes.default.bool,\n  renderExpandableInput: _propTypes.default.func,\n  renderExpandable: _propTypes.default.func,\n  transformer: _propTypes.default.func,\n  title: _propTypes.default.string,\n  titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n  titleStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),\n  showCharacterCounter: _propTypes.default.bool,\n  floatOnFocus: _propTypes.default.bool,\n  useTopErrors: _propTypes.default.bool,\n  rightIconSource: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number])\n});\nTextInput.defaultProps = {\n  placeholderTextColor: DEFAULT_COLOR_BY_STATE.default,\n  enableErrors: true\n};\n\nfunction createStyles(_ref) {\n  var placeholderTextColor = _ref.placeholderTextColor,\n      centered = _ref.centered;\n  return _reactNative.StyleSheet.create({\n    container: {},\n    innerContainer: {\n      flexDirection: 'row',\n      borderBottomWidth: 1,\n      borderColor: _style.Colors.dark70,\n      justifyContent: centered ? 'center' : undefined,\n      flexGrow: 1\n    },\n    innerContainerWithoutUnderline: {\n      borderBottomWidth: 0\n    },\n    input: {\n      flexGrow: 1,\n      marginBottom: _helpers.Constants.isIOS ? 10 : 5,\n      padding: 0,\n      textAlign: centered ? 'center' : undefined,\n      backgroundColor: 'transparent'\n    },\n    expandableInput: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      flexGrow: 1\n    },\n    inputWithoutUnderline: {\n      marginBottom: undefined\n    },\n    floatingPlaceholder: {\n      position: 'absolute',\n      width: '100%',\n      backgroundColor: 'transparent'\n    },\n    placeholder: {\n      color: placeholderTextColor\n    },\n    placeholderCentered: {\n      left: 0,\n      right: 0,\n      textAlign: 'center'\n    },\n    errorMessage: {\n      color: _style.Colors.red30,\n      textAlign: centered ? 'center' : undefined\n    },\n    expandableModalContent: {\n      flex: 1,\n      paddingTop: 15,\n      paddingHorizontal: 20\n    },\n    topLabel: {\n      marginBottom: _helpers.Constants.isIOS ? 6 : 7\n    },\n    bottomLabel: {\n      marginTop: 1\n    },\n    label: _objectSpread(_objectSpread({}, LABEL_TYPOGRAPHY), {}, {\n      height: LABEL_TYPOGRAPHY.lineHeight\n    })\n  });\n}","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/inputs/TextInput.js"],"names":["DEFAULT_COLOR_BY_STATE","default","Colors","dark40","focus","blue30","error","red30","DEFAULT_UNDERLINE_COLOR_BY_STATE","dark70","LABEL_TYPOGRAPHY","Typography","text80","TextInput","props","onDoneEditingExpandableInput","expandableInputValue","_","get","expandableInput","setState","value","state","floatingPlaceholderState","setValue","invoke","toggleExpandableModal","onKeyPress","event","lastKey","nativeEvent","key","onChangeText","text","transformer","transformedText","isFunction","updateFloatingPlaceholderState","onFocus","args","focused","onBlur","console","warn","bind","Animated","Value","shouldFloatPlacholder","showExpandableModal","generatePropsWarnings","nextProps","maxLength","showCharacterCounter","styles","createStyles","withoutAnimation","spring","toValue","duration","start","placeholder","helperText","shouldFakePlaceholder","shouldShowHelperText","shouldShowTopError","editable","colorProp","isUnderline","disabledColor","colorByState","cloneDeep","isDisabled","isString","isObject","merge","color","length","counter","getCharCount","isEmpty","floatOnFocus","hasText","shouldFloatOnFocus","floatingPlaceholder","centered","Boolean","enableErrors","useTopErrors","shouldShowError","expandable","placeholderTextColor","floatingPlaceholderColor","multiline","typography","getTypography","placeholderColor","getStateColor","placeholderCentered","top","interpolate","inputRange","outputRange","fontSize","lineHeight","title","titleColor","titleStyle","topLabel","label","textColor","isCounterLimit","bottomLabel","visible","positionStyle","errorMessage","renderExpandable","expandableModalContent","textarea","style","hideUnderline","renderExpandableInput","rightIconSource","extractColorValue","minHeight","shouldShowPlaceholder","inputStyle","input","inputWithoutUnderline","getThemeProps","numberOfLines","others","placeholderText","getPlaceholderText","onChange","undefined","containerStyle","underlineColor","underlineStateColor","container","renderError","renderTitle","innerContainer","innerContainerWithoutUnderline","borderColor","paddingTop","getTopPaddings","renderPlaceholder","renderTextInput","renderExpandableModal","renderCharCounter","BaseInput","displayName","propTypes","RNTextInput","PropTypes","bool","oneOfType","string","object","func","number","array","defaultProps","StyleSheet","create","flexDirection","borderBottomWidth","justifyContent","flexGrow","marginBottom","Constants","isIOS","padding","textAlign","backgroundColor","alignItems","position","width","left","right","flex","paddingHorizontal","marginTop","height"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {TextInput as RNTextInput, StyleSheet, Animated, TouchableOpacity} from 'react-native';\nimport _ from 'lodash';\nimport BaseInput from './BaseInput';\nimport Text from '../text';\nimport {Colors, Typography} from '../../style';\nimport {Constants} from '../../helpers';\nimport {Modal} from '../../screensComponents';\nimport TextArea from './TextArea';\nimport View from '../view';\nimport Image from '../image';\n\nconst DEFAULT_COLOR_BY_STATE = {\n  default: Colors.dark40,\n  focus: Colors.blue30,\n  error: Colors.red30\n};\nconst DEFAULT_UNDERLINE_COLOR_BY_STATE = {\n  default: Colors.dark70,\n  focus: Colors.blue30,\n  error: Colors.red30\n};\nconst LABEL_TYPOGRAPHY = Typography.text80;\n\n/**\n * @description: A wrapper for Text Input component with extra functionality like floating placeholder\n * @extends: TextInput\n * @extendslink: https://facebook.github.io/react-native/docs/textinput.html\n * @modifiers: Typography\n * @gif: https://media.giphy.com/media/xULW8su8Cs5Z9Fq4PS/giphy.gif, https://media.giphy.com/media/3ohc1dhDcLS9FvWLJu/giphy.gif, https://media.giphy.com/media/oNUSOxnHdMP5ZnKYsh/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/InputsScreen.js\n */\nexport default class TextInput extends BaseInput {\n  static displayName = 'TextInput';\n  static propTypes = {\n    ...RNTextInput.propTypes,\n    ...BaseInput.propTypes,\n    /**\n     * should placeholder have floating behavior\n     */\n    floatingPlaceholder: PropTypes.bool,\n    /**\n     * floating placeholder color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue'}\n     */\n    floatingPlaceholderColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * This text will appear as a placeholder when the textInput becomes focused, only when passing floatingPlaceholder\n     * as well (NOT for expandable textInputs)\n     */\n    helperText: PropTypes.string,\n    /**\n     * hide text input underline, by default false\n     */\n    hideUnderline: PropTypes.bool,\n    /**\n     * underline color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue'}\n     */\n    underlineColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * the color of all text when the input is disabled (if undefined will not apply color)\n     */\n    disabledColor: PropTypes.string,\n    /**\n     * should text input be align to center\n     */\n    centered: PropTypes.bool,\n    /**\n     * input error message, should be empty if no error exists\n     */\n    error: PropTypes.string,\n    /**\n     * should the input component support error messages\n     */\n    enableErrors: PropTypes.bool,\n    /**\n     * should the input expand to another text area modal\n     */\n    expandable: PropTypes.bool,\n    /**\n     * Render custom expandable input (requires expandable to be true)\n     */\n    renderExpandableInput: PropTypes.func,\n    /**\n     * allow custom rendering of expandable content when clicking on the input (useful for pickers)\n     * accept props and state as params, ex. (props, state) => {...}\n     * use toggleExpandableModal(false) method to toggle off the expandable content\n     */\n    renderExpandable: PropTypes.func,\n    /**\n     * transform function executed on value and return transformed value\n     */\n    transformer: PropTypes.func,\n    /**\n     * Fixed title that will displayed above the input (note: floatingPlaceholder MUST be 'false')\n     */\n    title: PropTypes.string,\n    /**\n     * The title's color as a string or object of states, ex. {default: 'black', error: 'red', focus: 'blue'}\n     */\n    titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * Additional styles for the title (not including 'color')\n     */\n    titleStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * should the input display a character counter (only when passing 'maxLength')\n     */\n    showCharacterCounter: PropTypes.bool,\n    /**\n     * should float the placeholer when focused (instead of when typing)\n     */\n    floatOnFocus: PropTypes.bool,\n    /**\n     * should the errors be displayed at the top\n     */\n    useTopErrors: PropTypes.bool,\n    /**\n     * Icon asset source for showing on the right side, appropriate for dropdown icon and such\n     */\n    rightIconSource: PropTypes.oneOfType([PropTypes.object, PropTypes.number])\n  };\n\n  static defaultProps = {\n    placeholderTextColor: DEFAULT_COLOR_BY_STATE.default,\n    enableErrors: true\n  };\n\n  constructor(props) {\n    super(props);\n\n    console.warn('uilib TextInput component will be deprecated soon, please use TextField instead');\n\n    this.updateFloatingPlaceholderState = this.updateFloatingPlaceholderState.bind(this);\n    this.toggleExpandableModal = this.toggleExpandableModal.bind(this);\n\n    this.state = {\n      value: props.value,\n      floatingPlaceholderState: new Animated.Value(this.shouldFloatPlacholder(props.value) ? 1 : 0),\n      showExpandableModal: false\n    };\n\n    this.generatePropsWarnings(props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.value !== this.props.value) {\n      this.setState({value: nextProps.value}, this.updateFloatingPlaceholderState);\n    }\n  }\n\n  componentDidMount() {\n    // this.getHeight();\n  }\n\n  /** Actions */\n  generatePropsWarnings(props) {\n    if (props.maxLength === 0) {\n      console.warn('Setting maxLength to zero will block typing in this input');\n    }\n    if (props.showCharacterCounter && !props.maxLength) {\n      console.warn('In order to use showCharacterCount please pass \\'maxLength\\' prop');\n    }\n  }\n\n  generateStyles() {\n    this.styles = createStyles(this.props);\n  }\n\n  toggleExpandableModal(value) {\n    this.setState({showExpandableModal: value});\n  }\n\n  updateFloatingPlaceholderState(withoutAnimation) {\n    if (withoutAnimation) {\n      this.state.floatingPlaceholderState.setValue(this.shouldFloatPlacholder() ? 1 : 0);\n    } else {\n      Animated.spring(this.state.floatingPlaceholderState, {\n        toValue: this.shouldFloatPlacholder() ? 1 : 0,\n        duration: 150\n      }).start();\n    }\n  }\n\n  getPlaceholderText() {\n    const {placeholder, helperText} = this.props;\n    const text = this.shouldFakePlaceholder()\n      ? this.shouldShowHelperText()\n        ? helperText\n        : ' '\n      : this.shouldShowTopError() && this.shouldShowHelperText()\n        ? helperText\n        : placeholder;\n    return text;\n  }\n\n  // getHeight() {\n  //   const {multiline, numberOfLines} = this.props;\n  //   const typography = this.getTypography();\n  //   if (!multiline) {\n  //     return typography.lineHeight;\n  //   }\n  //   // numberOfLines support for both platforms\n  //   if (multiline && numberOfLines) {\n  //     return typography.lineHeight * numberOfLines;\n  //   }\n  // }\n\n  isDisabled() {\n    return this.props.editable === false;\n  }\n\n  getStateColor(colorProp, isUnderline) {\n    const {focused} = this.state;\n    const {error, disabledColor} = this.props;\n    const colorByState = _.cloneDeep(isUnderline ? DEFAULT_UNDERLINE_COLOR_BY_STATE : DEFAULT_COLOR_BY_STATE);\n\n    if (this.isDisabled() && disabledColor) {\n      return disabledColor;\n    }\n\n    if (colorProp) {\n      if (_.isString(colorProp)) {\n        // use given color for any state\n        return colorProp;\n      } else if (_.isObject(colorProp)) {\n        // set given colors by states\n        _.merge(colorByState, colorProp);\n      }\n    }\n\n    // return the right color for the current state\n    let color = colorByState.default;\n    if (error && isUnderline) {\n      color = colorByState.error;\n    } else if (focused) {\n      color = colorByState.focus;\n    }\n    return color;\n  }\n\n  getCharCount() {\n    const {value} = this.state;\n    if (value) {\n      return value.length;\n    }\n    return 0;\n  }\n\n  isCounterLimit() {\n    const {maxLength} = this.props;\n    const counter = this.getCharCount();\n    return counter === 0 ? false : maxLength <= counter;\n  }\n\n  hasText(value) {\n    return !_.isEmpty(value || this.state.value);\n  }\n\n  shouldShowHelperText() {\n    const {focused} = this.state;\n    const {helperText} = this.props;\n    return focused && helperText;\n  }\n\n  shouldFloatOnFocus() {\n    const {focused} = this.state;\n    const {floatOnFocus} = this.props;\n    return focused && floatOnFocus;\n  }\n\n  shouldFloatPlacholder(text) {\n    return this.hasText(text) || this.shouldShowHelperText() || this.shouldFloatOnFocus();\n  }\n\n  shouldFakePlaceholder() {\n    const {floatingPlaceholder, centered} = this.props;\n    return Boolean(floatingPlaceholder && !centered && !this.shouldShowTopError());\n  }\n\n  shouldShowError() {\n    const {enableErrors, error} = this.props;\n    return enableErrors && error;\n  }\n\n  shouldShowTopError() {\n    const {useTopErrors} = this.props;\n    return this.shouldShowError() && useTopErrors;\n  }\n\n  /** Renders */\n  renderPlaceholder() {\n    const {floatingPlaceholderState} = this.state;\n    const {centered, expandable, placeholder, placeholderTextColor, floatingPlaceholderColor, multiline} = this.props;\n    const typography = this.getTypography();\n    const placeholderColor = this.getStateColor(placeholderTextColor);\n\n    if (this.shouldFakePlaceholder()) {\n      return (\n        <Animated.Text\n          style={[\n            this.styles.floatingPlaceholder,\n            this.styles.placeholder,\n            typography,\n            centered && this.styles.placeholderCentered,\n            !centered && {\n              top: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: [multiline ? 30 : 28, multiline ? 7 : 0]\n              }),\n              fontSize: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: [typography.fontSize, LABEL_TYPOGRAPHY.fontSize]\n              }),\n              color: floatingPlaceholderState.interpolate({\n                inputRange: [0, 1],\n                outputRange: [placeholderColor, this.getStateColor(floatingPlaceholderColor)]\n              }),\n              lineHeight: this.shouldFloatPlacholder() ? LABEL_TYPOGRAPHY.lineHeight : typography.lineHeight\n            }\n          ]}\n          numberOfLines={1}\n          onPress={() => expandable && this.toggleExpandableModal(true)}\n          suppressHighlighting\n        >\n          {placeholder}\n        </Animated.Text>\n      );\n    }\n  }\n\n  renderTitle() {\n    const {floatingPlaceholder, title, titleColor, titleStyle} = this.props;\n    const color = this.getStateColor(titleColor);\n\n    if (!floatingPlaceholder && title) {\n      return <Text style={[{color}, this.styles.topLabel, this.styles.label, titleStyle]}>{title}</Text>;\n    }\n  }\n\n  renderCharCounter() {\n    const {focused} = this.state;\n    const {maxLength, showCharacterCounter, disabledColor} = this.props;\n\n    if (maxLength && showCharacterCounter) {\n      const counter = this.getCharCount();\n      const textColor =\n        this.isCounterLimit() && focused ? DEFAULT_COLOR_BY_STATE.error : DEFAULT_COLOR_BY_STATE.default;\n      const color = this.isDisabled() && disabledColor ? disabledColor : textColor;\n\n      return (\n        <Text style={[{color}, this.styles.bottomLabel, this.styles.label]}>\n          {counter} / {maxLength}\n        </Text>\n      );\n    }\n  }\n\n  renderError(visible) {\n    const {enableErrors, error, useTopErrors} = this.props;\n    const positionStyle = useTopErrors ? this.styles.topLabel : this.styles.bottomLabel;\n\n    if (visible && enableErrors) {\n      return <Text style={[this.styles.errorMessage, this.styles.label, positionStyle]}>{error}</Text>;\n    }\n  }\n\n  renderExpandableModal() {\n    const {renderExpandable} = this.props;\n    const {showExpandableModal} = this.state;\n\n    if (_.isFunction(renderExpandable) && showExpandableModal) {\n      return renderExpandable(this.props, this.state);\n    }\n\n    return (\n      <Modal\n        animationType={'slide'}\n        visible={showExpandableModal}\n        onRequestClose={() => this.toggleExpandableModal(false)}\n      >\n        <Modal.TopBar onCancel={() => this.toggleExpandableModal(false)} onDone={this.onDoneEditingExpandableInput}/>\n        <View style={this.styles.expandableModalContent}>\n          <TextArea\n            ref={textarea => {\n              this.expandableInput = textarea;\n            }}\n            {...this.props}\n            value={this.state.value}\n          />\n        </View>\n      </Modal>\n    );\n  }\n\n  renderExpandableInput() {\n    const {style, floatingPlaceholder, placeholder, hideUnderline, renderExpandableInput, rightIconSource} = this.props;\n    const {value} = this.state;\n    const typography = this.getTypography();\n    const color = this.getStateColor(this.props.color || this.extractColorValue());\n    const minHeight = typography.lineHeight;\n    const shouldShowPlaceholder = _.isEmpty(value) && !floatingPlaceholder;\n    const inputStyle = [\n      this.styles.input,\n      hideUnderline && this.styles.inputWithoutUnderline,\n      typography,\n      color && {color},\n      style\n    ];\n\n    if (_.isFunction(renderExpandableInput)) {\n      return renderExpandableInput(this.getThemeProps());\n    }\n\n    return (\n      <TouchableOpacity\n        style={this.styles.expandableInput}\n        activeOpacity={1}\n        onPress={() => !this.isDisabled() && this.toggleExpandableModal(true)}\n      >\n        <Text style={[{minHeight}, inputStyle, shouldShowPlaceholder && this.styles.placeholder]} numberOfLines={3}>\n          {shouldShowPlaceholder ? placeholder : value}\n        </Text>\n        {rightIconSource && <Image pointerEvents=\"none\" source={rightIconSource}/>}\n      </TouchableOpacity>\n    );\n  }\n\n  renderTextInput() {\n    const {value} = this.state; // value set on state for floatingPlaceholder functionality\n    const color = this.getStateColor(this.props.color || this.extractColorValue());\n    const typography = this.getTypography();\n    const {style, placeholderTextColor, multiline, hideUnderline, numberOfLines, ...others} = this.props;\n    const inputStyle = [\n      this.styles.input,\n      hideUnderline && this.styles.inputWithoutUnderline,\n      typography,\n      color && {color},\n      // with the right flex on the tree hierarchy we might not need this\n      // {height: this.getHeight()},\n      style\n    ];\n    // HACK: passing whitespace instead of undefined. Issue fixed in RN56\n    const placeholderText = this.getPlaceholderText();\n    const placeholderColor = this.getStateColor(placeholderTextColor);\n\n    return (\n      <RNTextInput\n        {...others}\n        value={value}\n        placeholder={placeholderText}\n        placeholderTextColor={placeholderColor}\n        underlineColorAndroid=\"transparent\"\n        style={inputStyle}\n        multiline={multiline}\n        numberOfLines={numberOfLines}\n        onKeyPress={this.onKeyPress}\n        onChangeText={this.onChangeText}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        ref={input => {\n          this.input = input;\n        }}\n      />\n    );\n  }\n\n  getTopPaddings() {\n    const {floatingPlaceholder} = this.props;\n    return floatingPlaceholder ? (this.shouldShowTopError() ? undefined : 25) : undefined;\n  }\n\n  render() {\n    const {expandable, containerStyle, underlineColor, useTopErrors, hideUnderline} = this.props;\n    const underlineStateColor = this.getStateColor(underlineColor, true);\n\n    return (\n      <View style={[this.styles.container, containerStyle]} collapsable={false}>\n        <View>{this.shouldShowTopError() ? this.renderError(useTopErrors) : this.renderTitle()}</View>\n        <View\n          style={[\n            this.styles.innerContainer,\n            hideUnderline && this.styles.innerContainerWithoutUnderline,\n            {borderColor: underlineStateColor},\n            {paddingTop: this.getTopPaddings()}\n          ]}\n        >\n          {this.renderPlaceholder()}\n          {expandable ? this.renderExpandableInput() : this.renderTextInput()}\n          {expandable && this.renderExpandableModal()}\n        </View>\n        <View row>\n          <View flex>{this.renderError(!useTopErrors)}</View>\n          {this.renderCharCounter()}\n        </View>\n      </View>\n    );\n  }\n\n  /** Events */\n  onDoneEditingExpandableInput = () => {\n    const expandableInputValue = _.get(this.expandableInput, 'state.value');\n    this.setState({value: expandableInputValue});\n    this.state.floatingPlaceholderState.setValue(expandableInputValue ? 1 : 0);\n    _.invoke(this.props, 'onChangeText', expandableInputValue);\n    this.toggleExpandableModal(false);\n  };\n\n  onKeyPress = event => {\n    this.lastKey = event.nativeEvent.key;\n    _.invoke(this.props, 'onKeyPress', event);\n  };\n\n  onChangeText = text => {\n    // when character count exceeds maxLength text will be empty string.\n    // HACK: To avoid setting state value to '' we check the source of that deletion\n    if (text === '' && this.lastKey && this.lastKey !== 'Backspace') {\n      return;\n    }\n\n    const {transformer} = this.props;\n    let transformedText = text;\n    if (_.isFunction(transformer)) {\n      transformedText = transformer(text);\n    }\n\n    _.invoke(this.props, 'onChangeText', transformedText);\n    this.setState({value: transformedText}, this.updateFloatingPlaceholderState);\n  };\n\n  onFocus = (...args) => {\n    _.invoke(this.props, 'onFocus', ...args);\n    this.setState({focused: true}, this.updateFloatingPlaceholderState);\n  };\n\n  onBlur = (...args) => {\n    _.invoke(this.props, 'onBlur', ...args);\n    this.setState({focused: false}, this.updateFloatingPlaceholderState);\n  };\n}\n\nfunction createStyles({placeholderTextColor, centered}) {\n  return StyleSheet.create({\n    container: {},\n    innerContainer: {\n      flexDirection: 'row',\n      borderBottomWidth: 1,\n      borderColor: Colors.dark70,\n      justifyContent: centered ? 'center' : undefined,\n      flexGrow: 1\n    },\n    innerContainerWithoutUnderline: {\n      borderBottomWidth: 0\n    },\n    input: {\n      flexGrow: 1,\n      marginBottom: Constants.isIOS ? 10 : 5,\n      padding: 0,\n      textAlign: centered ? 'center' : undefined,\n      backgroundColor: 'transparent'\n    },\n    expandableInput: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      flexGrow: 1\n    },\n    inputWithoutUnderline: {\n      marginBottom: undefined\n    },\n    floatingPlaceholder: {\n      position: 'absolute',\n      width: '100%',\n      backgroundColor: 'transparent'\n    },\n    placeholder: {\n      color: placeholderTextColor\n    },\n    placeholderCentered: {\n      left: 0,\n      right: 0,\n      textAlign: 'center'\n    },\n    errorMessage: {\n      color: Colors.red30,\n      textAlign: centered ? 'center' : undefined\n    },\n    expandableModalContent: {\n      flex: 1,\n      paddingTop: 15,\n      paddingHorizontal: 20\n    },\n    topLabel: {\n      marginBottom: Constants.isIOS ? 6 : 7\n    },\n    bottomLabel: {\n      marginTop: 1\n    },\n    label: {\n      ...LABEL_TYPOGRAPHY,\n      height: LABEL_TYPOGRAPHY.lineHeight\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}