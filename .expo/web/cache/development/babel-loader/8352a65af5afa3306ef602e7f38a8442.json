{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _asPanViewConsumer = _interopRequireDefault(require(\"../panningViews/asPanViewConsumer\"));\n\nvar _panningProvider = _interopRequireDefault(require(\"../panningViews/panningProvider\"));\n\nvar _panResponderView = _interopRequireDefault(require(\"../panningViews/panResponderView\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\dialog\\\\DialogDismissibleView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar MAXIMUM_DRAGS_AFTER_SWIPE = 2;\n\nvar DialogDismissibleView = function (_PureComponent) {\n  (0, _inherits2.default)(DialogDismissibleView, _PureComponent);\n\n  var _super = _createSuper(DialogDismissibleView);\n\n  function DialogDismissibleView(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DialogDismissibleView);\n    _this = _super.call(this, props);\n\n    _this.resetSwipe = function () {\n      _this.counter = 0;\n      _this.swipe = {};\n    };\n\n    _this.isSwiping = function () {\n      return _this.swipe.x || _this.swipe.y;\n    };\n\n    _this.onDrag = function () {\n      if (_this.isSwiping()) {\n        if (_this.counter < MAXIMUM_DRAGS_AFTER_SWIPE) {\n          _this.counter += 1;\n        } else {\n          _this.resetSwipe();\n        }\n      }\n    };\n\n    _this.onSwipe = function (swipeDirections) {\n      _this.swipe = swipeDirections;\n    };\n\n    _this.onAnimationEnd = function () {\n      _this.setState({\n        isAnimating: false\n      });\n    };\n\n    _this.getHiddenLocation = function (left, top) {\n      var direction = _this.props.direction;\n      var topInset = _helpers.Constants.isIphoneX ? _helpers.Constants.getSafeAreaInsets().top : _helpers.Constants.isIOS ? 20 : 0;\n      var result = {\n        left: 0,\n        top: 0\n      };\n\n      switch (direction) {\n        case _panningProvider.default.Directions.LEFT:\n          result.left = -left - _this.width;\n          break;\n\n        case _panningProvider.default.Directions.RIGHT:\n          result.left = _helpers.Constants.screenWidth - left;\n          break;\n\n        case _panningProvider.default.Directions.UP:\n          result.top = -top - _this.height - topInset;\n          break;\n\n        case _panningProvider.default.Directions.DOWN:\n        default:\n          result.top = _helpers.Constants.screenHeight - top;\n          break;\n      }\n\n      return result;\n    };\n\n    _this.animateTo = function (toValue, animationEndCallback) {\n      var animation = _reactNative.Animated.timing(_this.animatedValue, {\n        toValue: toValue,\n        duration: 400,\n        easing: _reactNative.Easing.bezier(0.165, 0.84, 0.44, 1),\n        useNativeDriver: true\n      });\n\n      _this.setState({\n        isAnimating: true\n      }, function () {\n        return animation.start(animationEndCallback);\n      });\n    };\n\n    _this.getAnimationStyle = function () {\n      return {\n        transform: [{\n          translateX: _this.animatedValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [_this.hiddenLocation.left, 0]\n          })\n        }, {\n          translateY: _this.animatedValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [_this.hiddenLocation.top, 0]\n          })\n        }]\n      };\n    };\n\n    _this.onLayout = function (event) {\n      var layout = event.nativeEvent.layout;\n      _this.width = layout.width;\n      _this.height = layout.height;\n      _this.thresholdX = _this.width / 2;\n      _this.thresholdY = _this.height / 2;\n\n      _this.ref.measureInWindow(function (x, y) {\n        _this.hiddenLocation = _this.getHiddenLocation(x, y);\n        _this.animationStyle = _this.getAnimationStyle();\n\n        _this.animateTo(1, _this.onAnimationEnd);\n      });\n    };\n\n    _this.hide = function () {\n      var onDismiss = _this.props.onDismiss;\n\n      _this.animateTo(0, function () {\n        return _this.setState({\n          visible: false,\n          hide: false\n        }, onDismiss);\n      });\n    };\n\n    _this.resetToShown = function (left, top, direction) {\n      var toValue = [_panningProvider.default.Directions.LEFT, _panningProvider.default.Directions.RIGHT].includes(direction) ? 1 + left / _this.hiddenLocation.left : 1 + top / _this.hiddenLocation.top;\n\n      _this.animateTo(toValue, _this.onAnimationEnd);\n    };\n\n    _this.onPanLocationChanged = function (_ref) {\n      var left = _ref.left,\n          top = _ref.top;\n      var direction = _this.props.direction;\n      var endValue = {\n        x: Math.round(left),\n        y: Math.round(top)\n      };\n\n      if (_this.isSwiping()) {\n        _this.hide();\n      } else {\n        _this.resetSwipe();\n\n        if (direction === _panningProvider.default.Directions.LEFT && endValue.x <= -_this.thresholdX || direction === _panningProvider.default.Directions.RIGHT && endValue.x >= _this.thresholdX || direction === _panningProvider.default.Directions.UP && endValue.y <= -_this.thresholdY || direction === _panningProvider.default.Directions.DOWN && endValue.y >= _this.thresholdY) {\n          _this.hide();\n        } else {\n          _this.resetToShown(left, top, direction);\n        }\n      }\n    };\n\n    _this.setInitialValues();\n\n    _this.state = {\n      visible: props.visible,\n      hide: false,\n      isAnimating: false\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(DialogDismissibleView, [{\n    key: \"setInitialValues\",\n    value: function setInitialValues() {\n      this.hiddenLocation = {};\n      this.resetSwipe();\n      this.animatedValue = new _reactNative.Animated.Value(0);\n      this.width = _helpers.Constants.screenWidth;\n      this.height = _helpers.Constants.screenHeight;\n      this.hiddenLocation = this.getHiddenLocation(0, 0);\n      this.animationStyle = {\n        transform: [{\n          translateX: this.hiddenLocation.left\n        }, {\n          translateY: this.hiddenLocation.top\n        }]\n      };\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props$context = this.props.context,\n          isPanning = _this$props$context.isPanning,\n          dragDeltas = _this$props$context.dragDeltas,\n          swipeDirections = _this$props$context.swipeDirections;\n      var _prevProps$context = prevProps.context,\n          prevDragDeltas = _prevProps$context.dragDeltas,\n          prevSwipeDirections = _prevProps$context.swipeDirections;\n      var _this$state = this.state,\n          hide = _this$state.hide,\n          isAnimating = _this$state.isAnimating;\n\n      if (isPanning && (dragDeltas.x || dragDeltas.y) && (dragDeltas.x !== prevDragDeltas.x || dragDeltas.y !== prevDragDeltas.y)) {\n        this.onDrag();\n      }\n\n      if (isPanning && (swipeDirections.x || swipeDirections.y) && (swipeDirections.x !== prevSwipeDirections.x || swipeDirections.y !== prevSwipeDirections.y)) {\n        this.onSwipe(swipeDirections);\n      }\n\n      if (hide && !isAnimating) {\n        this.hide();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          containerStyle = _this$props.containerStyle,\n          style = _this$props.style;\n      var visible = this.state.visible;\n      return _react.default.createElement(_view.default, {\n        ref: function ref(r) {\n          return _this2.ref = r;\n        },\n        style: containerStyle,\n        onLayout: this.onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_panResponderView.default, {\n        style: [style, this.animationStyle, !visible && styles.hidden],\n        isAnimated: true,\n        onPanLocationChanged: this.onPanLocationChanged,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 9\n        }\n      }, this.props.children));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var visible = nextProps.visible;\n      var prevVisible = prevState.visible;\n\n      if (prevVisible && !visible) {\n        return {\n          hide: true\n        };\n      }\n\n      return null;\n    }\n  }]);\n  return DialogDismissibleView;\n}(_react.PureComponent);\n\nDialogDismissibleView.propTypes = {\n  direction: _propTypes.default.oneOf(Object.values(_panningProvider.default.Directions)),\n  onDismiss: _propTypes.default.func,\n  containerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),\n  visible: _propTypes.default.bool\n};\nDialogDismissibleView.defaultProps = {\n  direction: _panningProvider.default.Directions.DOWN,\n  onDismiss: _lodash.default.noop\n};\n\nvar _default = (0, _asPanViewConsumer.default)(DialogDismissibleView);\n\nexports.default = _default;\n\nvar styles = _reactNative.StyleSheet.create({\n  hidden: {\n    opacity: 0\n  }\n});","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/dialog/DialogDismissibleView.js"],"names":["MAXIMUM_DRAGS_AFTER_SWIPE","DialogDismissibleView","props","resetSwipe","counter","swipe","isSwiping","x","y","onDrag","onSwipe","swipeDirections","onAnimationEnd","setState","isAnimating","getHiddenLocation","left","top","direction","topInset","Constants","isIphoneX","getSafeAreaInsets","isIOS","result","PanningProvider","Directions","LEFT","width","RIGHT","screenWidth","UP","height","DOWN","screenHeight","animateTo","toValue","animationEndCallback","animation","Animated","timing","animatedValue","duration","easing","Easing","bezier","useNativeDriver","start","getAnimationStyle","transform","translateX","interpolate","inputRange","outputRange","hiddenLocation","translateY","onLayout","event","layout","nativeEvent","thresholdX","thresholdY","ref","measureInWindow","animationStyle","hide","onDismiss","visible","resetToShown","includes","onPanLocationChanged","endValue","Math","round","setInitialValues","state","Value","prevProps","context","isPanning","dragDeltas","prevDragDeltas","prevSwipeDirections","containerStyle","style","r","styles","hidden","children","nextProps","prevState","prevVisible","PureComponent","propTypes","PropTypes","oneOf","Object","values","func","oneOfType","object","number","array","bool","defaultProps","_","noop","StyleSheet","create","opacity"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, {PureComponent} from 'react';\nimport {Animated, Easing, StyleSheet} from 'react-native';\nimport {Constants} from '../../helpers';\nimport View from '../view';\nimport asPanViewConsumer from '../panningViews/asPanViewConsumer';\nimport PanningProvider from '../panningViews/panningProvider';\nimport PanResponderView from '../panningViews/panResponderView';\n\nconst MAXIMUM_DRAGS_AFTER_SWIPE = 2;\n\nclass DialogDismissibleView extends PureComponent {\n  static propTypes = {\n    /**\n     * The direction of the allowed pan (default is DOWN)\n     * Types: UP, DOWN, LEFT and RIGHT (using PanningProvider.Directions.###)\n     */\n    direction: PropTypes.oneOf(Object.values(PanningProvider.Directions)),\n    /**\n     * onDismiss callback\n     */\n    onDismiss: PropTypes.func,\n    /**\n     * The dialog`s container style\n     */\n    containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * Whether to show the dialog or not\n     */\n    visible: PropTypes.bool\n  };\n\n  static defaultProps = {\n    direction: PanningProvider.Directions.DOWN,\n    onDismiss: _.noop\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.setInitialValues();\n    this.state = {\n      visible: props.visible,\n      hide: false,\n      isAnimating: false\n    };\n  }\n\n  setInitialValues() {\n    this.hiddenLocation = {};\n    this.resetSwipe();\n    this.animatedValue = new Animated.Value(0);\n    this.width = Constants.screenWidth;\n    this.height = Constants.screenHeight;\n    this.hiddenLocation = this.getHiddenLocation(0, 0);\n    this.animationStyle = {\n      transform: [\n        {\n          translateX: this.hiddenLocation.left\n        },\n        {\n          translateY: this.hiddenLocation.top\n        }\n      ]\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {isPanning, dragDeltas, swipeDirections} = this.props.context; // eslint-disable-line\n    const {dragDeltas: prevDragDeltas, swipeDirections: prevSwipeDirections} = prevProps.context; // eslint-disable-line\n    const {hide, isAnimating} = this.state;\n\n    if (\n      isPanning &&\n      (dragDeltas.x || dragDeltas.y) &&\n      (dragDeltas.x !== prevDragDeltas.x || dragDeltas.y !== prevDragDeltas.y)\n    ) {\n      this.onDrag();\n    }\n\n    if (\n      isPanning &&\n      (swipeDirections.x || swipeDirections.y) &&\n      (swipeDirections.x !== prevSwipeDirections.x || swipeDirections.y !== prevSwipeDirections.y)\n    ) {\n      this.onSwipe(swipeDirections);\n    }\n\n    if (hide && !isAnimating) {\n      this.hide();\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {visible} = nextProps;\n    const {visible: prevVisible} = prevState;\n\n    if (prevVisible && !visible) {\n      return {hide: true};\n    }\n\n    return null;\n  }\n\n  resetSwipe = () => {\n    this.counter = 0;\n    this.swipe = {};\n  };\n\n  isSwiping = () => {\n    return this.swipe.x || this.swipe.y;\n  };\n\n  onDrag = () => {\n    if (this.isSwiping()) {\n      if (this.counter < MAXIMUM_DRAGS_AFTER_SWIPE) {\n        this.counter += 1;\n      } else {\n        this.resetSwipe();\n      }\n    }\n  };\n\n  onSwipe = swipeDirections => {\n    this.swipe = swipeDirections;\n  };\n\n  onAnimationEnd = () => {\n    this.setState({isAnimating: false});\n  };\n\n  getHiddenLocation = (left, top) => {\n    const {direction} = this.props;\n    const topInset = Constants.isIphoneX ? Constants.getSafeAreaInsets().top : Constants.isIOS ? 20 : 0;\n    const result = {left: 0, top: 0};\n    switch (direction) {\n      case PanningProvider.Directions.LEFT:\n        result.left = -left - this.width;\n        break;\n      case PanningProvider.Directions.RIGHT:\n        result.left = Constants.screenWidth - left;\n        break;\n      case PanningProvider.Directions.UP:\n        result.top = -top - this.height - topInset;\n        break;\n      case PanningProvider.Directions.DOWN:\n      default:\n        result.top = Constants.screenHeight - top;\n        break;\n    }\n\n    return result;\n  };\n\n  animateTo = (toValue, animationEndCallback) => {\n    const animation = Animated.timing(this.animatedValue, {\n      toValue,\n      duration: 400,\n      easing: Easing.bezier(0.165, 0.84, 0.44, 1),\n      useNativeDriver: true\n    });\n\n    this.setState({isAnimating: true}, () => animation.start(animationEndCallback));\n  };\n\n  getAnimationStyle = () => {\n    return {\n      transform: [\n        {\n          translateX: this.animatedValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [this.hiddenLocation.left, 0]\n          })\n        },\n        {\n          translateY: this.animatedValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [this.hiddenLocation.top, 0]\n          })\n        }\n      ]\n    };\n  };\n\n  onLayout = event => {\n    // DO NOT move the width\\height into the measureInWindow - it causes errors with orientation change\n    const layout = event.nativeEvent.layout;\n    this.width = layout.width;\n    this.height = layout.height;\n    this.thresholdX = this.width / 2;\n    this.thresholdY = this.height / 2;\n    this.ref.measureInWindow((x, y) => {\n      this.hiddenLocation = this.getHiddenLocation(x, y);\n      this.animationStyle = this.getAnimationStyle();\n      this.animateTo(1, this.onAnimationEnd);\n    });\n  };\n\n  hide = () => {\n    const {onDismiss} = this.props;\n    // TODO: test we're not animating?\n    this.animateTo(0, () => this.setState({visible: false, hide: false}, onDismiss));\n  };\n\n  resetToShown = (left, top, direction) => {\n    const toValue = [PanningProvider.Directions.LEFT, PanningProvider.Directions.RIGHT].includes(direction)\n      ? 1 + left / this.hiddenLocation.left\n      : 1 + top / this.hiddenLocation.top;\n\n    this.animateTo(toValue, this.onAnimationEnd);\n  };\n\n  onPanLocationChanged = ({left, top}) => {\n    const {direction} = this.props;\n    const endValue = {x: Math.round(left), y: Math.round(top)};\n    if (this.isSwiping()) {\n      this.hide();\n    } else {\n      this.resetSwipe();\n      if (\n        (direction === PanningProvider.Directions.LEFT && endValue.x <= -this.thresholdX) ||\n        (direction === PanningProvider.Directions.RIGHT && endValue.x >= this.thresholdX) ||\n        (direction === PanningProvider.Directions.UP && endValue.y <= -this.thresholdY) ||\n        (direction === PanningProvider.Directions.DOWN && endValue.y >= this.thresholdY)\n      ) {\n        this.hide();\n      } else {\n        this.resetToShown(left, top, direction);\n      }\n    }\n  };\n\n  render() {\n    const {containerStyle, style} = this.props;\n    const {visible} = this.state;\n\n    return (\n      <View ref={r => (this.ref = r)} style={containerStyle} onLayout={this.onLayout}>\n        <PanResponderView\n          // !visible && styles.hidden is done to fix a bug is iOS\n          style={[style, this.animationStyle, !visible && styles.hidden]}\n          isAnimated\n          onPanLocationChanged={this.onPanLocationChanged}\n        >\n          {this.props.children}\n        </PanResponderView>\n      </View>\n    );\n  }\n}\n\nexport default asPanViewConsumer(DialogDismissibleView);\n\nconst styles = StyleSheet.create({\n  hidden: {\n    opacity: 0\n  }\n});\n"]},"metadata":{},"sourceType":"script"}