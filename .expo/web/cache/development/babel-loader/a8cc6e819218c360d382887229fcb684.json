{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\src\\\\components\\\\SegmentedControl.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar RNSSegmentedControl = function RNSSegmentedControl(_ref) {\n  var type = _ref.type,\n      values = _ref.values,\n      selectedIndex = _ref.selectedIndex,\n      selectionColor = _ref.selectionColor,\n      onChange = _ref.onChange,\n      style = _ref.style;\n  var segments = values.map(function (value, index) {\n    return _react.default.createElement(Segment, {\n      type: type,\n      key: value,\n      value: value,\n      isSelected: index === selectedIndex,\n      selectionColor: selectionColor,\n      onPress: function onPress() {\n        return onChange(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }\n    });\n  });\n  return _react.default.createElement(_reactNative.View, {\n    style: [styles.container, style],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }\n  }, segments);\n};\n\nfunction Segment(_ref2) {\n  var isSelected = _ref2.isSelected,\n      onPress = _ref2.onPress,\n      selectionColor = _ref2.selectionColor,\n      value = _ref2.value,\n      type = _ref2.type;\n  var selectedButtonStyle;\n\n  if (isSelected) {\n    selectedButtonStyle = {\n      borderColor: selectionColor\n    };\n  }\n\n  var deselectedLabelStyle;\n\n  if (!isSelected && _reactNative.Platform.OS === 'android') {\n    deselectedLabelStyle = styles.deselectedLabel;\n  }\n\n  var title = value && value.toUpperCase();\n  var accessibilityTraits = ['button'];\n\n  if (isSelected) {\n    accessibilityTraits.push('selected');\n  }\n\n  return _react.default.createElement(_reactNative.TouchableOpacity, {\n    accessibilityTraits: accessibilityTraits,\n    activeOpacity: 0.8,\n    onPress: onPress,\n    style: [styles.button, type === 'default' && styles.default, type === 'underline' && styles.underline, selectedButtonStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: [styles.label, deselectedLabelStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, title));\n}\n\nvar HEIGHT = 32;\n\nvar styles = _reactNative.StyleSheet.create({\n  container: _objectSpread({\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  }, _reactNative.Platform.select({\n    ios: {\n      paddingBottom: 6,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  })),\n  button: {\n    borderColor: 'transparent',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent'\n  },\n  default: _objectSpread({}, _reactNative.Platform.select({\n    ios: {\n      height: HEIGHT,\n      paddingHorizontal: 20,\n      borderRadius: HEIGHT / 2,\n      borderWidth: 1\n    },\n    android: {\n      paddingBottom: 6,\n      paddingHorizontal: 10,\n      borderBottomWidth: 3,\n      marginRight: 10\n    }\n  })),\n  underline: {\n    paddingBottom: 6,\n    paddingHorizontal: 10,\n    borderBottomWidth: 2,\n    marginRight: 10\n  },\n  label: {\n    letterSpacing: 1,\n    fontSize: 12,\n    color: 'white',\n    opacity: 0.82\n  },\n  deselectedLabel: {\n    color: 'rgba(255, 255, 255, 0.7)'\n  }\n});\n\nvar _default = RNSSegmentedControl;\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/src/components/SegmentedControl.js"],"names":["RNSSegmentedControl","type","values","selectedIndex","selectionColor","onChange","style","segments","map","value","index","styles","container","Segment","isSelected","onPress","selectedButtonStyle","borderColor","deselectedLabelStyle","Platform","OS","deselectedLabel","title","toUpperCase","accessibilityTraits","push","button","default","underline","label","HEIGHT","StyleSheet","create","flexDirection","backgroundColor","select","ios","paddingBottom","justifyContent","alignItems","height","paddingHorizontal","borderRadius","borderWidth","android","borderBottomWidth","marginRight","letterSpacing","fontSize","color","opacity"],"mappings":"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","sourcesContent":["/**\n * @flow\n * @providesModule RNSSegmentedControl\n */\n\nimport React from 'react';\nimport {\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  View,\n  Platform,\n} from 'react-native';\n\n// $FlowFixMe\nconst RNSSegmentedControl = ({\n  type,\n  values,\n  selectedIndex,\n  selectionColor,\n  onChange,\n  style,\n}) => {\n  const segments = values.map((value, index) => (\n    <Segment\n      type={type}\n      key={value}\n      value={value}\n      isSelected={index === selectedIndex}\n      selectionColor={selectionColor}\n      onPress={() => onChange(index)}\n    />\n  ));\n  return <View style={[styles.container, style]}>{segments}</View>;\n};\n\nfunction Segment({ isSelected, onPress, selectionColor, value, type }) {\n  let selectedButtonStyle;\n  if (isSelected) {\n    selectedButtonStyle = { borderColor: selectionColor };\n  }\n  let deselectedLabelStyle;\n  if (!isSelected && Platform.OS === 'android') {\n    deselectedLabelStyle = styles.deselectedLabel;\n  }\n  const title = value && value.toUpperCase();\n\n  const accessibilityTraits = ['button'];\n  if (isSelected) {\n    accessibilityTraits.push('selected');\n  }\n\n  return (\n    // $FlowFixMe\n    <TouchableOpacity\n      accessibilityTraits={accessibilityTraits}\n      activeOpacity={0.8}\n      onPress={onPress}\n      style={[\n        styles.button,\n        type === 'default' && styles.default,\n        type === 'underline' && styles.underline,\n        selectedButtonStyle,\n      ]}\n    >\n      <Text style={[styles.label, deselectedLabelStyle]}>{title}</Text>\n    </TouchableOpacity>\n  );\n}\n\nconst HEIGHT = 32;\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    backgroundColor: 'transparent',\n    ...Platform.select({\n      ios: {\n        paddingBottom: 6,\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n    }),\n  },\n  button: {\n    borderColor: 'transparent',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent',\n  },\n  default: {\n    ...Platform.select({\n      ios: {\n        height: HEIGHT,\n        paddingHorizontal: 20,\n        borderRadius: HEIGHT / 2,\n        borderWidth: 1,\n      },\n      android: {\n        paddingBottom: 6,\n        paddingHorizontal: 10,\n        borderBottomWidth: 3,\n        marginRight: 10,\n      },\n    }),\n  },\n  underline: {\n    paddingBottom: 6,\n    paddingHorizontal: 10,\n    borderBottomWidth: 2,\n    marginRight: 10,\n  },\n  label: {\n    letterSpacing: 1,\n    fontSize: 12,\n    color: 'white',\n    opacity: 0.82,\n  },\n  deselectedLabel: {\n    color: 'rgba(255, 255, 255, 0.7)',\n  },\n});\n\nexport default RNSSegmentedControl;\n"]},"metadata":{},"sourceType":"script"}