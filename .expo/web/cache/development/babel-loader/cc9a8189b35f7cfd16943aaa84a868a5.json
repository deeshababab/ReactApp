{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _style = require(\"../../style\");\n\nvar _commons = require(\"../../commons\");\n\nvar _modal = _interopRequireDefault(require(\"../../screensComponents/modal\"));\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _panListenerView = _interopRequireDefault(require(\"../panningViews/panListenerView\"));\n\nvar _DialogDismissibleView = _interopRequireDefault(require(\"./DialogDismissibleView\"));\n\nvar _panningProvider = _interopRequireDefault(require(\"../panningViews/panningProvider\"));\n\nvar _dialogDeprecated = _interopRequireDefault(require(\"./dialogDeprecated\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\dialog\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Dialog = function (_BaseComponent) {\n  (0, _inherits2.default)(Dialog, _BaseComponent);\n\n  var _super = _createSuper(Dialog);\n\n  function Dialog(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Dialog);\n    _this = _super.call(this, props);\n\n    _this.onOrientationChange = function () {\n      var orientationKey = _helpers.Constants.orientation;\n\n      if (_this.state.orientationKey !== orientationKey) {\n        _this.setState({\n          orientationKey: orientationKey\n        });\n      }\n    };\n\n    _this.onDismiss = function () {\n      _this.setState({\n        modalVisibility: false\n      }, function () {\n        if (_this.props.visible) {\n          _lodash.default.invoke(_this.props, 'onDismiss', _this.props);\n        }\n      });\n    };\n\n    _this.hideDialogView = function () {\n      _this.setState({\n        dialogVisibility: false\n      });\n    };\n\n    _this.renderPannableHeader = function (directions) {\n      var _this$props = _this.props,\n          renderPannableHeader = _this$props.renderPannableHeader,\n          pannableHeaderProps = _this$props.pannableHeaderProps;\n\n      if (renderPannableHeader) {\n        return _react.default.createElement(_panListenerView.default, {\n          directions: directions,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 14\n          }\n        }, renderPannableHeader(pannableHeaderProps));\n      }\n    };\n\n    _this.renderDialogView = function () {\n      var _this$props2 = _this.props,\n          children = _this$props2.children,\n          renderPannableHeader = _this$props2.renderPannableHeader,\n          panDirection = _this$props2.panDirection,\n          containerStyle = _this$props2.containerStyle,\n          testID = _this$props2.testID;\n      var dialogVisibility = _this.state.dialogVisibility;\n      var Container = renderPannableHeader ? _view.default : _panListenerView.default;\n      return _react.default.createElement(_view.default, {\n        testID: testID,\n        style: [_this.styles.dialogViewSize],\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_panningProvider.default, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_DialogDismissibleView.default, {\n        direction: panDirection,\n        visible: dialogVisibility,\n        onDismiss: _this.onDismiss,\n        containerStyle: _this.styles.flexType,\n        style: _this.styles.flexType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(Container, {\n        directions: [panDirection],\n        style: [_this.styles.overflow, _this.styles.flexType, containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }\n      }, _this.renderPannableHeader([panDirection]), children))));\n    };\n\n    _this.renderDialogContainer = function () {\n      var _this$props3 = _this.props,\n          useSafeArea = _this$props3.useSafeArea,\n          bottom = _this$props3.bottom;\n      var addBottomSafeArea = _helpers.Constants.isIphoneX && useSafeArea && bottom;\n      var bottomInsets = _helpers.Constants.getSafeAreaInsets().bottom - 8;\n      return _react.default.createElement(_view.default, {\n        useSafeArea: useSafeArea,\n        style: [_this.styles.centerHorizontal, _this.styles.alignments, _this.styles.container],\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 7\n        }\n      }, _this.renderDialogView(), addBottomSafeArea && _react.default.createElement(_view.default, {\n        style: {\n          marginTop: bottomInsets\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 31\n        }\n      }));\n    };\n\n    _this.renderModal = function () {\n      var _this$state = _this.state,\n          orientationKey = _this$state.orientationKey,\n          modalVisibility = _this$state.modalVisibility;\n\n      var _this$getThemeProps = _this.getThemeProps(),\n          overlayBackgroundColor = _this$getThemeProps.overlayBackgroundColor,\n          onModalDismissed = _this$getThemeProps.onModalDismissed,\n          supportedOrientations = _this$getThemeProps.supportedOrientations;\n\n      return _react.default.createElement(_modal.default, {\n        key: orientationKey,\n        transparent: true,\n        visible: modalVisibility,\n        animationType: 'fade',\n        onBackgroundPress: _this.hideDialogView,\n        onRequestClose: _this.hideDialogView,\n        overlayBackgroundColor: overlayBackgroundColor,\n        onDismiss: onModalDismissed,\n        supportedOrientations: supportedOrientations,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 7\n        }\n      }, _this.renderDialogContainer());\n    };\n\n    _this.state = {\n      alignments: _this.state.alignments,\n      orientationKey: _helpers.Constants.orientation,\n      modalVisibility: props.visible,\n      dialogVisibility: props.visible\n    };\n\n    if (props.migrate) {\n      _this.setAlignment();\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Dialog, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _helpers.Constants.addDimensionsEventListener(this.onOrientationChange);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _helpers.Constants.removeDimensionsEventListener(this.onOrientationChange);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var nexVisible = nextProps.visible;\n      var visible = this.props.visible;\n\n      if (nexVisible && !visible) {\n        this.setState({\n          modalVisibility: true,\n          dialogVisibility: true\n        });\n      } else if (visible && !nexVisible) {\n        this.hideDialogView();\n      }\n    }\n  }, {\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      if (this.props.migrate) {\n        this.styles = createStyles(this.props);\n      }\n    }\n  }, {\n    key: \"setAlignment\",\n    value: function setAlignment() {\n      var alignments = this.state.alignments;\n\n      if (_lodash.default.isEmpty(alignments)) {\n        this.styles.alignments = this.styles.centerContent;\n      } else {\n        this.styles.alignments = alignments;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$getThemeProps2 = this.getThemeProps(),\n          migrate = _this$getThemeProps2.migrate,\n          others = (0, _objectWithoutProperties2.default)(_this$getThemeProps2, [\"migrate\"]);\n\n      if (migrate) {\n        return this.renderModal();\n      } else {\n        return _react.default.createElement(_dialogDeprecated.default, (0, _extends2.default)({}, others, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 14\n          }\n        }));\n      }\n    }\n  }]);\n  return Dialog;\n}(_commons.BaseComponent);\n\nDialog.displayName = 'Dialog';\nDialog.propTypes = {\n  visible: _propTypes.default.bool,\n  onDismiss: _propTypes.default.func,\n  overlayBackgroundColor: _propTypes.default.string,\n  width: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n  height: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n  panDirection: _propTypes.default.oneOf(Object.values(_panningProvider.default.Directions)),\n  useSafeArea: _propTypes.default.bool,\n  onModalDismissed: _propTypes.default.func,\n  renderPannableHeader: _propTypes.default.func,\n  pannableHeaderProps: _propTypes.default.any,\n  migrate: _propTypes.default.bool,\n  containerStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array])\n};\nDialog.defaultProps = {\n  migrate: false,\n  overlayBackgroundColor: _style.Colors.rgba(_style.Colors.dark10, 0.6),\n  width: '90%'\n};\n\nfunction createStyles(props) {\n  var width = props.width,\n      height = props.height;\n  var flexType = height ? {\n    flex: 1\n  } : {\n    flex: 0\n  };\n  return _reactNative.StyleSheet.create({\n    dialogViewSize: {\n      width: width,\n      height: height\n    },\n    flexType: flexType,\n    container: {\n      flex: 1\n    },\n    centerHorizontal: {\n      alignItems: 'center'\n    },\n    centerContent: {\n      justifyContent: 'center'\n    },\n    overflow: {\n      overflow: 'hidden'\n    }\n  });\n}\n\nvar _default = Dialog;\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/dialog/index.js"],"names":["Dialog","props","onOrientationChange","orientationKey","Constants","orientation","state","setState","onDismiss","modalVisibility","visible","_","invoke","hideDialogView","dialogVisibility","renderPannableHeader","directions","pannableHeaderProps","renderDialogView","children","panDirection","containerStyle","testID","Container","View","PanListenerView","styles","dialogViewSize","flexType","overflow","renderDialogContainer","useSafeArea","bottom","addBottomSafeArea","isIphoneX","bottomInsets","getSafeAreaInsets","centerHorizontal","alignments","container","marginTop","renderModal","getThemeProps","overlayBackgroundColor","onModalDismissed","supportedOrientations","migrate","setAlignment","addDimensionsEventListener","removeDimensionsEventListener","nextProps","nexVisible","createStyles","isEmpty","centerContent","others","BaseComponent","displayName","propTypes","PropTypes","bool","func","string","width","oneOfType","number","height","oneOf","Object","values","PanningProvider","Directions","any","object","array","defaultProps","Colors","rgba","dark10","flex","StyleSheet","create","alignItems","justifyContent"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IAgBMA,M;;;;;AA8DJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;AACjB,8BAAMA,KAAN;;AADiB,UAkCnBC,mBAlCmB,GAkCG,YAAM;AAC1B,UAAMC,cAAc,GAAGC,mBAAUC,WAAjC;;AACA,UAAI,MAAKC,KAAL,CAAWH,cAAX,KAA8BA,cAAlC,EAAkD;AAChD,cAAKI,QAAL,CAAc;AAACJ,UAAAA,cAAc,EAAdA;AAAD,SAAd;AACD;AACF,KAvCkB;;AAAA,UAwDnBK,SAxDmB,GAwDP,YAAM;AAChB,YAAKD,QAAL,CAAc;AAACE,QAAAA,eAAe,EAAE;AAAlB,OAAd,EAAwC,YAAM;AAC5C,YAAI,MAAKR,KAAL,CAAWS,OAAf,EAAwB;AACtBC,0BAAEC,MAAF,CAAS,MAAKX,KAAd,EAAqB,WAArB,EAAkC,MAAKA,KAAvC;AACD;AACF,OAJD;AAKD,KA9DkB;;AAAA,UAgEnBY,cAhEmB,GAgEF,YAAM;AACrB,YAAKN,QAAL,CAAc;AAACO,QAAAA,gBAAgB,EAAE;AAAnB,OAAd;AACD,KAlEkB;;AAAA,UAoEnBC,oBApEmB,GAoEI,UAAAC,UAAU,EAAI;AAAA,wBACiB,MAAKf,KADtB;AAAA,UAC5Bc,oBAD4B,eAC5BA,oBAD4B;AAAA,UACNE,mBADM,eACNA,mBADM;;AAEnC,UAAIF,oBAAJ,EAA0B;AACxB,eAAO,6BAAC,wBAAD;AAAiB,UAAA,UAAU,EAAEC,UAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA0CD,oBAAoB,CAACE,mBAAD,CAA9D,CAAP;AACD;AACF,KAzEkB;;AAAA,UA2EnBC,gBA3EmB,GA2EA,YAAM;AAAA,yBACwD,MAAKjB,KAD7D;AAAA,UAChBkB,QADgB,gBAChBA,QADgB;AAAA,UACNJ,oBADM,gBACNA,oBADM;AAAA,UACgBK,YADhB,gBACgBA,YADhB;AAAA,UAC8BC,cAD9B,gBAC8BA,cAD9B;AAAA,UAC8CC,MAD9C,gBAC8CA,MAD9C;AAAA,UAEhBR,gBAFgB,GAEI,MAAKR,KAFT,CAEhBQ,gBAFgB;AAGvB,UAAMS,SAAS,GAAGR,oBAAoB,GAAGS,aAAH,GAAUC,wBAAhD;AAEA,aACE,6BAAC,aAAD;AAAM,QAAA,MAAM,EAAEH,MAAd;AAAsB,QAAA,KAAK,EAAE,CAAC,MAAKI,MAAL,CAAYC,cAAb,CAA7B;AAA2D,QAAA,aAAa,EAAC,UAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,wBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,8BAAD;AACE,QAAA,SAAS,EAAEP,YADb;AAEE,QAAA,OAAO,EAAEN,gBAFX;AAGE,QAAA,SAAS,EAAE,MAAKN,SAHlB;AAIE,QAAA,cAAc,EAAE,MAAKkB,MAAL,CAAYE,QAJ9B;AAKE,QAAA,KAAK,EAAE,MAAKF,MAAL,CAAYE,QALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOE,6BAAC,SAAD;AAAW,QAAA,UAAU,EAAE,CAACR,YAAD,CAAvB;AAAuC,QAAA,KAAK,EAAE,CAAC,MAAKM,MAAL,CAAYG,QAAb,EAAuB,MAAKH,MAAL,CAAYE,QAAnC,EAA6CP,cAA7C,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,MAAKN,oBAAL,CAA0B,CAACK,YAAD,CAA1B,CADH,EAEGD,QAFH,CAPF,CADF,CADF,CADF;AAkBD,KAlGkB;;AAAA,UAqGnBW,qBArGmB,GAqGK,YAAM;AAAA,yBACE,MAAK7B,KADP;AAAA,UACrB8B,WADqB,gBACrBA,WADqB;AAAA,UACRC,MADQ,gBACRA,MADQ;AAE5B,UAAMC,iBAAiB,GAAG7B,mBAAU8B,SAAV,IAAwBH,WAAW,IAAIC,MAAjE;AACA,UAAMG,YAAY,GAAG/B,mBAAUgC,iBAAV,GAA8BJ,MAA9B,GAAuC,CAA5D;AAEA,aACE,6BAAC,aAAD;AACE,QAAA,WAAW,EAAED,WADf;AAEE,QAAA,KAAK,EAAE,CAAC,MAAKL,MAAL,CAAYW,gBAAb,EAA+B,MAAKX,MAAL,CAAYY,UAA3C,EAAuD,MAAKZ,MAAL,CAAYa,SAAnE,CAFT;AAGE,QAAA,aAAa,EAAC,UAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG,MAAKrB,gBAAL,EALH,EAMGe,iBAAiB,IAAI,6BAAC,aAAD;AAAM,QAAA,KAAK,EAAE;AAACO,UAAAA,SAAS,EAAEL;AAAZ,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANxB,CADF;AAUD,KApHkB;;AAAA,UAsHnBM,WAtHmB,GAsHL,YAAM;AAAA,wBACwB,MAAKnC,KAD7B;AAAA,UACXH,cADW,eACXA,cADW;AAAA,UACKM,eADL,eACKA,eADL;;AAAA,gCAEwD,MAAKiC,aAAL,EAFxD;AAAA,UAEXC,sBAFW,uBAEXA,sBAFW;AAAA,UAEaC,gBAFb,uBAEaA,gBAFb;AAAA,UAE+BC,qBAF/B,uBAE+BA,qBAF/B;;AAIlB,aACE,6BAAC,cAAD;AACE,QAAA,GAAG,EAAE1C,cADP;AAEE,QAAA,WAAW,MAFb;AAGE,QAAA,OAAO,EAAEM,eAHX;AAIE,QAAA,aAAa,EAAE,MAJjB;AAKE,QAAA,iBAAiB,EAAE,MAAKI,cAL1B;AAME,QAAA,cAAc,EAAE,MAAKA,cANvB;AAOE,QAAA,sBAAsB,EAAE8B,sBAP1B;AAQE,QAAA,SAAS,EAAEC,gBARb;AASE,QAAA,qBAAqB,EAAEC,qBATzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWG,MAAKf,qBAAL,EAXH,CADF;AAeD,KAzIkB;;AAGjB,UAAKxB,KAAL,GAAa;AACXgC,MAAAA,UAAU,EAAE,MAAKhC,KAAL,CAAWgC,UADZ;AAEXnC,MAAAA,cAAc,EAAEC,mBAAUC,WAFf;AAGXI,MAAAA,eAAe,EAAER,KAAK,CAACS,OAHZ;AAIXI,MAAAA,gBAAgB,EAAEb,KAAK,CAACS;AAJb,KAAb;;AAOA,QAAIT,KAAK,CAAC6C,OAAV,EAAmB;AACjB,YAAKC,YAAL;AACD;;AAZgB;AAalB;;;;wCAEmB;AAClB3C,yBAAU4C,0BAAV,CAAqC,KAAK9C,mBAA1C;AACD;;;2CAEsB;AACrBE,yBAAU6C,6BAAV,CAAwC,KAAK/C,mBAA7C;AACD;;;qDAEgCgD,S,EAAW;AAAA,UAC1BC,UAD0B,GACZD,SADY,CACnCxC,OADmC;AAAA,UAEnCA,OAFmC,GAExB,KAAKT,KAFmB,CAEnCS,OAFmC;;AAI1C,UAAIyC,UAAU,IAAI,CAACzC,OAAnB,EAA4B;AAC1B,aAAKH,QAAL,CAAc;AAACE,UAAAA,eAAe,EAAE,IAAlB;AAAwBK,UAAAA,gBAAgB,EAAE;AAA1C,SAAd;AACD,OAFD,MAEO,IAAIJ,OAAO,IAAI,CAACyC,UAAhB,EAA4B;AACjC,aAAKtC,cAAL;AACD;AACF;;;qCASgB;AACf,UAAI,KAAKZ,KAAL,CAAW6C,OAAf,EAAwB;AACtB,aAAKpB,MAAL,GAAc0B,YAAY,CAAC,KAAKnD,KAAN,CAA1B;AACD;AACF;;;mCAEc;AAAA,UACNqC,UADM,GACQ,KAAKhC,KADb,CACNgC,UADM;;AAEb,UAAI3B,gBAAE0C,OAAF,CAAUf,UAAV,CAAJ,EAA2B;AACzB,aAAKZ,MAAL,CAAYY,UAAZ,GAAyB,KAAKZ,MAAL,CAAY4B,aAArC;AACD,OAFD,MAEO;AACL,aAAK5B,MAAL,CAAYY,UAAZ,GAAyBA,UAAzB;AACD;AACF;;;6BAqFQ;AAAA,iCACsB,KAAKI,aAAL,EADtB;AAAA,UACAI,OADA,wBACAA,OADA;AAAA,UACYS,MADZ;;AAGP,UAAIT,OAAJ,EAAa;AACX,eAAO,KAAKL,WAAL,EAAP;AACD,OAFD,MAEO;AACL,eAAO,6BAAC,yBAAD,6BAAsBc,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD;AACF;;;EAjNkBC,sB;;AAAfxD,M,CACGyD,W,GAAc,Q;AADjBzD,M,CAEG0D,S,GAAY;AAIjBhD,EAAAA,OAAO,EAAEiD,mBAAUC,IAJF;AAQjBpD,EAAAA,SAAS,EAAEmD,mBAAUE,IARJ;AAYjBlB,EAAAA,sBAAsB,EAAEgB,mBAAUG,MAZjB;AAgBjBC,EAAAA,KAAK,EAAEJ,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUG,MAA7B,CAApB,CAhBU;AAoBjBI,EAAAA,MAAM,EAAEP,mBAAUK,SAAV,CAAoB,CAACL,mBAAUM,MAAX,EAAmBN,mBAAUG,MAA7B,CAApB,CApBS;AAyBjB1C,EAAAA,YAAY,EAAEuC,mBAAUQ,KAAV,CAAgBC,MAAM,CAACC,MAAP,CAAcC,yBAAgBC,UAA9B,CAAhB,CAzBG;AA6BjBxC,EAAAA,WAAW,EAAE4B,mBAAUC,IA7BN;AAiCjBhB,EAAAA,gBAAgB,EAAEe,mBAAUE,IAjCX;AAuCjB9C,EAAAA,oBAAoB,EAAE4C,mBAAUE,IAvCf;AA2CjB5C,EAAAA,mBAAmB,EAAE0C,mBAAUa,GA3Cd;AA+CjB1B,EAAAA,OAAO,EAAEa,mBAAUC,IA/CF;AAmDjBvC,EAAAA,cAAc,EAAEsC,mBAAUK,SAAV,CAAoB,CAACL,mBAAUc,MAAX,EAAmBd,mBAAUM,MAA7B,EAAqCN,mBAAUe,KAA/C,CAApB;AAnDC,C;AAFf1E,M,CAwDG2E,Y,GAAe;AACpB7B,EAAAA,OAAO,EAAE,KADW;AAEpBH,EAAAA,sBAAsB,EAAEiC,cAAOC,IAAP,CAAYD,cAAOE,MAAnB,EAA2B,GAA3B,CAFJ;AAGpBf,EAAAA,KAAK,EAAE;AAHa,C;;AA4JxB,SAASX,YAAT,CAAsBnD,KAAtB,EAA6B;AAAA,MACpB8D,KADoB,GACH9D,KADG,CACpB8D,KADoB;AAAA,MACbG,MADa,GACHjE,KADG,CACbiE,MADa;AAE3B,MAAMtC,QAAQ,GAAGsC,MAAM,GAAG;AAACa,IAAAA,IAAI,EAAE;AAAP,GAAH,GAAe;AAACA,IAAAA,IAAI,EAAE;AAAP,GAAtC;AACA,SAAOC,wBAAWC,MAAX,CAAkB;AACvBtD,IAAAA,cAAc,EAAE;AAACoC,MAAAA,KAAK,EAALA,KAAD;AAAQG,MAAAA,MAAM,EAANA;AAAR,KADO;AAEvBtC,IAAAA,QAAQ,EAARA,QAFuB;AAGvBW,IAAAA,SAAS,EAAE;AACTwC,MAAAA,IAAI,EAAE;AADG,KAHY;AAMvB1C,IAAAA,gBAAgB,EAAE;AAChB6C,MAAAA,UAAU,EAAE;AADI,KANK;AASvB5B,IAAAA,aAAa,EAAE;AACb6B,MAAAA,cAAc,EAAE;AADH,KATQ;AAYvBtD,IAAAA,QAAQ,EAAE;AACRA,MAAAA,QAAQ,EAAE;AADF;AAZa,GAAlB,CAAP;AAgBD;;eAEc7B,M","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet} from 'react-native';\nimport {Constants} from '../../helpers';\nimport {Colors} from '../../style';\nimport {BaseComponent} from '../../commons';\nimport Modal from '../../screensComponents/modal';\nimport View from '../view';\nimport PanListenerView from '../panningViews/panListenerView';\nimport DialogDismissibleView from './DialogDismissibleView';\nimport PanningProvider from '../panningViews/panningProvider';\nimport DialogDeprecated from './dialogDeprecated';\n\n// TODO: KNOWN ISSUES\n// 1. iOS pressing on the background while enter animation is happening will not call onDismiss\n//    Touch events are not registered?\n// 2. SafeArea is transparent\n// 3. Check why we need the state change in DialogDismissibleView -> onLayout -> animateTo\n\n/**\n * @description: Dialog component for displaying custom content inside a popup dialog\n * @notes: Use alignment modifiers to control the dialog position\n * (top, bottom, centerV, centerH, etc... by default the dialog is aligned to center)\n * @modifiers: alignment\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DialogScreen.js\n * @gif: https://media.giphy.com/media/9S58XdLCoUiLzAc1b1/giphy.gif\n */\nclass Dialog extends BaseComponent {\n  static displayName = 'Dialog';\n  static propTypes = {\n    /**\n     * Control visibility of the dialog\n     */\n    visible: PropTypes.bool,\n    /**\n     * Dismiss callback for when clicking on the background\n     */\n    onDismiss: PropTypes.func,\n    /**\n     * The color of the overlay background\n     */\n    overlayBackgroundColor: PropTypes.string,\n    /**\n     * The dialog width (default: 90%)\n     */\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    /**\n     * The dialog height (default: undefined)\n     */\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    /**\n     * The direction of the allowed pan (default is DOWN)\n     * Types: UP, DOWN, LEFT and RIGHT (using PanningProvider.Directions.###)\n     */\n    panDirection: PropTypes.oneOf(Object.values(PanningProvider.Directions)),\n    /**\n     * Whether or not to handle SafeArea\n     */\n    useSafeArea: PropTypes.bool,\n    /**\n     * Called once the modal has been dissmissed (iOS only, modal only)\n     */\n    onModalDismissed: PropTypes.func,\n    /**\n     * If this is added only the header will be pannable;\n     * this allows for scrollable content (the children of the dialog)\n     * props are transferred to the renderPannableHeader\n     */\n    renderPannableHeader: PropTypes.func,\n    /**\n     * The props that will be passed to the pannable header\n     */\n    pannableHeaderProps: PropTypes.any,\n    /**\n     * Migration flag, send true to use the new (and improved) Dialog, default is false\n     */\n    migrate: PropTypes.bool,\n    /**\n     * The Dialog`s container style\n     */\n    containerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array])\n  };\n\n  static defaultProps = {\n    migrate: false,\n    overlayBackgroundColor: Colors.rgba(Colors.dark10, 0.6),\n    width: '90%'\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      alignments: this.state.alignments,\n      orientationKey: Constants.orientation,\n      modalVisibility: props.visible,\n      dialogVisibility: props.visible\n    };\n\n    if (props.migrate) {\n      this.setAlignment();\n    }\n  }\n\n  componentDidMount() {\n    Constants.addDimensionsEventListener(this.onOrientationChange);\n  }\n\n  componentWillUnmount() {\n    Constants.removeDimensionsEventListener(this.onOrientationChange);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {visible: nexVisible} = nextProps;\n    const {visible} = this.props;\n\n    if (nexVisible && !visible) {\n      this.setState({modalVisibility: true, dialogVisibility: true});\n    } else if (visible && !nexVisible) {\n      this.hideDialogView();\n    }\n  }\n\n  onOrientationChange = () => {\n    const orientationKey = Constants.orientation;\n    if (this.state.orientationKey !== orientationKey) {\n      this.setState({orientationKey});\n    }\n  };\n\n  generateStyles() {\n    if (this.props.migrate) {\n      this.styles = createStyles(this.props);\n    }\n  }\n\n  setAlignment() {\n    const {alignments} = this.state;\n    if (_.isEmpty(alignments)) {\n      this.styles.alignments = this.styles.centerContent;\n    } else {\n      this.styles.alignments = alignments;\n    }\n  }\n\n  onDismiss = () => {\n    this.setState({modalVisibility: false}, () => {\n      if (this.props.visible) {\n        _.invoke(this.props, 'onDismiss', this.props);\n      }\n    });\n  };\n\n  hideDialogView = () => {\n    this.setState({dialogVisibility: false});\n  };\n\n  renderPannableHeader = directions => {\n    const {renderPannableHeader, pannableHeaderProps} = this.props;\n    if (renderPannableHeader) {\n      return <PanListenerView directions={directions}>{renderPannableHeader(pannableHeaderProps)}</PanListenerView>;\n    }\n  };\n\n  renderDialogView = () => {\n    const {children, renderPannableHeader, panDirection, containerStyle, testID} = this.props;\n    const {dialogVisibility} = this.state;\n    const Container = renderPannableHeader ? View : PanListenerView;\n\n    return (\n      <View testID={testID} style={[this.styles.dialogViewSize]} pointerEvents=\"box-none\">\n        <PanningProvider>\n          <DialogDismissibleView\n            direction={panDirection}\n            visible={dialogVisibility}\n            onDismiss={this.onDismiss}\n            containerStyle={this.styles.flexType}\n            style={this.styles.flexType}\n          >\n            <Container directions={[panDirection]} style={[this.styles.overflow, this.styles.flexType, containerStyle]}>\n              {this.renderPannableHeader([panDirection])}\n              {children}\n            </Container>\n          </DialogDismissibleView>\n        </PanningProvider>\n      </View>\n    );\n  };\n\n  // TODO: renderOverlay {_.invoke(this.props, 'renderOverlay')}\n  renderDialogContainer = () => {\n    const {useSafeArea, bottom} = this.props;\n    const addBottomSafeArea = Constants.isIphoneX && (useSafeArea && bottom);\n    const bottomInsets = Constants.getSafeAreaInsets().bottom - 8; // TODO: should this be here or in the input style?\n\n    return (\n      <View\n        useSafeArea={useSafeArea}\n        style={[this.styles.centerHorizontal, this.styles.alignments, this.styles.container]}\n        pointerEvents=\"box-none\"\n      >\n        {this.renderDialogView()}\n        {addBottomSafeArea && <View style={{marginTop: bottomInsets}}/>}\n      </View>\n    );\n  };\n\n  renderModal = () => {\n    const {orientationKey, modalVisibility} = this.state;\n    const {overlayBackgroundColor, onModalDismissed, supportedOrientations} = this.getThemeProps();\n\n    return (\n      <Modal\n        key={orientationKey}\n        transparent\n        visible={modalVisibility}\n        animationType={'fade'}\n        onBackgroundPress={this.hideDialogView}\n        onRequestClose={this.hideDialogView}\n        overlayBackgroundColor={overlayBackgroundColor}\n        onDismiss={onModalDismissed}\n        supportedOrientations={supportedOrientations}\n      >\n        {this.renderDialogContainer()}\n      </Modal>\n    );\n  };\n\n  render() {\n    const {migrate, ...others} = this.getThemeProps();\n\n    if (migrate) {\n      return this.renderModal();\n    } else {\n      return <DialogDeprecated {...others}/>;\n    }\n  }\n}\n\nfunction createStyles(props) {\n  const {width, height} = props;\n  const flexType = height ? {flex: 1} : {flex: 0};\n  return StyleSheet.create({\n    dialogViewSize: {width, height},\n    flexType,\n    container: {\n      flex: 1\n    },\n    centerHorizontal: {\n      alignItems: 'center'\n    },\n    centerContent: {\n      justifyContent: 'center'\n    },\n    overflow: {\n      overflow: 'hidden'\n    }\n  });\n}\n\nexport default Dialog;\n"]},"metadata":{},"sourceType":"script"}