{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getChildrenLength = getChildrenLength;\nexports.calcOffset = calcOffset;\nexports.calcPageIndex = calcPageIndex;\nexports.isOutOfBounds = isOutOfBounds;\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction getChildrenLength(props) {\n  var length = _lodash.default.get(props, 'children.length') || 0;\n  return length;\n}\n\nfunction calcOffset(props, state) {\n  var currentPage = state.currentPage,\n      pageWidth = state.pageWidth;\n  var loop = props.loop;\n  var actualCurrentPage = loop ? currentPage + 1 : currentPage;\n  var offset = pageWidth * actualCurrentPage;\n  return offset;\n}\n\nfunction calcPageIndex(offset, props, pageWidth) {\n  var pagesCount = getChildrenLength(props);\n  var loop = props.loop;\n  var pageIndexIncludingClonedPages = Math.round(offset / pageWidth);\n  var actualPageIndex;\n\n  if (loop) {\n    actualPageIndex = (pageIndexIncludingClonedPages + (pagesCount - 1)) % pagesCount;\n  } else {\n    actualPageIndex = Math.min(pagesCount - 1, pageIndexIncludingClonedPages);\n  }\n\n  return actualPageIndex;\n}\n\nfunction isOutOfBounds(offset, props, pageWidth) {\n  var length = getChildrenLength(props);\n  var minLimit = 1;\n  var maxLimit = (length + 1) * pageWidth - 1;\n  return !_lodash.default.inRange(offset, minLimit, maxLimit);\n}","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/carousel/CarouselPresenter.js"],"names":["getChildrenLength","props","length","_","get","calcOffset","state","currentPage","pageWidth","loop","actualCurrentPage","offset","calcPageIndex","pagesCount","pageIndexIncludingClonedPages","Math","round","actualPageIndex","min","isOutOfBounds","minLimit","maxLimit","inRange"],"mappings":";;;;;;;;;;AAAA;;AAGO,SAASA,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC,MAAMC,MAAM,GAAGC,gBAAEC,GAAF,CAAMH,KAAN,EAAa,iBAAb,KAAmC,CAAlD;AACA,SAAOC,MAAP;AACD;;AAEM,SAASG,UAAT,CAAoBJ,KAApB,EAA2BK,KAA3B,EAAkC;AAAA,MAChCC,WADgC,GACND,KADM,CAChCC,WADgC;AAAA,MACnBC,SADmB,GACNF,KADM,CACnBE,SADmB;AAAA,MAEhCC,IAFgC,GAExBR,KAFwB,CAEhCQ,IAFgC;AAGvC,MAAMC,iBAAiB,GAAGD,IAAI,GAAGF,WAAW,GAAG,CAAjB,GAAqBA,WAAnD;AACA,MAAMI,MAAM,GAAGH,SAAS,GAAGE,iBAA3B;AAEA,SAAOC,MAAP;AACD;;AAEM,SAASC,aAAT,CAAuBD,MAAvB,EAA+BV,KAA/B,EAAsCO,SAAtC,EAAiD;AACtD,MAAMK,UAAU,GAAGb,iBAAiB,CAACC,KAAD,CAApC;AADsD,MAE/CQ,IAF+C,GAEvCR,KAFuC,CAE/CQ,IAF+C;AAGtD,MAAMK,6BAA6B,GAAGC,IAAI,CAACC,KAAL,CAAWL,MAAM,GAAGH,SAApB,CAAtC;AAEA,MAAIS,eAAJ;;AACA,MAAIR,IAAJ,EAAU;AACRQ,IAAAA,eAAe,GAAG,CAACH,6BAA6B,IAAID,UAAU,GAAG,CAAjB,CAA9B,IAAqDA,UAAvE;AACD,GAFD,MAEO;AACLI,IAAAA,eAAe,GAAGF,IAAI,CAACG,GAAL,CAASL,UAAU,GAAG,CAAtB,EAAyBC,6BAAzB,CAAlB;AACD;;AACD,SAAOG,eAAP;AACD;;AAEM,SAASE,aAAT,CAAuBR,MAAvB,EAA+BV,KAA/B,EAAsCO,SAAtC,EAAiD;AACtD,MAAMN,MAAM,GAAGF,iBAAiB,CAACC,KAAD,CAAhC;AACA,MAAMmB,QAAQ,GAAG,CAAjB;AACA,MAAMC,QAAQ,GAAI,CAACnB,MAAM,GAAG,CAAV,IAAeM,SAAhB,GAA6B,CAA9C;AAEA,SAAO,CAACL,gBAAEmB,OAAF,CAAUX,MAAV,EAAkBS,QAAlB,EAA4BC,QAA5B,CAAR;AACD","sourcesContent":["import _ from 'lodash';\n\n\nexport function getChildrenLength(props) {\n  const length = _.get(props, 'children.length') || 0;\n  return length;\n}\n\nexport function calcOffset(props, state) {\n  const {currentPage, pageWidth} = state;\n  const {loop} = props;\n  const actualCurrentPage = loop ? currentPage + 1 : currentPage;\n  const offset = pageWidth * actualCurrentPage;\n\n  return offset;\n}\n\nexport function calcPageIndex(offset, props, pageWidth) {\n  const pagesCount = getChildrenLength(props);\n  const {loop} = props;\n  const pageIndexIncludingClonedPages = Math.round(offset / pageWidth);\n\n  let actualPageIndex;\n  if (loop) {\n    actualPageIndex = (pageIndexIncludingClonedPages + (pagesCount - 1)) % pagesCount;\n  } else {\n    actualPageIndex = Math.min(pagesCount - 1, pageIndexIncludingClonedPages);\n  }\n  return actualPageIndex;\n}\n\nexport function isOutOfBounds(offset, props, pageWidth) {\n  const length = getChildrenLength(props);\n  const minLimit = 1;\n  const maxLimit = ((length + 1) * pageWidth) - 1;\n\n  return !_.inRange(offset, minLimit, maxLimit);\n}\n"]},"metadata":{},"sourceType":"script"}