{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _style = require(\"../../style\");\n\nvar _commons = require(\"../../commons\");\n\nvar _view = _interopRequireDefault(require(\"../../components/view\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\animatedScanner\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedScanner = function (_BaseComponent) {\n  (0, _inherits2.default)(AnimatedScanner, _BaseComponent);\n\n  var _super = _createSuper(AnimatedScanner);\n\n  function AnimatedScanner(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AnimatedScanner);\n    _this = _super.call(this, props);\n    _this.state = {\n      animatedProgress: new _reactNative.Animated.Value(0),\n      isDone: false\n    };\n\n    if (!_lodash.default.isNumber(props.progress)) {\n      console.warn('[react-native-ui-lib]! please check out the new api for AnimatedScanner. progress now accepts number instead of Animated Value');\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(AnimatedScanner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          progress = _this$props.progress,\n          duration = _this$props.duration;\n\n      if (progress > 0) {\n        this.animate(progress, duration);\n      }\n    }\n  }, {\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.props);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var progress = this.props.progress;\n\n      if (nextProps.progress !== progress) {\n        this.animate(nextProps.progress, nextProps.duration);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.animatedProgress.stopAnimation();\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(toValue, duration) {\n      var _this2 = this;\n\n      var animatedProgress = this.state.animatedProgress;\n\n      _reactNative.Animated.timing(animatedProgress, {\n        toValue: toValue,\n        duration: duration\n      }).start(function (_ref) {\n        var finished = _ref.finished;\n\n        if (finished) {\n          var isDone = toValue >= 100;\n\n          _this2.setState({\n            isDone: isDone\n          });\n\n          _lodash.default.invoke(_this2.props, 'onBreakpoint', {\n            progress: toValue,\n            isDone: isDone\n          });\n        }\n      });\n    }\n  }, {\n    key: \"renderNew\",\n    value: function renderNew() {\n      var _this$props2 = this.props,\n          opacity = _this$props2.opacity,\n          backgroundColor = _this$props2.backgroundColor,\n          hideScannerLine = _this$props2.hideScannerLine,\n          style = _this$props2.style;\n      var _this$state = this.state,\n          isDone = _this$state.isDone,\n          animatedProgress = _this$state.animatedProgress;\n      return _react.default.createElement(_view.default, {\n        style: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.Animated.View, {\n        style: [this.styles.container, style, opacity && {\n          opacity: opacity\n        }, backgroundColor && {\n          backgroundColor: backgroundColor\n        }, {\n          left: animatedProgress.interpolate({\n            inputRange: [0, 100],\n            outputRange: ['0%', '100%']\n          })\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, isDone && !hideScannerLine && _react.default.createElement(_view.default, {\n        style: this.styles.scanner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 42\n        }\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (_lodash.default.isNumber(this.props.progress)) {\n        return this.renderNew();\n      }\n\n      return this.renderOld();\n    }\n  }, {\n    key: \"renderOld\",\n    value: function renderOld() {\n      var _this$props3 = this.props,\n          progress = _this$props3.progress,\n          opacity = _this$props3.opacity,\n          backgroundColor = _this$props3.backgroundColor;\n      return _react.default.createElement(_reactNative.Animated.View, {\n        style: [this.styles.container, opacity && {\n          opacity: opacity\n        }, backgroundColor && {\n          backgroundColor: backgroundColor\n        }, {\n          right: progress.interpolate({\n            inputRange: [0, 5, 55, 100],\n            outputRange: [_helpers.Constants.screenWidth, _helpers.Constants.screenWidth / 2, _helpers.Constants.screenWidth / 3, 0]\n          })\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, JSON.stringify(progress) !== '100' && _react.default.createElement(_view.default, {\n        style: this.styles.scanner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 48\n        }\n      }));\n    }\n  }]);\n  return AnimatedScanner;\n}(_commons.BaseComponent);\n\nexports.default = AnimatedScanner;\nAnimatedScanner.displayName = 'AnimatedScanner';\nAnimatedScanner.propTypes = {\n  progress: _propTypes.default.number,\n  duration: _propTypes.default.number,\n  opacity: _propTypes.default.number,\n  backgroundColor: _propTypes.default.string,\n  onBreakpoint: _propTypes.default.func,\n  hideScannerLine: _propTypes.default.bool\n};\nAnimatedScanner.defaultProps = {\n  progress: 0,\n  duration: 1000\n};\n\nfunction createStyles() {\n  return _reactNative.StyleSheet.create({\n    container: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: _style.Colors.white,\n      opacity: 0.9\n    },\n    scanner: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n      borderWidth: _reactNative.StyleSheet.hairlineWidth,\n      borderColor: _style.Colors.dark50\n    }\n  });\n}","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/animatedScanner/index.js"],"names":["AnimatedScanner","props","state","animatedProgress","Animated","Value","isDone","_","isNumber","progress","console","warn","duration","animate","styles","createStyles","nextProps","stopAnimation","toValue","timing","start","finished","setState","invoke","opacity","backgroundColor","hideScannerLine","style","StyleSheet","absoluteFillObject","container","left","interpolate","inputRange","outputRange","scanner","renderNew","renderOld","right","Constants","screenWidth","JSON","stringify","BaseComponent","displayName","propTypes","PropTypes","number","string","onBreakpoint","func","bool","defaultProps","create","position","top","bottom","Colors","white","borderWidth","hairlineWidth","borderColor","dark50"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, Animated} from 'react-native';\nimport {Constants} from '../../helpers';\nimport {Colors} from '../../style';\nimport {BaseComponent} from '../../commons';\nimport View from '../../components/view';\n\n// TODO: add finisher animation (check icon animation or something)\n// TODO: remove deprecated functionality\n/**\n * @description: Scanner component for progress indication\n * @extends: Animated.View\n * @gif: https://media.giphy.com/media/l49JVcxoclUXbryiA/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/animationScreens/CardScannerScreen.js\n */\nexport default class AnimatedScanner extends BaseComponent {\n  static displayName = 'AnimatedScanner';\n  static propTypes = {\n    /**\n     * animated value between 0 and 100\n     */\n    // progress: PropTypes.object,\n    progress: PropTypes.number,\n    /**\n     * Duration of current break (can be change between breaks)\n     */\n    duration: PropTypes.number,\n    /**\n     * scanner opacity\n     */\n    opacity: PropTypes.number,\n    /**\n     * scanner background color\n     */\n    backgroundColor: PropTypes.string,\n    /**\n     * breakpoint callback - ({progress, isDone}) => {}\n     */\n    onBreakpoint: PropTypes.func,\n    /**\n     * should hide the scanner line\n     */\n    hideScannerLine: PropTypes.bool\n  };\n\n  static defaultProps = {\n    progress: 0,\n    duration: 1000\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animatedProgress: new Animated.Value(0),\n      isDone: false\n    };\n\n    if (!_.isNumber(props.progress)) {\n      console.warn('[react-native-ui-lib]! please check out the new api for AnimatedScanner. progress now accepts number instead of Animated Value',\n      ); // eslint-disable-line\n    }\n  }\n\n  componentDidMount() {\n    const {progress, duration} = this.props;\n    if (progress > 0) {\n      this.animate(progress, duration);\n    }\n  }\n\n  generateStyles() {\n    this.styles = createStyles(this.props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const {progress} = this.props;\n    if (nextProps.progress !== progress) {\n      this.animate(nextProps.progress, nextProps.duration);\n    }\n  }\n\n  componentWillUnmount() {\n    this.state.animatedProgress.stopAnimation();\n  }\n\n  animate(toValue, duration) {\n    const {animatedProgress} = this.state;\n    Animated.timing(animatedProgress, {\n      toValue,\n      duration\n    }).start(({finished}) => {\n      if (finished) {\n        const isDone = toValue >= 100;\n        this.setState({\n          isDone\n        });\n        _.invoke(this.props, 'onBreakpoint', {progress: toValue, isDone});\n      }\n    });\n  }\n\n  renderNew() {\n    const {opacity, backgroundColor, hideScannerLine, style} = this.props;\n    const {isDone, animatedProgress} = this.state;\n    return (\n      <View style={{...StyleSheet.absoluteFillObject}}>\n        <Animated.View\n          style={[\n            this.styles.container,\n            style,\n            opacity && {opacity},\n            backgroundColor && {backgroundColor},\n            {\n              left: animatedProgress.interpolate({\n                inputRange: [0, 100],\n                outputRange: ['0%', '100%']\n              })\n            }\n          ]}\n        >\n          {isDone && !hideScannerLine && <View style={this.styles.scanner}/>}\n        </Animated.View>\n      </View>\n    );\n  }\n\n  render() {\n    if (_.isNumber(this.props.progress)) {\n      return this.renderNew();\n    }\n    // TODO: deprecate\n    return this.renderOld();\n  }\n\n  // TODO: deprecate\n  renderOld() {\n    const {progress, opacity, backgroundColor} = this.props;\n    return (\n      <Animated.View\n        style={[\n          this.styles.container,\n          opacity && {opacity},\n          backgroundColor && {backgroundColor},\n          {\n            right: progress.interpolate({\n              inputRange: [0, 5, 55, 100],\n              outputRange: [Constants.screenWidth, Constants.screenWidth / 2, Constants.screenWidth / 3, 0]\n            })\n          }\n        ]}\n      >\n        {JSON.stringify(progress) !== '100' && <View style={this.styles.scanner}/>}\n      </Animated.View>\n    );\n  }\n}\n\nfunction createStyles() {\n  return StyleSheet.create({\n    container: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: Colors.white,\n      opacity: 0.9\n    },\n    scanner: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n      borderWidth: StyleSheet.hairlineWidth,\n      borderColor: Colors.dark50\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}