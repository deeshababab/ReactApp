{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _color = _interopRequireDefault(require(\"color\"));\n\nvar _tinycolor = _interopRequireDefault(require(\"tinycolor2\"));\n\nvar _colorsPalette = require(\"./colorsPalette\");\n\nvar Colors = function () {\n  function Colors() {\n    (0, _classCallCheck2.default)(this, Colors);\n    this.generateColorPalette = _lodash.default.memoize(function (color) {\n      var hsl = (0, _color.default)(color).hsl();\n      var lightness = Math.round(hsl.color[2]);\n      var ls = [hsl.color[2]];\n      var l = lightness - 10;\n\n      while (l >= 20) {\n        ls.unshift(l);\n        l -= 10;\n      }\n\n      l = lightness + 10;\n\n      while (l < 100) {\n        ls.push(l);\n        l += 10;\n      }\n\n      var tints = [];\n\n      _lodash.default.forEach(ls, function (e) {\n        var tint = generateColorTint(color, e);\n        tints.push(tint);\n      });\n\n      var sliced = tints.slice(0, 8);\n      var adjusted = adjustSaturation(sliced, color);\n      return adjusted || sliced;\n    });\n  }\n\n  (0, _createClass2.default)(Colors, [{\n    key: \"loadColors\",\n    value: function loadColors(colors) {\n      var _this = this;\n\n      _lodash.default.forEach(colors, function (value, key) {\n        _this[key] = value;\n      });\n    }\n  }, {\n    key: \"rgba\",\n    value: function rgba(p1, p2, p3, p4) {\n      var hex;\n      var opacity;\n      var red;\n      var green;\n      var blue;\n\n      if (arguments.length === 2) {\n        hex = p1;\n        opacity = p2;\n        hex = validateHex(hex);\n        red = parseInt(hex.substring(0, 2), 16);\n        green = parseInt(hex.substring(2, 4), 16);\n        blue = parseInt(hex.substring(4, 6), 16);\n      } else if (arguments.length === 4) {\n        red = validateRGB(p1);\n        green = validateRGB(p2);\n        blue = validateRGB(p3);\n        opacity = p4;\n      } else {\n        throw new Error('rgba can work with either 2 or 4 arguments');\n      }\n\n      return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + opacity + \")\";\n    }\n  }, {\n    key: \"getBackgroundKeysPattern\",\n    value: function getBackgroundKeysPattern() {\n      return /^(bg-|background-)/;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty(color) {\n      if (_lodash.default.isNil(color) || color === 'transparent') {\n        return true;\n      }\n\n      try {\n        (0, _color.default)(color);\n        return false;\n      } catch (error) {\n        console.warn('Colors.isEmpty failed:', error);\n        return true;\n      }\n    }\n  }, {\n    key: \"getColorTint\",\n    value: function getColorTint(color, tintKey) {\n      var _this2 = this;\n\n      if (_lodash.default.isUndefined(tintKey) || isNaN(tintKey) || _lodash.default.isUndefined(color)) {\n        return color;\n      }\n\n      if (color === 'transparent') {\n        return color;\n      }\n\n      var colorKey = _lodash.default.findKey(this, function (value, key) {\n        return _this2[key] === color;\n      });\n\n      if (colorKey) {\n        var requiredColorKey = \"\" + colorKey.slice(0, -2) + tintKey;\n        var requiredColor = this[requiredColorKey];\n\n        if (_lodash.default.isUndefined(requiredColor)) {\n          return this.getTintedColorForDynamicHex(color, tintKey);\n        }\n\n        return requiredColor;\n      }\n\n      return this.getTintedColorForDynamicHex(color, tintKey);\n    }\n  }, {\n    key: \"getTintedColorForDynamicHex\",\n    value: function getTintedColorForDynamicHex(color, tintKey) {\n      var tintLevel = Math.floor(Number(tintKey) / 10);\n      tintLevel = Math.max(1, tintLevel);\n      tintLevel = Math.min(8, tintLevel);\n      var colorsPalette = this.generateColorPalette(color);\n      return colorsPalette[tintLevel - 1];\n    }\n  }, {\n    key: \"isDark\",\n    value: function isDark(color) {\n      var lum = (0, _tinycolor.default)(color).getLuminance();\n      return lum < 0.55;\n    }\n  }, {\n    key: \"isValidHex\",\n    value: function isValidHex(string) {\n      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(string);\n    }\n  }, {\n    key: \"getHexString\",\n    value: function getHexString(color) {\n      return (0, _tinycolor.default)(color).toHexString();\n    }\n  }, {\n    key: \"getHSL\",\n    value: function getHSL(color) {\n      return (0, _tinycolor.default)(color).toHsl();\n    }\n  }, {\n    key: \"isTransparent\",\n    value: function isTransparent(color) {\n      return _lodash.default.toUpper(color) === _lodash.default.toUpper('transparent');\n    }\n  }, {\n    key: \"areEqual\",\n    value: function areEqual(colorA, colorB) {\n      return _lodash.default.toLower(colorA) === _lodash.default.toLower(colorB);\n    }\n  }]);\n  return Colors;\n}();\n\nfunction adjustSaturation(colors, color) {\n  var array;\n  var lightnessLevel = 80;\n  var saturationLevel = 60;\n  var hsl = (0, _color.default)(color).hsl();\n  var lightness = Math.round(hsl.color[2]);\n\n  if (lightness > lightnessLevel) {\n    var saturation = Math.round(hsl.color[1]);\n\n    if (saturation > saturationLevel) {\n      array = _lodash.default.map(colors, function (e) {\n        return e !== color ? addSaturation(e, saturationLevel) : e;\n      });\n    }\n  }\n\n  return array;\n}\n\nfunction addSaturation(color, saturation) {\n  var hsl = (0, _color.default)(color).hsl();\n  hsl.color[1] = saturation;\n  return hsl.hex();\n}\n\nfunction generateColorTint(color, tintLevel) {\n  var hsl = (0, _color.default)(color).hsl();\n  hsl.color[2] = tintLevel;\n  return hsl.hex();\n}\n\nfunction validateRGB(value) {\n  if (isNaN(value) || value > 255 || value < 0) {\n    throw new Error(value + \" is invalid rgb code, please use number between 0-255\");\n  }\n\n  return value;\n}\n\nfunction validateHex(value) {\n  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value)) {\n    throw new Error(value + \" is invalid hex color\");\n  }\n\n  return value.replace('#', '');\n}\n\nvar colorObject = new Colors();\ncolorObject.loadColors(_colorsPalette.colorsPalette);\nvar _default = colorObject;\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/style/colors.js"],"names":["Colors","generateColorPalette","_","memoize","color","hsl","lightness","Math","round","ls","l","unshift","push","tints","forEach","e","tint","generateColorTint","sliced","slice","adjusted","adjustSaturation","colors","value","key","p1","p2","p3","p4","hex","opacity","red","green","blue","arguments","length","validateHex","parseInt","substring","validateRGB","Error","isNil","error","console","warn","tintKey","isUndefined","isNaN","colorKey","findKey","requiredColorKey","requiredColor","getTintedColorForDynamicHex","tintLevel","floor","Number","max","min","colorsPalette","lum","getLuminance","string","test","toHexString","toHsl","toUpper","colorA","colorB","toLower","array","lightnessLevel","saturationLevel","saturation","map","addSaturation","replace","colorObject","loadColors"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport Color from 'color';\nimport tinycolor from 'tinycolor2';\nimport {colorsPalette} from './colorsPalette';\n\nclass Colors {\n  /**\n   * Load custom set of colors\n   * arguments:\n   * colors - map of keys and colors values e.g {dark10: '#20303C', dark20: '#43515C'}\n   */\n  loadColors(colors) {\n    _.forEach(colors, (value, key) => {\n      this[key] = value;\n    });\n  }\n\n  /**\n   * Add alpha to hex or rgb color\n   * arguments:\n   * p1 - hex color / R part of RGB\n   * p2 - opacity / G part of RGB\n   * p3 - B part of RGB\n   * p4 - opacity\n   */\n  rgba(p1, p2, p3, p4) {\n    let hex;\n    let opacity;\n    let red;\n    let green;\n    let blue;\n\n    if (arguments.length === 2) {\n      hex = p1;\n      opacity = p2;\n\n      hex = validateHex(hex);\n      red = parseInt(hex.substring(0, 2), 16);\n      green = parseInt(hex.substring(2, 4), 16);\n      blue = parseInt(hex.substring(4, 6), 16);\n    } else if (arguments.length === 4) {\n      red = validateRGB(p1);\n      green = validateRGB(p2);\n      blue = validateRGB(p3);\n      opacity = p4;\n    } else {\n      throw new Error('rgba can work with either 2 or 4 arguments');\n    }\n    return `rgba(${red}, ${green}, ${blue}, ${opacity})`;\n  }\n\n  getBackgroundKeysPattern() {\n    return /^(bg-|background-)/;\n  }\n\n  isEmpty(color) {\n    if (_.isNil(color) || color === 'transparent') {\n      return true;\n    }\n\n    try {\n      Color(color);\n      return false;\n    } catch (error) {\n      console.warn('Colors.isEmpty failed:', error);\n      return true;\n    }\n  }\n\n  getColorTint(color, tintKey) {\n    if (_.isUndefined(tintKey) || isNaN(tintKey) || _.isUndefined(color)) {\n      // console.error('\"Colors.getColorTint\" must accept a color and tintKey params');\n      return color;\n    }\n\n    if (color === 'transparent') {\n      return color;\n    }\n\n    const colorKey = _.findKey(this, (value, key) => this[key] === color);\n\n    if (colorKey) {\n      const requiredColorKey = `${colorKey.slice(0, -2)}${tintKey}`;\n      const requiredColor = this[requiredColorKey];\n\n      if (_.isUndefined(requiredColor)) {\n        return this.getTintedColorForDynamicHex(color, tintKey);\n      }\n      return requiredColor;\n    }\n    return this.getTintedColorForDynamicHex(color, tintKey);\n  }\n\n  getTintedColorForDynamicHex(color, tintKey) {\n    // Handles dynamic colors (non uilib colors)\n    let tintLevel = Math.floor(Number(tintKey) / 10);\n    tintLevel = Math.max(1, tintLevel);\n    tintLevel = Math.min(8, tintLevel);\n\n    const colorsPalette = this.generateColorPalette(color);\n    return colorsPalette[tintLevel - 1];\n  }\n\n  generateColorPalette = _.memoize(color => {\n    const hsl = Color(color).hsl();\n    const lightness = Math.round(hsl.color[2]);\n\n    const ls = [hsl.color[2]];\n    let l = lightness - 10;\n    while (l >= 20) {\n      ls.unshift(l);\n      l -= 10;\n    }\n\n    l = lightness + 10;\n    while (l < 100) {\n      ls.push(l);\n      l += 10;\n    }\n\n    const tints = [];\n    _.forEach(ls, e => {\n      const tint = generateColorTint(color, e);\n      tints.push(tint);\n    });\n\n    const sliced = tints.slice(0, 8);\n    const adjusted = adjustSaturation(sliced, color);\n    return adjusted || sliced;\n  });\n\n  isDark(color) {\n    const lum = tinycolor(color).getLuminance();\n    return lum < 0.55;\n  }\n  isValidHex(string) {\n    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(string);\n  }\n  getHexString(color) {\n    return tinycolor(color).toHexString();\n  }\n  getHSL(color) {\n    return tinycolor(color).toHsl();\n  }\n  isTransparent(color) {\n    return _.toUpper(color) === _.toUpper('transparent');\n  }\n  areEqual(colorA, colorB) {\n    return _.toLower(colorA) === _.toLower(colorB);\n  }\n}\n\nfunction adjustSaturation(colors, color) {\n  let array;\n  const lightnessLevel = 80;\n  const saturationLevel = 60;\n  const hsl = Color(color).hsl();\n  const lightness = Math.round(hsl.color[2]);\n\n  if (lightness > lightnessLevel) {\n    const saturation = Math.round(hsl.color[1]);\n    if (saturation > saturationLevel) {\n      array = _.map(colors, e => (e !== color ? addSaturation(e, saturationLevel) : e));\n    }\n  }\n  return array;\n}\n\nfunction addSaturation(color, saturation) {\n  const hsl = Color(color).hsl();\n  hsl.color[1] = saturation;\n  return hsl.hex();\n}\n\nfunction generateColorTint(color, tintLevel) {\n  const hsl = Color(color).hsl();\n  hsl.color[2] = tintLevel;\n  return hsl.hex();\n}\n\nfunction validateRGB(value) {\n  if (isNaN(value) || value > 255 || value < 0) {\n    throw new Error(`${value} is invalid rgb code, please use number between 0-255`);\n  }\n  return value;\n}\n\nfunction validateHex(value) {\n  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(value)) {\n    throw new Error(`${value} is invalid hex color`);\n  }\n  return value.replace('#', '');\n}\n\nconst colorObject = new Colors();\ncolorObject.loadColors(colorsPalette);\n\nexport default colorObject;\n"]},"metadata":{},"sourceType":"script"}