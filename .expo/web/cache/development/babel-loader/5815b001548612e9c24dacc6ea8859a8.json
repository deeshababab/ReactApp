{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\interactableComponents\\\\drawer\\\\Swipeable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar DRAG_TOSS = 0.05;\n\nif (!Math.sign) {\n  Math.sign = function (x) {\n    return Number(x > 0) - Number(x < 0) || +x;\n  };\n}\n\nvar Swipeable = function (_Component) {\n  (0, _inherits2.default)(Swipeable, _Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(_props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Swipeable);\n    _this = _super.call(this, _props);\n\n    _this._updateAnimatedEvent = function (props, state) {\n      var friction = props.friction,\n          overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n          rowTranslation = state.rowTranslation,\n          _state$leftWidth = state.leftWidth,\n          leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n          _state$rowWidth = state.rowWidth,\n          rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n          rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n          overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n          _props$overshootRight = props.overshootRight,\n          overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n\n      var transX = _reactNative.Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n\n      _this._transX = transX;\n      _this._showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new _reactNative.Animated.Value(0);\n      _this._leftActionTranslate = _this._showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this._showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new _reactNative.Animated.Value(0);\n      _this._rightActionTranslate = _this._showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    };\n\n    _this._onTapHandlerStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (_this.rowState !== 0) {\n        if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {\n          _this.close();\n        }\n      }\n    };\n\n    _this._onHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === _reactNativeGestureHandler.State.ACTIVE) {\n        _this._handleRelease(nativeEvent);\n      }\n\n      if (nativeEvent.state === _reactNativeGestureHandler.State.ACTIVE) {\n        _this.props.onDragStart && _this.props.onDragStart(_this.props);\n      }\n    };\n\n    _this._handleRelease = function (nativeEvent) {\n      var velocityX = nativeEvent.velocityX,\n          dragX = nativeEvent.translationX;\n      var _this$state = _this.state,\n          _this$state$leftWidth = _this$state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n          _this$state$rowWidth = _this$state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props = _this.props,\n          friction = _this$props.friction,\n          _this$props$leftThres = _this$props.leftThreshold,\n          leftThreshold = _this$props$leftThres === void 0 ? leftWidth / 2 : _this$props$leftThres,\n          _this$props$rightThre = _this$props.rightThreshold,\n          rightThreshold = _this$props$rightThre === void 0 ? rightWidth / 2 : _this$props$rightThre;\n      var startOffsetX = _this._currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (_this.rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (_this.rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this._animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n\n    _this._animateRow = function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation;\n      var _this$props2 = _this.props,\n          useNativeAnimations = _this$props2.useNativeAnimations,\n          animationOptions = _this$props2.animationOptions,\n          onSwipeableLeftOpen = _this$props2.onSwipeableLeftOpen,\n          onSwipeableRightOpen = _this$props2.onSwipeableRightOpen,\n          onSwipeableClose = _this$props2.onSwipeableClose,\n          onSwipeableOpen = _this$props2.onSwipeableOpen,\n          onSwipeableLeftWillOpen = _this$props2.onSwipeableLeftWillOpen,\n          onSwipeableRightWillOpen = _this$props2.onSwipeableRightWillOpen,\n          onSwipeableWillClose = _this$props2.onSwipeableWillClose,\n          onSwipeableWillOpen = _this$props2.onSwipeableWillOpen;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      _this.rowState = Math.sign(toValue);\n\n      _reactNative.Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: useNativeAnimations\n      }, animationOptions)).start(function (_ref3) {\n        var finished = _ref3.finished;\n\n        if (finished) {\n          if (toValue > 0 && onSwipeableLeftOpen) {\n            onSwipeableLeftOpen();\n          } else if (toValue < 0 && onSwipeableRightOpen) {\n            onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            onSwipeableClose && onSwipeableClose();\n          } else {\n            onSwipeableOpen && onSwipeableOpen();\n          }\n        }\n      });\n\n      if (toValue > 0 && onSwipeableLeftWillOpen) {\n        onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && onSwipeableRightWillOpen) {\n        onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        onSwipeableWillClose && onSwipeableWillClose();\n      } else {\n        onSwipeableWillOpen && onSwipeableWillOpen();\n      }\n    };\n\n    _this._currentOffset = function () {\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (_this.rowState === 1) {\n        return leftWidth;\n      } else if (_this.rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    };\n\n    _this.close = function () {\n      _this._animateRow(_this._currentOffset(), 0);\n    };\n\n    _this.openLeft = function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this._animateRow(_this._currentOffset(), leftWidth);\n    };\n\n    _this.openRight = function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this._animateRow(_this._currentOffset(), -rightWidth);\n    };\n\n    _this._onRowLayout = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      return _this.handleMeasure('rowWidth', nativeEvent);\n    };\n\n    _this._onLeftLayout = function (_ref5) {\n      var nativeEvent = _ref5.nativeEvent;\n      return _this.handleMeasure('leftWidth', nativeEvent);\n    };\n\n    _this._onRightLayout = function (_ref6) {\n      var nativeEvent = _ref6.nativeEvent;\n      return _this.handleMeasure('rightOffset', nativeEvent);\n    };\n\n    _this.handleMeasure = function (name, nativeEvent) {\n      var _nativeEvent$layout = nativeEvent.layout,\n          width = _nativeEvent$layout.width,\n          x = _nativeEvent$layout.x;\n\n      switch (name) {\n        case 'rowWidth':\n          _this.rowWidth = width;\n          break;\n\n        case 'leftWidth':\n          _this.leftWidth = x;\n          break;\n\n        case 'rightOffset':\n          _this.rightOffset = x;\n          break;\n\n        default:\n          break;\n      }\n\n      var leftRender = _this.props.renderLeftActions ? _this.leftWidth : true;\n      var rightRender = _this.props.renderRightActions ? _this.rightOffset : true;\n\n      if (_this.rowWidth && leftRender && rightRender) {\n        _this.setState({\n          rowWidth: _this.rowWidth,\n          leftWidth: _this.leftWidth,\n          rightOffset: _this.rightOffset,\n          measureCompleted: true\n        });\n      }\n    };\n\n    var _dragX = new _reactNative.Animated.Value(0);\n\n    _this.rowState = 0;\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new _reactNative.Animated.Value(0),\n      rowWidth: _helpers.Constants.screenWidth,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      measureCompleted: false\n    };\n\n    _this._updateAnimatedEvent(_props, _this.state);\n\n    _this._onGestureEvent = _reactNative.Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(Swipeable, [{\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this._updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          children = _this$props3.children,\n          renderLeftActions = _this$props3.renderLeftActions,\n          renderRightActions = _this$props3.renderRightActions,\n          leftActionsContainerStyle = _this$props3.leftActionsContainerStyle,\n          rightActionsContainerStyle = _this$props3.rightActionsContainerStyle,\n          containerStyle = _this$props3.containerStyle,\n          childrenContainerStyle = _this$props3.childrenContainerStyle;\n\n      var left = renderLeftActions && _react.default.createElement(_reactNative.Animated.View, {\n        style: [styles.leftActions, leftActionsContainerStyle, {\n          transform: [{\n            translateX: this._leftActionTranslate\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 7\n        }\n      }, renderLeftActions(this._showLeftAction, this._transX), _react.default.createElement(_reactNative.View, {\n        onLayout: this._onLeftLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 9\n        }\n      }));\n\n      var right = renderRightActions && _react.default.createElement(_reactNative.Animated.View, {\n        style: [styles.rightActions, rightActionsContainerStyle, {\n          transform: [{\n            translateX: this._rightActionTranslate\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 7\n        }\n      }, renderRightActions(this._showRightAction, this._transX), _react.default.createElement(_reactNative.View, {\n        onLayout: this._onRightLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 9\n        }\n      }));\n\n      return _react.default.createElement(_reactNativeGestureHandler.PanGestureHandler, (0, _extends2.default)({}, this.props, {\n        activeOffsetX: [-10, _helpers.Constants.isIOS ? 44 : 10],\n        onGestureEvent: this._onGestureEvent,\n        onHandlerStateChange: this._onHandlerStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_reactNative.Animated.View, {\n        onLayout: this._onRowLayout,\n        style: [styles.container, containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 9\n        }\n      }, left, right, _react.default.createElement(_reactNativeGestureHandler.TapGestureHandler, {\n        onHandlerStateChange: this._onTapHandlerStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Animated.View, {\n        style: [{\n          transform: [{\n            translateX: this._transX\n          }]\n        }, childrenContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }\n      }, children))));\n    }\n  }]);\n  return Swipeable;\n}(_react.Component);\n\nexports.default = Swipeable;\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: false\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    flexDirection: _reactNative.I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    flexDirection: _reactNative.I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/interactableComponents/drawer/Swipeable.js"],"names":["DRAG_TOSS","Math","sign","x","Number","Swipeable","props","_updateAnimatedEvent","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","_transX","_showLeftAction","Value","_leftActionTranslate","MIN_VALUE","extrapolate","_showRightAction","_rightActionTranslate","_onTapHandlerStateChange","nativeEvent","rowState","oldState","State","ACTIVE","close","_onHandlerStateChange","_handleRelease","onDragStart","velocityX","translationX","leftThreshold","rightThreshold","startOffsetX","_currentOffset","toValue","_animateRow","fromValue","useNativeAnimations","animationOptions","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","setValue","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","start","finished","openLeft","openRight","_onRowLayout","handleMeasure","_onLeftLayout","_onRightLayout","name","layout","width","leftRender","renderLeftActions","rightRender","renderRightActions","setState","measureCompleted","Constants","screenWidth","undefined","_onGestureEvent","event","children","leftActionsContainerStyle","rightActionsContainerStyle","containerStyle","childrenContainerStyle","left","styles","leftActions","transform","translateX","right","rightActions","isIOS","container","Component","defaultProps","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"mappings":"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","sourcesContent":["// @flow\n// Similarly to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n\n// TODO: use Swipeable from react-native-gesture-handler once they support RTL\n\n/* eslint-disable */\nimport React, {Component} from 'react';\nimport {Animated, StyleSheet, View, I18nManager} from 'react-native';\nimport {PanGestureHandler, TapGestureHandler, State} from 'react-native-gesture-handler';\nimport {Constants} from '../../helpers';\n\n\nconst DRAG_TOSS = 0.05;\n\n// Math.sign polyfill for iOS 8.x\nif (!Math.sign) {\n  Math.sign = function (x) {\n    return Number(x > 0) - Number(x < 0) || +x;\n  };\n}\n\nexport type PropType = {\n  children: any,\n  friction: number,\n  leftThreshold?: number,\n  rightThreshold?: number,\n  overshootLeft?: boolean,\n  overshootRight?: boolean,\n  overshootFriction?: number,\n  onSwipeableLeftOpen?: Function,\n  onSwipeableRightOpen?: Function,\n  onSwipeableOpen?: Function,\n  onSwipeableClose?: Function,\n  onSwipeableLeftWillOpen?: Function,\n  onSwipeableRightWillOpen?: Function,\n  onSwipeableWillOpen?: Function,\n  onSwipeableWillClose?: Function,\n  onDragStart?: Function,\n  renderLeftActions?: (progressAnimatedValue: any, dragAnimatedValue: any) => any,\n  renderRightActions?: (progressAnimatedValue: any, dragAnimatedValue: any) => any,\n  leftActionsContainerStyle: any,\n  rightActionsContainerStyle: any,\n  useNativeAnimations: boolean,\n  animationOptions?: Object,\n  containerStyle?: Object,\n  childrenContainerStyle?: Object\n};\ntype StateType = {\n  dragX: Animated.Value,\n  rowTranslation: Animated.Value,\n  leftWidth: number | typeof undefined,\n  rightOffset: number | typeof undefined,\n  rowWidth: number | typeof undefined\n};\n\nexport default class Swipeable extends Component<PropType, StateType> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: false // issue in iPhone5\n  };\n\n  _onGestureEvent: ?Animated.Event;\n  _transX: ?Animated.Interpolation;\n  _showLeftAction: ?Animated.Interpolation | ?Animated.Value;\n  _leftActionTranslate: ?Animated.Interpolation;\n  _showRightAction: ?Animated.Interpolation | ?Animated.Value;\n  _rightActionTranslate: ?Animated.Interpolation;\n\n  constructor(props: PropType) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    this.rowState = 0;\n\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowWidth: Constants.screenWidth,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      measureCompleted: false\n    };\n\n    this._updateAnimatedEvent(props, this.state);\n\n    this._onGestureEvent = Animated.event([{nativeEvent: {translationX: dragX}}], {\n      useNativeDriver: props.useNativeAnimations\n    });\n  }\n\n  componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    const {friction, overshootFriction} = props;\n    const {dragX, rowTranslation, leftWidth = 0, rowWidth = 0} = state;\n    const {rightOffset = rowWidth} = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n    const {overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0} = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      }),\n    ).interpolate({\n      inputRange: [\n        -rightWidth - (overshootRight ? 1 : overshootFriction),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 : overshootFriction)\n      ],\n      outputRange: [\n        -rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)\n      ],\n    });\n    this._transX = transX;\n    this._showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n          inputRange: [-1, 0, leftWidth],\n          outputRange: [0, 0, 1]\n        })\n        : new Animated.Value(0);\n    this._leftActionTranslate = this._showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp'\n    });\n    this._showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n          inputRange: [-rightWidth, 0, 1],\n          outputRange: [1, 0, 0]\n        })\n        : new Animated.Value(0);\n    this._rightActionTranslate = this._showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp'\n    });\n  };\n\n  _onTapHandlerStateChange = ({nativeEvent}) => {\n    if (this.rowState !== 0) {\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this.close();\n      }\n    }\n  };\n\n  _onHandlerStateChange = ({nativeEvent}) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    }\n\n    if (nativeEvent.state === State.ACTIVE) {\n      this.props.onDragStart && this.props.onDragStart(this.props);\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const {velocityX, translationX: dragX} = nativeEvent;\n    const {leftWidth = 0, rowWidth = 0} = this.state;\n    const {rightOffset = rowWidth} = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {friction, leftThreshold = leftWidth / 2, rightThreshold = rightWidth / 2} = this.props;\n\n    const startOffsetX = this._currentOffset() + dragX / friction;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n\n    let toValue = 0;\n    if (this.rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (this.rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this._animateRow(startOffsetX, toValue, velocityX / friction);\n  };\n\n  _animateRow = (fromValue, toValue, velocityX) => {\n    const {dragX, rowTranslation} = this.state;\n    const {\n      useNativeAnimations,\n      animationOptions,\n      onSwipeableLeftOpen,\n      onSwipeableRightOpen,\n      onSwipeableClose,\n      onSwipeableOpen,\n      onSwipeableLeftWillOpen,\n      onSwipeableRightWillOpen,\n      onSwipeableWillClose,\n      onSwipeableWillOpen\n    } = this.props;\n\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n    this.rowState = Math.sign(toValue);\n\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: useNativeAnimations,\n      ...animationOptions\n    }).start(({finished}) => {\n      if (finished) {\n        if (toValue > 0 && onSwipeableLeftOpen) {\n          onSwipeableLeftOpen();\n        } else if (toValue < 0 && onSwipeableRightOpen) {\n          onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          onSwipeableClose && onSwipeableClose();\n        } else {\n          onSwipeableOpen && onSwipeableOpen();\n        }\n      }\n    });\n\n    if (toValue > 0 && onSwipeableLeftWillOpen) {\n      onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && onSwipeableRightWillOpen) {\n      onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      onSwipeableWillClose && onSwipeableWillClose();\n    } else {\n      onSwipeableWillOpen && onSwipeableWillOpen();\n    }\n  };\n\n  _currentOffset = () => {\n    const {leftWidth = 0, rowWidth = 0} = this.state;\n    const {rightOffset = rowWidth} = this.state;\n    const rightWidth = rowWidth - rightOffset;\n\n    if (this.rowState === 1) {\n      return leftWidth;\n    } else if (this.rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this._animateRow(this._currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const {leftWidth = 0} = this.state;\n    this._animateRow(this._currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const {rowWidth = 0} = this.state;\n    const {rightOffset = rowWidth} = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this._animateRow(this._currentOffset(), -rightWidth);\n  };\n\n  _onRowLayout = ({nativeEvent}) => this.handleMeasure('rowWidth', nativeEvent);\n  _onLeftLayout = ({nativeEvent}) => this.handleMeasure('leftWidth', nativeEvent);\n  _onRightLayout = ({nativeEvent}) => this.handleMeasure('rightOffset', nativeEvent);\n\n  handleMeasure = (name, nativeEvent) => {\n    const {width, x} = nativeEvent.layout;\n\n    switch (name) {\n      case 'rowWidth':\n        this.rowWidth = width;\n        break;\n      case 'leftWidth':\n        this.leftWidth = x;\n        break;\n      case 'rightOffset':\n        this.rightOffset = x;\n        break;\n      default:\n        break;\n    }\n\n    const leftRender = this.props.renderLeftActions ? this.leftWidth : true;\n    const rightRender = this.props.renderRightActions ? this.rightOffset : true;\n\n    if (this.rowWidth && leftRender && rightRender) {\n      this.setState({\n        rowWidth: this.rowWidth,\n        leftWidth: this.leftWidth,\n        rightOffset: this.rightOffset,\n        measureCompleted: true\n      });\n    }\n  };\n\n  render() {\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      leftActionsContainerStyle,\n      rightActionsContainerStyle,\n      containerStyle,\n      childrenContainerStyle\n    } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          leftActionsContainerStyle,\n          {transform: [{translateX: this._leftActionTranslate}]}\n        ]}\n      >\n        {renderLeftActions(this._showLeftAction, this._transX)}\n        <View onLayout={this._onLeftLayout}/>\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          rightActionsContainerStyle,\n          {transform: [{translateX: this._rightActionTranslate}]}\n        ]}\n      >\n        {renderRightActions(this._showRightAction, this._transX)}\n        <View onLayout={this._onRightLayout}/>\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        {...this.props}\n        // minDeltaX={10}\n        activeOffsetX={[-10, Constants.isIOS ? 44 : 10]}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._onHandlerStateChange}\n      >\n        <Animated.View onLayout={this._onRowLayout} style={[styles.container, containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n            <Animated.View\n              style={[\n                {transform: [{translateX: this._transX}]},\n                childrenContainerStyle\n              ]}\n            >\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  }\n});\n"]},"metadata":{},"sourceType":"script"}