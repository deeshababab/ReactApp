{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _commons = require(\"../../commons\");\n\nvar _reactNativeUiLib = require(\"react-native-ui-lib\");\n\nvar _asPanViewConsumer = _interopRequireDefault(require(\"./asPanViewConsumer\"));\n\nvar _panningProvider = _interopRequireDefault(require(\"./panningProvider\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\panningViews\\\\panListenerView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar DEFAULT_PAN_SENSITIVITY = 5;\nvar DEFAULT_SWIPE_VELOCITY = 1.8;\n\nvar PanListenerView = function (_PureBaseComponent) {\n  (0, _inherits2.default)(PanListenerView, _PureBaseComponent);\n\n  var _super = _createSuper(PanListenerView);\n\n  function PanListenerView(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, PanListenerView);\n    _this = _super.call(this, props);\n\n    _this.yes = function () {\n      return true;\n    };\n\n    _this.no = function () {\n      return false;\n    };\n\n    _this.shouldPan = function (e, gestureState) {\n      var dy = gestureState.dy,\n          dx = gestureState.dx;\n      var _this$props = _this.props,\n          directions = _this$props.directions,\n          panSensitivity = _this$props.panSensitivity;\n      return directions && (directions.includes(_panningProvider.default.Directions.UP) && dy < -panSensitivity || directions.includes(_panningProvider.default.Directions.DOWN) && dy > panSensitivity || directions.includes(_panningProvider.default.Directions.LEFT) && dx < -panSensitivity || directions.includes(_panningProvider.default.Directions.RIGHT) && dx > panSensitivity);\n    };\n\n    _this.handlePanStart = function () {\n      _lodash.default.invoke(_this.props, 'onPanStart');\n\n      _lodash.default.invoke(_this.props.context, 'onPanStart');\n    };\n\n    _this.getSwipeDirection = function (_ref) {\n      var vx = _ref.vx,\n          vy = _ref.vy;\n      var swipeVelocitySensitivity = _this.props.swipeVelocitySensitivity;\n      return _this.getDirectionsOverSensitivity(vx, vy, swipeVelocitySensitivity);\n    };\n\n    _this.getDragDirection = function (_ref2) {\n      var dx = _ref2.dx,\n          dy = _ref2.dy;\n      return _this.getDirectionsOverSensitivity(dx, dy, 0);\n    };\n\n    _this.getDirectionsOverSensitivity = function (x, y, sensitivity) {\n      var directions = _this.props.directions;\n      var selectedDirections = {};\n      var selectedAmounts = {};\n\n      if (directions.includes(_panningProvider.default.Directions.LEFT) && x < -sensitivity) {\n        selectedDirections.x = _panningProvider.default.Directions.LEFT;\n        selectedAmounts.x = x;\n      } else if (directions.includes(_panningProvider.default.Directions.RIGHT) && x > sensitivity) {\n        selectedDirections.x = _panningProvider.default.Directions.RIGHT;\n        selectedAmounts.x = x;\n      }\n\n      if (directions.includes(_panningProvider.default.Directions.UP) && y < -sensitivity) {\n        selectedDirections.y = _panningProvider.default.Directions.UP;\n        selectedAmounts.y = y;\n      } else if (directions.includes(_panningProvider.default.Directions.DOWN) && y > sensitivity) {\n        selectedDirections.y = _panningProvider.default.Directions.DOWN;\n        selectedAmounts.y = y;\n      }\n\n      return {\n        selectedDirections: selectedDirections,\n        selectedAmounts: selectedAmounts\n      };\n    };\n\n    _this.panResultHasValue = function (panResult) {\n      return panResult && (panResult.selectedDirections.x || panResult.selectedDirections.y);\n    };\n\n    _this.handlePanMove = function (e, gestureState) {\n      var _this$props2 = _this.props,\n          onSwipe = _this$props2.onSwipe,\n          onDrag = _this$props2.onDrag,\n          context = _this$props2.context;\n      var hasSwipe = !_lodash.default.isUndefined(onSwipe);\n      var hasDrag = !_lodash.default.isUndefined(onDrag);\n      var hasContext = !_lodash.default.isUndefined(context);\n      var panResult;\n\n      if (hasSwipe || hasContext) {\n        panResult = _this.getSwipeDirection(gestureState);\n      }\n\n      if (_this.panResultHasValue(panResult)) {\n        var data = {\n          directions: panResult.selectedDirections,\n          velocities: panResult.selectedAmounts\n        };\n\n        _lodash.default.invoke(_this.props, 'onSwipe', data);\n\n        _lodash.default.invoke(context, 'onSwipe', data);\n      } else if (hasDrag || hasContext) {\n        panResult = _this.getDragDirection(gestureState);\n\n        if (_this.panResultHasValue(panResult)) {\n          var _data = {\n            directions: panResult.selectedDirections,\n            deltas: panResult.selectedAmounts\n          };\n\n          _lodash.default.invoke(_this.props, 'onDrag', _data);\n\n          _lodash.default.invoke(context, 'onDrag', _data);\n        }\n      }\n    };\n\n    _this.handlePanRelease = function () {\n      _lodash.default.invoke(_this.props, 'onPanRelease');\n\n      _lodash.default.invoke(_this.props.context, 'onPanRelease');\n    };\n\n    _this.handlePanTerminate = function () {\n      _lodash.default.invoke(_this.props, 'onPanTerminated');\n\n      _lodash.default.invoke(_this.props.context, 'onPanTerminated');\n    };\n\n    _this.onLayout = function (event) {\n      _this.layout = event.nativeEvent.layout;\n    };\n\n    _this.state = {};\n    _this.panResponder = _reactNative.PanResponder.create({\n      onStartShouldSetPanResponder: _this.yes,\n      onMoveShouldSetPanResponder: _this.shouldPan,\n      onStartShouldSetPanResponderCapture: _this.no,\n      onMoveShouldSetPanResponderCapture: _this.no,\n      onPanResponderGrant: _this.handlePanStart,\n      onPanResponderMove: _this.handlePanMove,\n      onPanResponderRelease: _this.handlePanRelease,\n      onPanResponderTerminate: _this.handlePanTerminate\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(PanListenerView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$getThemeProps = this.getThemeProps(),\n          children = _this$getThemeProps.children,\n          others = (0, _objectWithoutProperties2.default)(_this$getThemeProps, [\"children\"]);\n\n      return _react.default.createElement(_reactNativeUiLib.View, (0, _extends2.default)({}, others, this.panResponder.panHandlers, {\n        onLayout: this.onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 7\n        }\n      }), children);\n    }\n  }]);\n  return PanListenerView;\n}(_commons.PureBaseComponent);\n\nPanListenerView.displayName = 'PanListenerView';\nPanListenerView.propTypes = {\n  directions: _propTypes.default.arrayOf(_propTypes.default.oneOf(Object.values(_panningProvider.default.Directions))),\n  onDrag: _propTypes.default.func,\n  onSwipe: _propTypes.default.func,\n  onPanStart: _propTypes.default.func,\n  onPanRelease: _propTypes.default.func,\n  onPanTerminated: _propTypes.default.func,\n  panSensitivity: _propTypes.default.number,\n  swipeVelocitySensitivity: _propTypes.default.number\n};\nPanListenerView.defaultProps = {\n  directions: [_panningProvider.default.Directions.UP, _panningProvider.default.Directions.DOWN, _panningProvider.default.Directions.LEFT, _panningProvider.default.Directions.RIGHT],\n  panSensitivity: DEFAULT_PAN_SENSITIVITY,\n  swipeVelocitySensitivity: DEFAULT_SWIPE_VELOCITY\n};\n\nvar _default = (0, _asPanViewConsumer.default)(PanListenerView);\n\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/panningViews/panListenerView.js"],"names":["DEFAULT_PAN_SENSITIVITY","DEFAULT_SWIPE_VELOCITY","PanListenerView","props","yes","no","shouldPan","e","gestureState","dy","dx","directions","panSensitivity","includes","PanningProvider","Directions","UP","DOWN","LEFT","RIGHT","handlePanStart","_","invoke","context","getSwipeDirection","vx","vy","swipeVelocitySensitivity","getDirectionsOverSensitivity","getDragDirection","x","y","sensitivity","selectedDirections","selectedAmounts","panResultHasValue","panResult","handlePanMove","onSwipe","onDrag","hasSwipe","isUndefined","hasDrag","hasContext","data","velocities","deltas","handlePanRelease","handlePanTerminate","onLayout","event","layout","nativeEvent","state","panResponder","PanResponder","create","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponderCapture","onPanResponderGrant","onPanResponderMove","onPanResponderRelease","onPanResponderTerminate","getThemeProps","children","others","panHandlers","PureBaseComponent","displayName","propTypes","PropTypes","arrayOf","oneOf","Object","values","func","onPanStart","onPanRelease","onPanTerminated","number","defaultProps"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {PanResponder} from 'react-native';\nimport {PureBaseComponent} from '../../commons';\nimport {View} from 'react-native-ui-lib'; //eslint-disable-line\nimport asPanViewConsumer from './asPanViewConsumer';\nimport PanningProvider from './panningProvider';\n\nconst DEFAULT_PAN_SENSITIVITY = 5;\nconst DEFAULT_SWIPE_VELOCITY = 1.8;\n\n/**\n * @description: PanListenerView component created to making listening to swipe and drag events easier\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/PanListenerScreen.js\n */\nclass PanListenerView extends PureBaseComponent {\n  static displayName = 'PanListenerView';\n  static propTypes = {\n    /**\n     * The directions of the allowed pan (default allows all directions)\n     * Types: UP, DOWN, LEFT and RIGHT (using PanningProvider.Directions.###)\n     */\n    directions: PropTypes.arrayOf(PropTypes.oneOf(Object.values(PanningProvider.Directions))),\n    /**\n     * This is were you will get notified when a drag occurs\n     * onDrag = ({directions, velocities}) => {...}\n     * directions - array of directions\n     * velocities - array of velocities (same length and order as directions)\n     * Both arrays will have {x, y} - if no x or y drag has occurred this value will be undefined\n     */\n    onDrag: PropTypes.func,\n    /**\n     * This is were you will get notified when a swipe occurs\n     * onSwipe = ({directions, deltas}) => {...}\n     * directions - array of directions\n     * deltas - array of deltas (same length and order as directions)\n     * Both arrays will have {x, y} - if no x or y swipe has occurred this value will be undefined\n     */\n    onSwipe: PropTypes.func,\n    /**\n     * This is were you will get notified when the pan starts\n     */\n    onPanStart: PropTypes.func,\n    /**\n     * This is were you will get notified when the pan ends\n     * The user has released all touches while this view is the responder.\n     * This typically means a gesture has succeeded\n     */\n    onPanRelease: PropTypes.func,\n    /**\n     * This is were you will get notified when the pan ends\n     * Another component has become the responder,\n     * so this gesture should be cancelled\n     */\n    onPanTerminated: PropTypes.func,\n    /**\n     * The sensitivity beyond which a pan is no longer considered a single click (default is 5)\n     */\n    panSensitivity: PropTypes.number,\n    /**\n     * The sensitivity beyond which a pan is no longer considered a drag, but a swipe (default is 1.8)\n     * Note: a pan would have to occur (i.e. the panSensitivity has already been surpassed)\n     */\n    swipeVelocitySensitivity: PropTypes.number\n  };\n\n  static defaultProps = {\n    directions: [\n      PanningProvider.Directions.UP,\n      PanningProvider.Directions.DOWN,\n      PanningProvider.Directions.LEFT,\n      PanningProvider.Directions.RIGHT\n    ],\n    panSensitivity: DEFAULT_PAN_SENSITIVITY,\n    swipeVelocitySensitivity: DEFAULT_SWIPE_VELOCITY\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.yes,\n      onMoveShouldSetPanResponder: this.shouldPan,\n      onStartShouldSetPanResponderCapture: this.no,\n      onMoveShouldSetPanResponderCapture: this.no,\n      onPanResponderGrant: this.handlePanStart,\n      onPanResponderMove: this.handlePanMove,\n      onPanResponderRelease: this.handlePanRelease,\n      onPanResponderTerminate: this.handlePanTerminate\n    });\n  }\n\n  yes = () => {\n    return true;\n  };\n\n  no = () => {\n    return false;\n  };\n\n  shouldPan = (e, gestureState) => {\n    // return true if user is swiping, return false if it's a single click\n    const {dy, dx} = gestureState;\n    const {directions, panSensitivity} = this.props;\n\n    return (\n      directions &&\n      ((directions.includes(PanningProvider.Directions.UP) && dy < -panSensitivity) ||\n        (directions.includes(PanningProvider.Directions.DOWN) && dy > panSensitivity) ||\n        (directions.includes(PanningProvider.Directions.LEFT) && dx < -panSensitivity) ||\n        (directions.includes(PanningProvider.Directions.RIGHT) && dx > panSensitivity))\n    );\n  };\n\n  handlePanStart = () => {\n    _.invoke(this.props, 'onPanStart');\n    _.invoke(this.props.context, 'onPanStart');\n  };\n\n  getSwipeDirection = ({vx, vy}) => {\n    const {swipeVelocitySensitivity} = this.props;\n    return this.getDirectionsOverSensitivity(vx, vy, swipeVelocitySensitivity);\n  };\n\n  getDragDirection = ({dx, dy}) => {\n    return this.getDirectionsOverSensitivity(dx, dy, 0);\n  };\n\n  getDirectionsOverSensitivity = (x, y, sensitivity) => {\n    const {directions} = this.props;\n    const selectedDirections = {};\n    const selectedAmounts = {};\n\n    if (directions.includes(PanningProvider.Directions.LEFT) && x < -sensitivity) {\n      selectedDirections.x = PanningProvider.Directions.LEFT;\n      selectedAmounts.x = x;\n    } else if (directions.includes(PanningProvider.Directions.RIGHT) && x > sensitivity) {\n      selectedDirections.x = PanningProvider.Directions.RIGHT;\n      selectedAmounts.x = x;\n    }\n\n    if (directions.includes(PanningProvider.Directions.UP) && y < -sensitivity) {\n      selectedDirections.y = PanningProvider.Directions.UP;\n      selectedAmounts.y = y;\n    } else if (directions.includes(PanningProvider.Directions.DOWN) && y > sensitivity) {\n      selectedDirections.y = PanningProvider.Directions.DOWN;\n      selectedAmounts.y = y;\n    }\n\n    return {selectedDirections, selectedAmounts};\n  };\n\n  panResultHasValue = panResult => {\n    return panResult && (panResult.selectedDirections.x || panResult.selectedDirections.y);\n  };\n\n  handlePanMove = (e, gestureState) => {\n    const {onSwipe, onDrag, context} = this.props;\n    const hasSwipe = !_.isUndefined(onSwipe);\n    const hasDrag = !_.isUndefined(onDrag);\n    const hasContext = !_.isUndefined(context);\n    let panResult;\n    if (hasSwipe || hasContext) {\n      panResult = this.getSwipeDirection(gestureState);\n    }\n\n    if (this.panResultHasValue(panResult)) {\n      const data = {directions: panResult.selectedDirections, velocities: panResult.selectedAmounts};\n      _.invoke(this.props, 'onSwipe', data);\n      _.invoke(context, 'onSwipe', data);\n    } else if (hasDrag || hasContext) {\n      panResult = this.getDragDirection(gestureState);\n      if (this.panResultHasValue(panResult)) {\n        const data = {directions: panResult.selectedDirections, deltas: panResult.selectedAmounts};\n        _.invoke(this.props, 'onDrag', data);\n        _.invoke(context, 'onDrag', data);\n      }\n    }\n  };\n\n  handlePanRelease = () => {\n    _.invoke(this.props, 'onPanRelease');\n    _.invoke(this.props.context, 'onPanRelease');\n  };\n\n  handlePanTerminate = () => {\n    _.invoke(this.props, 'onPanTerminated');\n    _.invoke(this.props.context, 'onPanTerminated');\n  };\n\n  onLayout = event => {\n    this.layout = event.nativeEvent.layout;\n  };\n\n  render() {\n    const {children, ...others} = this.getThemeProps();\n\n    return (\n      <View {...others} {...this.panResponder.panHandlers} onLayout={this.onLayout}>\n        {children}\n      </View>\n    );\n  }\n}\n\nexport default asPanViewConsumer(PanListenerView);\n"]},"metadata":{},"sourceType":"script"}