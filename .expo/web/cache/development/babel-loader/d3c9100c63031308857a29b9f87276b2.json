{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _style = require(\"../../style\");\n\nvar _commons = require(\"../../commons\");\n\nvar _view = _interopRequireDefault(require(\"../../components/view\"));\n\nvar _image = _interopRequireDefault(require(\"../../components/image\"));\n\nvar _button = _interopRequireDefault(require(\"../../components/button\"));\n\nvar _text = _interopRequireDefault(require(\"../../components/text\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\screensComponents\\\\stateScreen\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar StateScreen = function (_BaseComponent) {\n  (0, _inherits2.default)(StateScreen, _BaseComponent);\n\n  var _super = _createSuper(StateScreen);\n\n  function StateScreen(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, StateScreen);\n    _this = _super.call(this, props);\n\n    if (props.testId) {\n      console.warn('StateScreen prop \\'testId\\' is deprecated. Please use RN \\'testID\\' prop instead.');\n    }\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(StateScreen, [{\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      var imageSource = this.props.imageSource;\n      var isRemoteImage = _lodash.default.isObject(imageSource) && Boolean(imageSource.uri);\n      this.styles = createStyles(isRemoteImage);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          subtitle = _this$props.subtitle,\n          imageSource = _this$props.imageSource,\n          ctaLabel = _this$props.ctaLabel,\n          onCtaPress = _this$props.onCtaPress,\n          testId = _this$props.testId,\n          testID = _this$props.testID;\n      return _react.default.createElement(_view.default, {\n        style: this.styles.container,\n        testID: testID || testId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_image.default, {\n        style: this.styles.image,\n        resizeMode: 'contain',\n        source: imageSource,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }\n      }), _react.default.createElement(_text.default, {\n        style: [this.styles.title],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }\n      }, title), _react.default.createElement(_text.default, {\n        style: [this.styles.subtitle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }, subtitle), _react.default.createElement(_button.default, {\n        link: true,\n        \"marginT-30\": true,\n        onPress: onCtaPress,\n        labelStyle: this.styles.ctaLabel,\n        label: _helpers.Constants.isAndroid ? _lodash.default.toUpper(ctaLabel) : ctaLabel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n  return StateScreen;\n}(_commons.BaseComponent);\n\nexports.default = StateScreen;\nStateScreen.displayName = 'StateScreen';\nStateScreen.propTypes = {\n  imageSource: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number]),\n  title: _propTypes.default.string.isRequired,\n  subtitle: _propTypes.default.any,\n  ctaLabel: _propTypes.default.string,\n  onCtaPress: _propTypes.default.func,\n  testId: _propTypes.default.string\n};\n\nfunction createStyles(isRemoteImage) {\n  var imageStyle = _lodash.default.merge({\n    height: 200\n  }, isRemoteImage && {\n    width: _helpers.Constants.screenWidth * 0.9\n  });\n\n  return _reactNative.StyleSheet.create({\n    container: {\n      flex: 1,\n      paddingTop: 80,\n      justifyContent: 'flex-start',\n      alignItems: 'center'\n    },\n    image: imageStyle,\n    title: _objectSpread(_objectSpread({\n      textAlign: 'center'\n    }, _style.Typography.text50), {}, {\n      color: _style.ThemeManager.titleColor,\n      fontWeight: '300'\n    }),\n    subtitle: _objectSpread(_objectSpread({\n      textAlign: 'center'\n    }, _style.Typography.text70), {}, {\n      color: _style.ThemeManager.subtitleColor,\n      fontWeight: '300',\n      marginTop: 12\n    }),\n    ctaLabel: _objectSpread({\n      color: _style.ThemeManager.primaryColor\n    }, _style.Typography.text70)\n  });\n}","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/screensComponents/stateScreen/index.js"],"names":["StateScreen","props","testId","console","warn","imageSource","isRemoteImage","_","isObject","Boolean","uri","styles","createStyles","title","subtitle","ctaLabel","onCtaPress","testID","container","image","Constants","isAndroid","toUpper","BaseComponent","displayName","propTypes","PropTypes","oneOfType","object","number","string","isRequired","any","func","imageStyle","merge","height","width","screenWidth","StyleSheet","create","flex","paddingTop","justifyContent","alignItems","textAlign","Typography","text50","color","ThemeManager","titleColor","fontWeight","text70","subtitleColor","marginTop","primaryColor"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet} from 'react-native';\nimport {Constants} from '../../helpers';\nimport {Typography, ThemeManager} from '../../style';\nimport {BaseComponent} from '../../commons';\nimport View from '../../components/view';\nimport Image from '../../components/image';\nimport Button from '../../components/button';\nimport Text from '../../components/text';\n\n/**\n * @description: Component that shows a full screen for a certain state, like an empty state\n * @image: https://user-images.githubusercontent.com/33805983/34672894-f262ab84-f488-11e7-83f0-4ee0f0ac34ba.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/EmptyStateScreen.js\n */\nexport default class StateScreen extends BaseComponent {\n  static displayName = 'StateScreen';\n  static propTypes = {\n    /**\n     * The image source that's showing at the top. use an image that was required locally\n     */\n    imageSource: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * To to show as the title\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Text to to show as the subtitle\n     */\n    subtitle: PropTypes.any,\n    /**\n     * Text to to show in the \"call to action\" button\n     */\n    ctaLabel: PropTypes.string,\n    /**\n     * Action handler for \"call to action\" button\n     */\n    onCtaPress: PropTypes.func,\n    /**\n     * Use to identify the container in tests\n     */\n    testId: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n\n    if (props.testId) {\n      console.warn('StateScreen prop \\'testId\\' is deprecated. Please use RN \\'testID\\' prop instead.');\n    }\n  }\n\n  generateStyles() {\n    const {imageSource} = this.props;\n    const isRemoteImage = _.isObject(imageSource) && Boolean(imageSource.uri);\n    this.styles = createStyles(isRemoteImage);\n  }\n\n  render() {\n    // TODO: remove testId after deprecation\n    const {title, subtitle, imageSource, ctaLabel, onCtaPress, testId, testID} = this.props;\n\n    return (\n      <View style={this.styles.container} testID={testID || testId}>\n        <Image style={this.styles.image} resizeMode={'contain'} source={imageSource}/>\n        <Text style={[this.styles.title]}>{title}</Text>\n        <Text style={[this.styles.subtitle]}>{subtitle}</Text>\n        <Button\n          link\n          marginT-30\n          onPress={onCtaPress}\n          labelStyle={this.styles.ctaLabel}\n          label={Constants.isAndroid ? _.toUpper(ctaLabel) : ctaLabel}\n        />\n      </View>\n    );\n  }\n}\n\nfunction createStyles(isRemoteImage) {\n  const imageStyle = _.merge({height: 200}, isRemoteImage && {width: Constants.screenWidth * 0.9});\n  return StyleSheet.create({\n    container: {\n      flex: 1,\n      paddingTop: 80,\n      justifyContent: 'flex-start',\n      alignItems: 'center'\n    },\n    image: imageStyle,\n    title: {\n      textAlign: 'center',\n      ...Typography.text50,\n      color: ThemeManager.titleColor,\n      fontWeight: '300'\n    },\n    subtitle: {\n      textAlign: 'center',\n      ...Typography.text70,\n      color: ThemeManager.subtitleColor,\n      fontWeight: '300',\n      marginTop: 12\n    },\n    ctaLabel: {\n      color: ThemeManager.primaryColor,\n      ...Typography.text70\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"script"}