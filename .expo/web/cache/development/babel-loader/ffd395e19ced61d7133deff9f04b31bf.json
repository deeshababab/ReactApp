{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.BADGE_POSITIONS = exports.STATUS_MODES = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _style = require(\"../../style\");\n\nvar _commons = require(\"../../commons\");\n\nvar _badge = _interopRequireWildcard(require(\"../badge\"));\n\nvar _view = _interopRequireDefault(require(\"../view\"));\n\nvar _text = _interopRequireDefault(require(\"../text\"));\n\nvar _image = _interopRequireDefault(require(\"../image\"));\n\nvar _animatedImage = _interopRequireDefault(require(\"../animatedImage\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\components\\\\avatar\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar deprecatedProps = [{\n  old: 'isOnline',\n  new: 'badgeProps.backgroundColor'\n}, {\n  old: 'status',\n  new: 'badgeProps.backgroundColor'\n}];\nvar STATUS_MODES = {\n  ONLINE: 'ONLINE',\n  OFFLINE: 'OFFLINE',\n  AWAY: 'AWAY',\n  NONE: 'NONE'\n};\nexports.STATUS_MODES = STATUS_MODES;\nvar BADGE_POSITIONS = {\n  TOP_RIGHT: 'TOP_RIGHT',\n  TOP_LEFT: 'TOP_LEFT',\n  BOTTOM_RIGHT: 'BOTTOM_RIGHT',\n  BOTTOM_LEFT: 'BOTTOM_LEFT'\n};\nexports.BADGE_POSITIONS = BADGE_POSITIONS;\nvar DEFAULT_BADGE_SIZE = 'pimpleBig';\nvar DEFAULT_BADGE_POSITION = BADGE_POSITIONS.TOP_RIGHT;\n\nvar Avatar = function (_PureBaseComponent) {\n  (0, _inherits2.default)(Avatar, _PureBaseComponent);\n\n  var _super = _createSuper(Avatar);\n\n  function Avatar(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Avatar);\n    _this = _super.call(this, props);\n\n    _this.getBadgeBorderWidth = function () {\n      return _lodash.default.get(_this.props, 'badgeProps.borderWidth', 0);\n    };\n\n    _this.getBadgeSize = function () {\n      return _lodash.default.get(_this.props, 'badgeProps.size', DEFAULT_BADGE_SIZE);\n    };\n\n    deprecatedProps.forEach(function (prop) {\n      if (props[prop.old]) {\n        console.warn(\"\\\"Avatar's \" + prop.old + \"\\\" property is deprecated, please use \\\"\" + prop.new + \"\\\"\");\n      }\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(Avatar, [{\n    key: \"generateStyles\",\n    value: function generateStyles() {\n      this.styles = createStyles(this.props);\n    }\n  }, {\n    key: \"getContainerStyle\",\n    value: function getContainerStyle() {\n      var size = this.props.size;\n      return {\n        width: size,\n        height: size,\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: size / 2\n      };\n    }\n  }, {\n    key: \"getInitialsContainer\",\n    value: function getInitialsContainer() {\n      var size = this.props.size;\n      return _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderRadius: size / 2\n      });\n    }\n  }, {\n    key: \"getRibbonStyle\",\n    value: function getRibbonStyle() {\n      var size = this.props.size;\n      return {\n        position: 'absolute',\n        top: '10%',\n        left: size / 1.7,\n        borderRadius: size / 2\n      };\n    }\n  }, {\n    key: \"getStatusBadgeColor\",\n    value: function getStatusBadgeColor(status) {\n      switch (status) {\n        case Avatar.modes.AWAY:\n          return _style.Colors.yellow30;\n\n        case Avatar.modes.ONLINE:\n          return _style.Colors.green30;\n\n        case Avatar.modes.OFFLINE:\n          return _style.Colors.dark60;\n\n        case Avatar.modes.NONE:\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"getBadgeColor\",\n    value: function getBadgeColor() {\n      var _this$props = this.props,\n          isOnline = _this$props.isOnline,\n          status = _this$props.status;\n      var statusColor = this.getStatusBadgeColor(status);\n      var onlineColor = isOnline ? _style.Colors.green30 : undefined;\n      return _lodash.default.get(this.props, 'badgeProps.backgroundColor') || statusColor || onlineColor;\n    }\n  }, {\n    key: \"getBadgePosition\",\n    value: function getBadgePosition() {\n      var _badgeAlignment;\n\n      var _this$props2 = this.props,\n          size = _this$props2.size,\n          badgePosition = _this$props2.badgePosition;\n      var radius = size / 2;\n      var x = Math.sqrt(Math.pow(radius, 2) * 2);\n      var y = x - radius;\n      var shift = Math.sqrt(Math.pow(y, 2) / 2) - (_badge.BADGE_SIZES[this.getBadgeSize()] + this.getBadgeBorderWidth() * 2) / 2;\n\n      var badgeLocation = _lodash.default.split(_lodash.default.toLower(badgePosition), '_', 2);\n\n      var badgeAlignment = (_badgeAlignment = {\n        position: 'absolute'\n      }, (0, _defineProperty2.default)(_badgeAlignment, badgeLocation[0], shift), (0, _defineProperty2.default)(_badgeAlignment, badgeLocation[1], shift), _badgeAlignment);\n      return badgeAlignment;\n    }\n  }, {\n    key: \"renderBadge\",\n    value: function renderBadge() {\n      var _this$props3 = this.props,\n          testID = _this$props3.testID,\n          badgeProps = _this$props3.badgeProps;\n\n      if (badgeProps || this.getBadgeColor()) {\n        return _react.default.createElement(_badge.default, (0, _extends2.default)({\n          backgroundColor: this.getBadgeColor(),\n          size: this.getBadgeSize()\n        }, badgeProps, {\n          containerStyle: this.getBadgePosition(),\n          label: undefined,\n          testID: testID + \".onlineBadge\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 9\n          }\n        }));\n      }\n    }\n  }, {\n    key: \"renderRibbon\",\n    value: function renderRibbon() {\n      var _this$props4 = this.props,\n          ribbonLabel = _this$props4.ribbonLabel,\n          ribbonStyle = _this$props4.ribbonStyle,\n          ribbonLabelStyle = _this$props4.ribbonLabelStyle,\n          customRibbon = _this$props4.customRibbon;\n\n      if (ribbonLabel) {\n        return customRibbon ? _react.default.createElement(_view.default, {\n          style: this.getRibbonStyle(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 9\n          }\n        }, customRibbon) : _react.default.createElement(_view.default, {\n          style: [this.getRibbonStyle(), this.styles.ribbon, ribbonStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 9\n          }\n        }, _react.default.createElement(_text.default, {\n          numberOfLines: 1,\n          text100: true,\n          white: true,\n          style: [ribbonLabelStyle],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 11\n          }\n        }, ribbonLabel));\n      }\n    }\n  }, {\n    key: \"renderImage\",\n    value: function renderImage() {\n      var _this$props5 = this.props,\n          animate = _this$props5.animate,\n          imageSource = _this$props5.imageSource,\n          onImageLoadStart = _this$props5.onImageLoadStart,\n          onImageLoadEnd = _this$props5.onImageLoadEnd,\n          onImageLoadError = _this$props5.onImageLoadError,\n          testID = _this$props5.testID,\n          imageProps = _this$props5.imageProps,\n          imageStyle = _this$props5.imageStyle;\n      var hasImage = !_lodash.default.isUndefined(imageSource);\n      var ImageContainer = animate ? _animatedImage.default : _image.default;\n\n      if (hasImage) {\n        return _react.default.createElement(ImageContainer, (0, _extends2.default)({\n          animate: animate,\n          style: [this.getContainerStyle(), _reactNative.StyleSheet.absoluteFillObject, imageStyle],\n          source: imageSource,\n          onLoadStart: onImageLoadStart,\n          onLoadEnd: onImageLoadEnd,\n          onError: onImageLoadError,\n          testID: testID + \".image\",\n          containerStyle: this.getContainerStyle()\n        }, imageProps, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          label = _this$props6.label,\n          color = _this$props6.labelColor,\n          imageSource = _this$props6.imageSource,\n          backgroundColor = _this$props6.backgroundColor,\n          onPress = _this$props6.onPress,\n          containerStyle = _this$props6.containerStyle,\n          children = _this$props6.children,\n          size = _this$props6.size,\n          testID = _this$props6.testID;\n      var Container = onPress ? _reactNative.TouchableOpacity : _view.default;\n      var hasImage = !_lodash.default.isUndefined(imageSource);\n      var fontSizeToImageSizeRatio = 0.32;\n      var fontSize = size * fontSizeToImageSizeRatio;\n      return _react.default.createElement(Container, (0, _extends2.default)({\n        style: [this.getContainerStyle(), containerStyle],\n        testID: testID,\n        onPress: onPress,\n        accessible: true,\n        accessibilityLabel: 'Avatar',\n        accessibilityRole: onPress ? 'button' : 'image'\n      }, this.extractAccessibilityProps(), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_view.default, {\n        style: [this.getInitialsContainer(), {\n          backgroundColor: backgroundColor\n        }, hasImage && this.styles.initialsContainerWithInset],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_text.default, {\n        numberOfLines: 1,\n        style: [{\n          fontSize: fontSize\n        }, this.styles.initials, {\n          color: color\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }\n      }, label)), this.renderImage(), this.renderBadge(), this.renderRibbon(), children);\n    }\n  }]);\n  return Avatar;\n}(_commons.PureBaseComponent);\n\nexports.default = Avatar;\nAvatar.displayName = 'Avatar';\nAvatar.modes = STATUS_MODES;\nAvatar.badgePosition = BADGE_POSITIONS;\nAvatar.propTypes = {\n  animate: _propTypes.default.bool,\n  backgroundColor: _propTypes.default.string,\n  badgePosition: _propTypes.default.oneOf(Object.values(BADGE_POSITIONS)),\n  badgeProps: _propTypes.default.object,\n  containerStyle: _reactNative.ViewPropTypes.style,\n  imageSource: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number]),\n  imageProps: _propTypes.default.object,\n  imageStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.array, _propTypes.default.number]),\n  onImageLoadStart: _propTypes.default.func,\n  onImageLoadEnd: _propTypes.default.func,\n  onImageLoadError: _propTypes.default.func,\n  label: _propTypes.default.string,\n  labelColor: _propTypes.default.string,\n  ribbonLabel: _propTypes.default.string,\n  ribbonStyle: _reactNative.ViewPropTypes.style,\n  ribbonLabelStyle: _text.default.propTypes.style,\n  customRibbon: _propTypes.default.element,\n  isOnline: _propTypes.default.bool,\n  status: _propTypes.default.oneOf(Object.keys(STATUS_MODES)),\n  size: _propTypes.default.number,\n  onPress: _propTypes.default.func\n};\nAvatar.defaultProps = {\n  animate: false,\n  backgroundColor: _style.Colors.dark80,\n  size: 50,\n  labelColor: _style.Colors.dark10,\n  badgePosition: DEFAULT_BADGE_POSITION\n};\n\nfunction createStyles(_ref) {\n  var labelColor = _ref.labelColor;\n\n  var styles = _reactNative.StyleSheet.create({\n    initialsContainerWithInset: {\n      top: 1,\n      right: 1,\n      bottom: 1,\n      left: 1\n    },\n    initials: {\n      color: labelColor,\n      backgroundColor: 'transparent'\n    },\n    ribbon: {\n      backgroundColor: _style.Colors.blue30,\n      paddingHorizontal: 6,\n      paddingVertical: 3\n    }\n  });\n\n  return styles;\n}","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/components/avatar/index.js"],"names":["deprecatedProps","old","new","STATUS_MODES","ONLINE","OFFLINE","AWAY","NONE","BADGE_POSITIONS","TOP_RIGHT","TOP_LEFT","BOTTOM_RIGHT","BOTTOM_LEFT","DEFAULT_BADGE_SIZE","DEFAULT_BADGE_POSITION","Avatar","props","getBadgeBorderWidth","_","get","getBadgeSize","forEach","prop","console","warn","styles","createStyles","size","width","height","alignItems","justifyContent","borderRadius","StyleSheet","absoluteFillObject","position","top","left","status","modes","Colors","yellow30","green30","dark60","isOnline","statusColor","getStatusBadgeColor","onlineColor","undefined","badgePosition","radius","x","Math","sqrt","y","shift","BADGE_SIZES","badgeLocation","split","toLower","badgeAlignment","testID","badgeProps","getBadgeColor","getBadgePosition","ribbonLabel","ribbonStyle","ribbonLabelStyle","customRibbon","getRibbonStyle","ribbon","animate","imageSource","onImageLoadStart","onImageLoadEnd","onImageLoadError","imageProps","imageStyle","hasImage","isUndefined","ImageContainer","AnimatedImage","Image","getContainerStyle","label","color","labelColor","backgroundColor","onPress","containerStyle","children","Container","TouchableOpacity","View","fontSizeToImageSizeRatio","fontSize","extractAccessibilityProps","getInitialsContainer","initialsContainerWithInset","initials","renderImage","renderBadge","renderRibbon","PureBaseComponent","displayName","propTypes","PropTypes","bool","string","oneOf","Object","values","object","ViewPropTypes","style","oneOfType","number","array","func","Text","element","keys","defaultProps","dark80","dark10","create","right","bottom","blue30","paddingHorizontal","paddingVertical"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, ViewPropTypes, TouchableOpacity} from 'react-native';\nimport {Colors} from '../../style';\nimport {PureBaseComponent} from '../../commons';\nimport Badge, {BADGE_SIZES} from '../badge';\nimport View from '../view';\nimport Text from '../text';\nimport Image from '../image';\nimport AnimatedImage from '../animatedImage';\n\nconst deprecatedProps = [\n  {old: 'isOnline', new: 'badgeProps.backgroundColor'},\n  {old: 'status', new: 'badgeProps.backgroundColor'}\n];\n\nexport const STATUS_MODES = {\n  ONLINE: 'ONLINE',\n  OFFLINE: 'OFFLINE',\n  AWAY: 'AWAY',\n  NONE: 'NONE'\n};\n\nexport const BADGE_POSITIONS = {\n  TOP_RIGHT: 'TOP_RIGHT',\n  TOP_LEFT: 'TOP_LEFT',\n  BOTTOM_RIGHT: 'BOTTOM_RIGHT',\n  BOTTOM_LEFT: 'BOTTOM_LEFT'\n};\n\nconst DEFAULT_BADGE_SIZE = 'pimpleBig';\nconst DEFAULT_BADGE_POSITION = BADGE_POSITIONS.TOP_RIGHT;\n\n/**\n * @description: Avatar component for displaying user profile images\n * @extends: TouchableOpacity\n * @extendsnotes: (when passing onPress)\n * @extendslink: docs/TouchableOpacity\n * @image: https://user-images.githubusercontent.com/33805983/34480603-197d7f64-efb6-11e7-9feb-db8ba756f055.png\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AvatarsScreen.js\n */\nexport default class Avatar extends PureBaseComponent {\n  constructor(props) {\n    super(props);\n\n    deprecatedProps.forEach(prop => {\n      if (props[prop.old]) {\n        console.warn(`\"Avatar's ${prop.old}\" property is deprecated, please use \"${prop.new}\"`);\n      }\n    });\n  }\n\n  static displayName = 'Avatar';\n  static modes = STATUS_MODES;\n  static badgePosition = BADGE_POSITIONS;\n  static propTypes = {\n    /**\n     * Adds fade in animation when Avatar image loads\n     */\n    animate: PropTypes.bool,\n    /**\n     * Background color for Avatar\n     */\n    backgroundColor: PropTypes.string,\n    /**\n     * Badge location on Avatar\n     */\n    badgePosition: PropTypes.oneOf(Object.values(BADGE_POSITIONS)),\n    /**\n     * Badge props passed down to Badge component\n     */\n    badgeProps: PropTypes.object,\n    /**\n     * Additional spacing styles for the container\n     */\n    containerStyle: ViewPropTypes.style,\n    /**\n     * The image source (external or assets)\n     */\n    imageSource: PropTypes.oneOfType([PropTypes.object, PropTypes.number]),\n    /**\n     * Image props object\n     */\n    imageProps: PropTypes.object,\n    /**\n     * Image style object used to pass additional style props\n     * by components which render image\n     */\n    imageStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),\n    /**\n     * Listener-callback for when an image's (uri) loading\n     * starts (equiv. to Image.onLoadStart()).\n     */\n    onImageLoadStart: PropTypes.func,\n    /**\n     * Listener-callback for when an image's (uri) loading\n     * either succeeds or fails (equiv. to Image.onLoadEnd()).\n     */\n    onImageLoadEnd: PropTypes.func,\n    /**\n     * Listener-callback for when an image's (uri) loading\n     * fails (equiv. to Image.onError()).\n     */\n    onImageLoadError: PropTypes.func,\n    /**\n     * Label that can represent initials\n     */\n    label: PropTypes.string,\n    /**\n     * The label color\n     */\n    labelColor: PropTypes.string,\n    /**\n     * ribbon label to display on the avatar\n     */\n    ribbonLabel: PropTypes.string,\n    /**\n     * ribbon custom style\n     */\n    ribbonStyle: ViewPropTypes.style,\n    /**\n     * ribbon label custom style\n     */\n    ribbonLabelStyle: Text.propTypes.style,\n    /**\n     * Custom ribbon\n     */\n    customRibbon: PropTypes.element,\n    /**\n     * Determine if to show online badge\n     */\n    isOnline: PropTypes.bool,\n    /**\n     * AWAY, ONLINE, OFFLINE or NONE mode (if set to a value other then 'NONE' will override isOnline prop)\n     */\n    status: PropTypes.oneOf(Object.keys(STATUS_MODES)),\n    /**\n     * Custom size for the Avatar\n     */\n    size: PropTypes.number,\n    /**\n     * Press handler\n     */\n    onPress: PropTypes.func\n  };\n\n  static defaultProps = {\n    animate: false,\n    backgroundColor: Colors.dark80,\n    size: 50,\n    labelColor: Colors.dark10,\n    badgePosition: DEFAULT_BADGE_POSITION\n  };\n\n  generateStyles() {\n    this.styles = createStyles(this.props);\n  }\n\n  getContainerStyle() {\n    const {size} = this.props;\n\n    return {\n      width: size,\n      height: size,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: size / 2\n    };\n  }\n\n  getInitialsContainer() {\n    const {size} = this.props;\n    return {\n      ...StyleSheet.absoluteFillObject,\n      alignItems: 'center',\n      justifyContent: 'center',\n      borderRadius: size / 2\n    };\n  }\n\n  getRibbonStyle() {\n    const {size} = this.props;\n\n    return {\n      position: 'absolute',\n      top: '10%',\n      left: size / 1.7,\n      borderRadius: size / 2\n    };\n  }\n\n  getStatusBadgeColor(status) {\n    switch (status) {\n      case Avatar.modes.AWAY:\n        return Colors.yellow30;\n      case Avatar.modes.ONLINE:\n        return Colors.green30;\n      case Avatar.modes.OFFLINE:\n        return Colors.dark60;\n      case Avatar.modes.NONE:\n      default:\n        return null;\n    }\n  }\n\n  getBadgeBorderWidth = () => _.get(this.props, 'badgeProps.borderWidth', 0);\n\n  getBadgeColor() {\n    const {isOnline, status} = this.props;\n    const statusColor = this.getStatusBadgeColor(status);\n    const onlineColor = isOnline ? Colors.green30 : undefined;\n\n    return _.get(this.props, 'badgeProps.backgroundColor') || statusColor || onlineColor;\n  }\n\n  getBadgeSize = () => _.get(this.props, 'badgeProps.size', DEFAULT_BADGE_SIZE);\n\n  getBadgePosition() {\n    const {size, badgePosition} = this.props;\n    const radius = size / 2;\n    const x = Math.sqrt(radius ** 2 * 2);\n    const y = x - radius;\n    const shift = Math.sqrt(y ** 2 / 2) - (BADGE_SIZES[this.getBadgeSize()] + this.getBadgeBorderWidth() * 2) / 2;\n    const badgeLocation = _.split(_.toLower(badgePosition), '_', 2);\n    const badgeAlignment = {position: 'absolute', [badgeLocation[0]]: shift, [badgeLocation[1]]: shift};\n\n    return badgeAlignment;\n  }\n\n  renderBadge() {\n    const {testID, badgeProps} = this.props;\n\n    if (badgeProps || this.getBadgeColor()) {\n      return (\n        <Badge\n          backgroundColor={this.getBadgeColor()}\n          size={this.getBadgeSize()}\n          {...badgeProps}\n          containerStyle={this.getBadgePosition()}\n          label={undefined}\n          testID={`${testID}.onlineBadge`}\n        />\n      );\n    }\n  }\n\n  renderRibbon() {\n    const {ribbonLabel, ribbonStyle, ribbonLabelStyle, customRibbon} = this.props;\n    if (ribbonLabel) {\n      return customRibbon ? (\n        <View style={this.getRibbonStyle()}>{customRibbon}</View>\n      ) : (\n        <View style={[this.getRibbonStyle(), this.styles.ribbon, ribbonStyle]}>\n          <Text numberOfLines={1} text100 white style={[ribbonLabelStyle]}>\n            {ribbonLabel}\n          </Text>\n        </View>\n      );\n    }\n  }\n\n  renderImage() {\n    const {\n      animate,\n      imageSource,\n      onImageLoadStart,\n      onImageLoadEnd,\n      onImageLoadError,\n      testID,\n      imageProps,\n      imageStyle\n    } = this.props;\n    const hasImage = !_.isUndefined(imageSource);\n    const ImageContainer = animate ? AnimatedImage : Image;\n\n    if (hasImage) {\n      return (\n        <ImageContainer\n          animate={animate}\n          style={[this.getContainerStyle(), StyleSheet.absoluteFillObject, imageStyle]}\n          source={imageSource}\n          onLoadStart={onImageLoadStart}\n          onLoadEnd={onImageLoadEnd}\n          onError={onImageLoadError}\n          testID={`${testID}.image`}\n          containerStyle={this.getContainerStyle()}\n          {...imageProps}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  render() {\n    const {\n      label,\n      labelColor: color,\n      imageSource,\n      backgroundColor,\n      onPress,\n      containerStyle,\n      children,\n      size,\n      testID\n    } = this.props;\n    const Container = onPress ? TouchableOpacity : View;\n    const hasImage = !_.isUndefined(imageSource);\n    const fontSizeToImageSizeRatio = 0.32;\n    const fontSize = size * fontSizeToImageSizeRatio;\n\n    return (\n      <Container\n        style={[this.getContainerStyle(), containerStyle]}\n        testID={testID}\n        onPress={onPress}\n        accessible\n        accessibilityLabel={'Avatar'}\n        accessibilityRole={onPress ? 'button' : 'image'}\n        {...this.extractAccessibilityProps()}\n      >\n        <View\n          style={[this.getInitialsContainer(), {backgroundColor}, hasImage && this.styles.initialsContainerWithInset]}\n        >\n          <Text numberOfLines={1} style={[{fontSize}, this.styles.initials, {color}]}>\n            {label}\n          </Text>\n        </View>\n        {this.renderImage()}\n        {this.renderBadge()}\n        {this.renderRibbon()}\n        {children}\n      </Container>\n    );\n  }\n}\n\nfunction createStyles({labelColor}) {\n  const styles = StyleSheet.create({\n    initialsContainerWithInset: {\n      top: 1,\n      right: 1,\n      bottom: 1,\n      left: 1\n    },\n    initials: {\n      color: labelColor,\n      backgroundColor: 'transparent'\n    },\n    ribbon: {\n      backgroundColor: Colors.blue30,\n      paddingHorizontal: 6,\n      paddingVertical: 3\n    }\n  });\n\n  return styles;\n}\n"]},"metadata":{},"sourceType":"script"}