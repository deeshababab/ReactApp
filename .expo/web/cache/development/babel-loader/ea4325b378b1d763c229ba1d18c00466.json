{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeAnimatable = require(\"react-native-animatable\");\n\nvar _style = require(\"../../style\");\n\nvar _helpers = require(\"../../helpers\");\n\nvar _commons = require(\"../../commons\");\n\nvar _text = _interopRequireDefault(require(\"../../components/text\"));\n\nvar _view = _interopRequireDefault(require(\"../../components/view\"));\n\nvar _jsxFileName = \"E:\\\\react-native-starter-master\\\\react-native-starter-master\\\\node_modules\\\\react-native-ui-lib\\\\src\\\\screensComponents\\\\loaderScreen\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar LoaderScreen = function (_BaseComponent) {\n  (0, _inherits2.default)(LoaderScreen, _BaseComponent);\n\n  var _super = _createSuper(LoaderScreen);\n\n  function LoaderScreen() {\n    (0, _classCallCheck2.default)(this, LoaderScreen);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(LoaderScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          message = _this$props.message,\n          messageStyle = _this$props.messageStyle,\n          loaderColor = _this$props.loaderColor,\n          overlay = _this$props.overlay,\n          backgroundColor = _this$props.backgroundColor,\n          containerStyle = _this$props.containerStyle,\n          others = (0, _objectWithoutProperties2.default)(_this$props, [\"message\", \"messageStyle\", \"loaderColor\", \"overlay\", \"backgroundColor\", \"containerStyle\"]);\n      var animationProps = this.extractAnimationProps();\n      var Container = !_lodash.default.isEmpty(animationProps) ? _reactNativeAnimatable.View : _view.default;\n\n      if (!_lodash.default.isEmpty(animationProps)) {\n        console.warn('LoaderScreen component will soon stop supporting animationProps.' + 'Please wrap your LoaderScreen component with your own animation component, such as Animatable.View');\n      }\n\n      return _react.default.createElement(Container, (0, _extends2.default)({\n        style: [overlay ? [styles.overlayContainer, {\n          backgroundColor: backgroundColor\n        }] : styles.container, containerStyle]\n      }, animationProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_view.default, {\n        flex: true,\n        center: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.ActivityIndicator, (0, _extends2.default)({\n        size: 'large',\n        animating: true,\n        color: loaderColor || (_helpers.Constants.isIOS ? _style.Colors.dark60 : _style.ThemeManager.primaryColor)\n      }, others, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      })), !overlay && message && _react.default.createElement(_text.default, {\n        style: [styles.message, messageStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 35\n        }\n      }, message)));\n    }\n  }]);\n  return LoaderScreen;\n}(_commons.BaseComponent);\n\nexports.default = LoaderScreen;\nLoaderScreen.displayName = 'LoaderScreen';\nLoaderScreen.propTypes = _objectSpread(_objectSpread({}, _reactNative.ActivityIndicator.propTypes), {}, {\n  loaderColor: _propTypes.default.string,\n  backgroundColor: _propTypes.default.string,\n  message: _propTypes.default.string,\n  messageStyle: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.number, _propTypes.default.array]),\n  overlay: _propTypes.default.bool\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlayContainer: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: _style.Colors.rgba(_style.Colors.white, 0.85),\n    zIndex: 100\n  }),\n  message: _objectSpread(_objectSpread({}, _style.Typography.text70), {}, {\n    marginTop: 18,\n    color: _style.Colors.dark10\n  })\n});","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/screensComponents/loaderScreen/index.js"],"names":["LoaderScreen","props","message","messageStyle","loaderColor","overlay","backgroundColor","containerStyle","others","animationProps","extractAnimationProps","Container","_","isEmpty","AnimatableView","View","console","warn","styles","overlayContainer","container","Constants","isIOS","Colors","dark60","ThemeManager","primaryColor","BaseComponent","displayName","propTypes","ActivityIndicator","PropTypes","string","oneOfType","object","number","array","bool","StyleSheet","create","flex","absoluteFillObject","rgba","white","zIndex","Typography","text70","marginTop","color","dark10"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;IAQqBA,Y;;;;;;;;;;;;6BA6BV;AAAA,wBAC2F,KAAKC,KADhG;AAAA,UACAC,OADA,eACAA,OADA;AAAA,UACSC,YADT,eACSA,YADT;AAAA,UACuBC,WADvB,eACuBA,WADvB;AAAA,UACoCC,OADpC,eACoCA,OADpC;AAAA,UAC6CC,eAD7C,eAC6CA,eAD7C;AAAA,UAC8DC,cAD9D,eAC8DA,cAD9D;AAAA,UACiFC,MADjF;AAGP,UAAMC,cAAc,GAAG,KAAKC,qBAAL,EAAvB;AACA,UAAMC,SAAS,GAAG,CAACC,gBAAEC,OAAF,CAAUJ,cAAV,CAAD,GAA6BK,2BAA7B,GAA8CC,aAAhE;;AACA,UAAI,CAACH,gBAAEC,OAAF,CAAUJ,cAAV,CAAL,EAAgC;AAC9BO,QAAAA,OAAO,CAACC,IAAR,CAAa,qEACT,oGADJ;AAED;;AAED,aACE,6BAAC,SAAD;AACE,QAAA,KAAK,EAAE,CAACZ,OAAO,GAAG,CAACa,MAAM,CAACC,gBAAR,EAA0B;AAACb,UAAAA,eAAe,EAAfA;AAAD,SAA1B,CAAH,GAAkDY,MAAM,CAACE,SAAjE,EAA4Eb,cAA5E;AADT,SAEME,cAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIE,6BAAC,aAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,MAAM,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,6BAAC,8BAAD;AACE,QAAA,IAAI,EAAE,OADR;AAEE,QAAA,SAAS,MAFX;AAGE,QAAA,KAAK,EAAEL,WAAW,KAAKiB,mBAAUC,KAAV,GAAkBC,cAAOC,MAAzB,GAAkCC,oBAAaC,YAApD;AAHpB,SAIMlB,MAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,EAOG,CAACH,OAAD,IAAYH,OAAZ,IAAuB,6BAAC,aAAD;AAAM,QAAA,KAAK,EAAE,CAACgB,MAAM,CAAChB,OAAR,EAAiBC,YAAjB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8CD,OAA9C,CAP1B,CAJF,CADF;AAgBD;;;EAvDuCyB,sB;;;AAArB3B,Y,CACZ4B,W,GAAc,c;AADF5B,Y,CAEZ6B,S,mCACFC,+BAAkBD,S;AAIrBzB,EAAAA,WAAW,EAAE2B,mBAAUC,M;AAIvB1B,EAAAA,eAAe,EAAEyB,mBAAUC,M;AAI3B9B,EAAAA,OAAO,EAAE6B,mBAAUC,M;AAInB7B,EAAAA,YAAY,EAAE4B,mBAAUE,SAAV,CAAoB,CAACF,mBAAUG,MAAX,EAAmBH,mBAAUI,MAA7B,EAAqCJ,mBAAUK,KAA/C,CAApB,C;AAId/B,EAAAA,OAAO,EAAE0B,mBAAUM;;;AAmCvB,IAAMnB,MAAM,GAAGoB,wBAAWC,MAAX,CAAkB;AAC/BnB,EAAAA,SAAS,EAAE;AACToB,IAAAA,IAAI,EAAE;AADG,GADoB;AAI/BrB,EAAAA,gBAAgB,kCACXmB,wBAAWG,kBADA;AAEdnC,IAAAA,eAAe,EAAEiB,cAAOmB,IAAP,CAAYnB,cAAOoB,KAAnB,EAA0B,IAA1B,CAFH;AAGdC,IAAAA,MAAM,EAAE;AAHM,IAJe;AAS/B1C,EAAAA,OAAO,kCACF2C,kBAAWC,MADT;AAELC,IAAAA,SAAS,EAAE,EAFN;AAGLC,IAAAA,KAAK,EAAEzB,cAAO0B;AAHT;AATwB,CAAlB,CAAf","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {StyleSheet, ActivityIndicator} from 'react-native';\nimport {View as AnimatableView} from 'react-native-animatable';\nimport {Colors, Typography, ThemeManager} from '../../style';\nimport {Constants} from '../../helpers';\nimport {BaseComponent} from '../../commons';\nimport Text from '../../components/text';\nimport View from '../../components/view';\n\n/**\n * @description: Component that shows a full screen with an activity indicator\n * @extends: Animatable.View\n * @gif: https://media.giphy.com/media/3o75212iau1oK8hznG/giphy.gif\n * @example: https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreenScreens/LoadingScreen.js\n */\nexport default class LoaderScreen extends BaseComponent {\n  static displayName = 'LoaderScreen';\n  static propTypes = {\n    ...ActivityIndicator.propTypes,\n    /**\n     * Color of the loading indicator\n     */\n    loaderColor: PropTypes.string,\n    /**\n     * Color of the loader background (only when passing 'overlay')\n     */\n    backgroundColor: PropTypes.string,\n    /**\n     * loader message\n     */\n    message: PropTypes.string,\n    /**\n     * message style\n     */\n    messageStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n    /**\n     * Show the screen as an absolute overlay\n     */\n    overlay: PropTypes.bool\n    /**\n     * Custom container style\n     */\n  };\n\n  render() {\n    const {message, messageStyle, loaderColor, overlay, backgroundColor, containerStyle, ...others} = this.props;\n\n    const animationProps = this.extractAnimationProps();\n    const Container = !_.isEmpty(animationProps) ? AnimatableView : View;\n    if (!_.isEmpty(animationProps)) {\n      console.warn('LoaderScreen component will soon stop supporting animationProps.' +\n          'Please wrap your LoaderScreen component with your own animation component, such as Animatable.View',);\n    }\n\n    return (\n      <Container\n        style={[overlay ? [styles.overlayContainer, {backgroundColor}] : styles.container, containerStyle]}\n        {...animationProps}\n      >\n        <View flex center>\n          <ActivityIndicator\n            size={'large'}\n            animating\n            color={loaderColor || (Constants.isIOS ? Colors.dark60 : ThemeManager.primaryColor)}\n            {...others}\n          />\n          {!overlay && message && <Text style={[styles.message, messageStyle]}>{message}</Text>}\n        </View>\n      </Container>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  overlayContainer: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: Colors.rgba(Colors.white, 0.85),\n    zIndex: 100\n  },\n  message: {\n    ...Typography.text70,\n    marginTop: 18,\n    color: Colors.dark10\n  }\n});\n"]},"metadata":{},"sourceType":"script"}