{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAnimatedConcat = createAnimatedConcat;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _AnimatedNode2 = _interopRequireDefault(require(\"./AnimatedNode\"));\n\nvar _AnimatedBlock = require(\"../core/AnimatedBlock\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AnimatedConcat = function (_AnimatedNode) {\n  (0, _inherits2.default)(AnimatedConcat, _AnimatedNode);\n\n  var _super = _createSuper(AnimatedConcat);\n\n  function AnimatedConcat(input) {\n    (0, _classCallCheck2.default)(this, AnimatedConcat);\n    return _super.call(this, {\n      type: 'concat',\n      input: input.map(function (n) {\n        return n.__nodeID;\n      })\n    }, input);\n  }\n\n  return AnimatedConcat;\n}(_AnimatedNode2.default);\n\nfunction createAnimatedConcat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return new AnimatedConcat(args.map(_AnimatedBlock.adapt));\n}","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/node_modules/react-native-reanimated/src/core/AnimatedConcat.js"],"names":["AnimatedConcat","input","type","map","n","__nodeID","AnimatedNode","createAnimatedConcat","args","adapt"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;;;IAEMA,c;;;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;AAAA,6BACX;AAAEC,MAAAA,IAAI,EAAE,QAAR;AAAkBD,MAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAU,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,QAAN;AAAA,OAAX;AAAzB,KADW,EAC4CJ,KAD5C;AAElB;;;EAH0BK,sB;;AAMtB,SAASC,oBAAT,GAAuC;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC5C,SAAO,IAAIR,cAAJ,CAAmBQ,IAAI,CAACL,GAAL,CAASM,oBAAT,CAAnB,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedConcat extends AnimatedNode {\n  constructor(input) {\n    super({ type: 'concat', input: input.map(n => n.__nodeID) }, input);\n  }\n}\n\nexport function createAnimatedConcat(...args) {\n  return new AnimatedConcat(args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"script"}