{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar dimensionsScope = {\n  WINDOW: 'window',\n  SCREEN: 'screen'\n};\nvar constants = {};\nconstants.orientations = {\n  PORTRAIT: 'portrait',\n  LANDSCAPE: 'landscape'\n};\nconstants.isAndroid = _reactNative.Platform.OS === 'android';\nconstants.isIOS = _reactNative.Platform.OS === 'ios';\n\nconstants.getAndroidVersion = function () {\n  return constants.isAndroid ? parseInt(_reactNative.Platform.Version, 10) : undefined;\n};\n\nfunction setStatusBarHeight() {\n  var StatusBarManager = _reactNative.NativeModules.StatusBarManager;\n  constants.statusBarHeight = 0;\n  constants.statusBarHeight = constants.isIOS ? 20 : StatusBarManager.HEIGHT;\n\n  if (constants.isIOS) {\n    StatusBarManager.getHeight(function (data) {\n      return constants.statusBarHeight = data.height;\n    });\n  }\n}\n\nsetStatusBarHeight();\n\nvar _Dimensions$get = _reactNative.Dimensions.get(dimensionsScope.SCREEN),\n    height = _Dimensions$get.height,\n    width = _Dimensions$get.width;\n\nconstants.isRTL = _reactNative.I18nManager.isRTL;\nconstants.orientation = getOrientation(height, width);\nconstants.isLandscape = constants.orientation === constants.orientations.LANDSCAPE;\nconstants.screenWidth = width;\nconstants.screenHeight = height;\nconstants.isSmallScreen = constants.screenWidth <= 340;\nconstants.isShortScreen = constants.screenHeight <= 600;\nconstants.screenAspectRatio = constants.screenWidth < constants.screenHeight ? constants.screenHeight / constants.screenWidth : constants.screenWidth / constants.screenHeight;\nconstants.isTablet = _reactNative.Platform.isPad || constants.screenAspectRatio < 1.6 && Math.max(constants.screenWidth, constants.screenHeight) >= 900;\n\nconstants.getSafeAreaInsets = function () {\n  return constants.orientation === constants.orientations.LANDSCAPE ? {\n    left: 44,\n    right: 44,\n    bottom: 24,\n    top: 0\n  } : {\n    left: 0,\n    right: 0,\n    bottom: 34,\n    top: 44\n  };\n};\n\nconstants.isIphoneX = constants.isIOS && !_reactNative.Platform.isPad && !_reactNative.Platform.isTVOS && (constants.screenHeight >= 812 || constants.screenWidth >= 812);\n\nfunction getOrientation(height, width) {\n  return width < height ? constants.orientations.PORTRAIT : constants.orientations.LANDSCAPE;\n}\n\nfunction updateConstants(dimensions) {\n  var _dimensions$screen = dimensions.screen,\n      height = _dimensions$screen.height,\n      width = _dimensions$screen.width;\n  constants.orientation = getOrientation(height, width);\n  constants.isLandscape = constants.orientation === constants.orientations.LANDSCAPE;\n  constants.screenWidth = width;\n  constants.screenHeight = height;\n  constants.isSmallScreen = constants.screenWidth <= 340;\n  constants.isShortScreen = constants.screenHeight <= 600;\n  setStatusBarHeight();\n}\n\n_reactNative.Dimensions.addEventListener('change', updateConstants);\n\nconstants.addDimensionsEventListener = function (callback) {\n  _reactNative.Dimensions.addEventListener('change', callback);\n};\n\nconstants.removeDimensionsEventListener = function (callback) {\n  _reactNative.Dimensions.removeEventListener('change', callback);\n};\n\nvar _default = constants;\nexports.default = _default;","map":{"version":3,"sources":["E:/react-native-starter-master/react-native-starter-master/node_modules/react-native-ui-lib/src/helpers/Constants.js"],"names":["dimensionsScope","WINDOW","SCREEN","constants","orientations","PORTRAIT","LANDSCAPE","isAndroid","Platform","OS","isIOS","getAndroidVersion","parseInt","Version","undefined","setStatusBarHeight","StatusBarManager","NativeModules","statusBarHeight","HEIGHT","getHeight","data","height","Dimensions","get","width","isRTL","I18nManager","orientation","getOrientation","isLandscape","screenWidth","screenHeight","isSmallScreen","isShortScreen","screenAspectRatio","isTablet","isPad","Math","max","getSafeAreaInsets","left","right","bottom","top","isIphoneX","isTVOS","updateConstants","dimensions","screen","addEventListener","addDimensionsEventListener","callback","removeDimensionsEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import {Platform, Dimensions, NativeModules, I18nManager} from 'react-native';\n\nconst dimensionsScope = {\n  WINDOW: 'window',\n  SCREEN: 'screen'\n};\n\nconst constants = {};\n\nconstants.orientations = {\n  PORTRAIT: 'portrait',\n  LANDSCAPE: 'landscape'\n};\n\n/* Platform */\nconstants.isAndroid = Platform.OS === 'android';\nconstants.isIOS = Platform.OS === 'ios';\n\nconstants.getAndroidVersion = () => {\n  return constants.isAndroid ? parseInt(Platform.Version, 10) : undefined;\n};\n\n/* Navigation */\nfunction setStatusBarHeight() {\n  const {StatusBarManager} = NativeModules;\n  constants.statusBarHeight = 0; // so there will be a value for any case\n  constants.statusBarHeight = constants.isIOS ? 20 : StatusBarManager.HEIGHT;\n  if (constants.isIOS) {\n    // override guesstimate height with the actual height from StatusBarManager\n    StatusBarManager.getHeight(data => (constants.statusBarHeight = data.height));\n  }\n}\n\nsetStatusBarHeight();\n\n/* Layout */\nconst {height, width} = Dimensions.get(dimensionsScope.SCREEN);\n\nconstants.isRTL = I18nManager.isRTL;\nconstants.orientation = getOrientation(height, width);\nconstants.isLandscape = constants.orientation === constants.orientations.LANDSCAPE;\nconstants.screenWidth = width;\nconstants.screenHeight = height;\nconstants.isSmallScreen = constants.screenWidth <= 340;\nconstants.isShortScreen = constants.screenHeight <= 600;\nconstants.screenAspectRatio =\n  constants.screenWidth < constants.screenHeight\n    ? constants.screenHeight / constants.screenWidth\n    : constants.screenWidth / constants.screenHeight;\nconstants.isTablet =\n  Platform.isPad ||\n  (constants.screenAspectRatio < 1.6 && Math.max(constants.screenWidth, constants.screenHeight) >= 900);\n\nconstants.getSafeAreaInsets = () => {\n  return constants.orientation === constants.orientations.LANDSCAPE\n    ? {left: 44, right: 44, bottom: 24, top: 0}\n    : {left: 0, right: 0, bottom: 34, top: 44};\n};\n\n/* Devices */\nconstants.isIphoneX =\n  constants.isIOS &&\n  !Platform.isPad &&\n  !Platform.isTVOS &&\n  (constants.screenHeight >= 812 || constants.screenWidth >= 812);\n\n/* Orientation */\nfunction getOrientation(height, width) {\n  return width < height ? constants.orientations.PORTRAIT : constants.orientations.LANDSCAPE;\n}\n\nfunction updateConstants(dimensions) {\n  const {height, width} = dimensions.screen;\n  constants.orientation = getOrientation(height, width);\n  constants.isLandscape = constants.orientation === constants.orientations.LANDSCAPE;\n  constants.screenWidth = width;\n  constants.screenHeight = height;\n  constants.isSmallScreen = constants.screenWidth <= 340;\n  constants.isShortScreen = constants.screenHeight <= 600;\n\n  setStatusBarHeight();\n}\n\nDimensions.addEventListener('change', updateConstants);\n\nconstants.addDimensionsEventListener = (callback) => {\n  Dimensions.addEventListener('change', callback);\n};\n\nconstants.removeDimensionsEventListener = (callback) => {\n  Dimensions.removeEventListener('change', callback);\n};\n\nexport default constants;\n"]},"metadata":{},"sourceType":"script"}